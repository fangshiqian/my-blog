<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>方世谦</title>
  
  
  <link href="/my-blog/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-07T09:05:51.412Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>方世谦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信小程序</title>
    <link href="http://yoursite.com/2019/12/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/12/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2019-12-04T19:58:58.000Z</published>
    <updated>2019-12-07T09:05:51.412Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="微信程序" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E5%BE%AE%E4%BF%A1%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="http://yoursite.com/2019/12/04/Vue/"/>
    <id>http://yoursite.com/2019/12/04/Vue/</id>
    <published>2019-12-04T13:47:57.000Z</published>
    <updated>2019-12-07T09:05:51.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="Vue介绍"><a href="#Vue介绍" class="headerlink" title="Vue介绍"></a>Vue介绍</h2><ul><li>构建用户界面（UI网页）的框架，关注视图层</li><li>框架：综合功能的封装</li><li>MVVM（数据驱动视图）model view modelview</li><li>可以轻松构建单页面应用程序(spa) single page application</li><li>核心特点：<ul><li>数据操作视图更新，解放DOM操作</li><li>组件化开发，提高开发效率和维护</li></ul></li><li>官方教程：<code>http://cn.vuejs/org/guide/</code></li><li>不支持IE8及以下</li></ul><h2 id="Vue下载"><a href="#Vue下载" class="headerlink" title="Vue下载"></a>Vue下载</h2><ul><li>网址：<code>：https://cdn.vuejs.org/index.html</code></li><li>CDN缓存技术<code>https://cdn.jsdelivr.net/npm/vue/dist/vue.js</code></li><li>npm下载 <code>npm i vue</code></li></ul><h2 id="Vue基本使用"><a href="#Vue基本使用" class="headerlink" title="Vue基本使用"></a>Vue基本使用</h2><ul><li><p>引入vue.js文件，通过script标签</p></li><li><p>会有一个构造函数Vue</p></li><li><p>实例化构造函数，参数传入一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'p'</span>，</span><br><span class="line">    data:&#123;</span><br><span class="line">    num:<span class="number">0</span>,<span class="comment">//数字初始化</span></span><br><span class="line">    str:<span class="string">''</span>,<span class="comment">//字符串初始化</span></span><br><span class="line">    isSeen:<span class="literal">false</span>,<span class="comment">//布尔类型初始化</span></span><br><span class="line">    arr:[],<span class="comment">//数组初始化</span></span><br><span class="line">    obj:&#123;&#125;,<span class="comment">//对象初始化或者开始为null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>通过vue的<code>自定义属性</code>，操作页面中的元素，其属性值，相当于放在js中解析，支持javascript的表达式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">'false'</span>&gt;</span>对p标签进行隐藏<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">'false'</span>&gt;</span></span><br><span class="line">    对p标签进行隐藏</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--v-if属性值为布尔类型时，一般如果不写值，默认为true</span></span><br><span class="line"><span class="comment">v-show如果不添加任何值，默认值为false--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span>相当于innerText<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>&gt;</span> 相当于innerHTML<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--将数据展示到标签内部&#123;&#123;&#125;&#125;和v-text均可--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>vue可以结合其他类库一起使用，互不影响</p></li></ul><h2 id="Vue实例对象的属性（实例选项）"><a href="#Vue实例对象的属性（实例选项）" class="headerlink" title="Vue实例对象的属性（实例选项）"></a>Vue实例对象的属性（实例选项）</h2><h3 id="el"><a href="#el" class="headerlink" title="el"></a>el</h3><ul><li><p>视图，模板</p></li><li><p>是划分范围，选中页面中的元素</p></li><li><p>值可以是选择器，DOM对象，jQ对象，建议使用id</p></li><li><p>如果选择器选中的是多个，只会对一个生效</p></li><li><p>不可以操作body和html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);<span class="comment">//如果选中所有不会生效，还会报错</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><ul><li><p>数据</p></li><li><p>其值是一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'p'</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        seen:<span class="literal">false</span>,</span><br><span class="line">        msg:<span class="string">'我是一段文本'</span>,</span><br><span class="line">        list:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">        user:&#123;</span><br><span class="line">            name:<span class="string">'张三'</span>,</span><br><span class="line">            age:<span class="number">18</span>,</span><br><span class="line">            gender:<span class="string">'男'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>概念：</p><blockquote><p>data—数据 </p><p>对数据进行管理–&gt;模型model</p><p>el–&gt;视图 模板</p></blockquote></li><li><p>注意：</p><ul><li>对于对象的修改<ul><li>对象没有初始化的对象成员如果修改不会更新到视图中</li><li>也有方式可以动态添加未初始化的数据成员并且更新到视图中<code>解决方法：Vue.set(app.user,&#39;gender&#39;,&#39;男&#39;)</code></li><li>可以直接对对象进行重新赋值实现视图更新</li></ul></li><li>对于数组的修改<ul><li>通过数组的一些操作方法可以正常进行视图的更新</li><li>对数组进行重新赋值可以更新视图</li><li>通过索引设置数组不会更新 vm.list[0]=newValue<code>解决方法：Vue.set(vm.list,0,{newValue})</code></li><li>通过设置数组长度不可以更新视图vm.list.length=newLength</li></ul></li></ul></li></ul><h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><ul><li><p>其值是一个对象</p></li><li><p>专门定义方法的属性，也可以定义事件的回调函数</p></li><li><p><strong>注意：当在data中定义了和methods中相同的属性名，以data中的为准，methods中不允许重复</strong></p></li><li><p><strong>methods属性不允许使用箭头函数进行定义，会改变this指向(window)，但是可以使用ES6方式去定义</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        clicked:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//与上面定义的方法相同：clicked()&#123;</span></span><br><span class="line">            </span><br><span class="line">       <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3><ul><li><p>类似window.onload</p></li><li><p>页面加载就执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'p'</span>,</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'li:nth-child(2)'</span>).style.color=<span class="string">'red'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><ul><li><p>侦听器</p></li><li><p>监听数据变化的机制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'p'</span>,</span><br><span class="line">    watch:&#123;</span><br><span class="line">        msg:<span class="function"><span class="keyword">function</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//newValue 新变化的数据</span></span><br><span class="line">            <span class="comment">//oldValue 旧变化的数据</span></span><br><span class="line">            <span class="built_in">console</span>.log(newValue,oldValue)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><ul><li><p>计算属性通道</p></li><li><p>当视图中的数据处于不确定状态时，采用计算属性</p></li><li><p>其中属性值为这个属性对应的<code>函数的返回值</code></p></li><li><p>在data中定义过的属性，不准在computed中重复定义，所以想要计算某个属性，直接无需在data中定义，在computed直接使用即可，就相当于定义过了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'p'</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">       student:<span class="literal">null</span>, </span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        student:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.students.filter(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.name=item.name</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="created"><a href="#created" class="headerlink" title="created"></a>created</h3><ul><li><p>vue实例对象实例化完成之后出发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'p'</span>,</span><br><span class="line">    created()&#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><ul><li>模型中的数据与视图的对应关系</li><li>节点=属性+标签+内容</li><li>数据绑定=属性绑定+文本绑定+事件绑定</li></ul><h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><ul><li><p>在Vue中对属性进行数据绑定，使用<code>v-bind:属性名=&quot;值&quot;</code></p></li><li><p>可以简写<code>&lt;p :class=&quot;[cls1]&quot;&gt;&lt;/p&gt;</code></p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:title</span>=<span class="string">'title'</span>&gt;</span>一段内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'p'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            title:<span class="string">'我是title'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>属性绑定特殊</p><ul><li><p>对<code>style</code>属性(相对特殊，绑定时，其值为对象)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;color:'red',backgroundColor:'#ffff'&#125;"</span>&gt;</span></span><br><span class="line">   注意：red加上引号，否则按照变量进行解析会报错</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>对<code>class</code>属性(相对特殊，绑定时，其值为对象，其中属性名为存在的类名，属性值为布尔类型，是否使用该属性名作为类名)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;test:true,demo:false&#125;"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:class</span>=<span class="string">"[cls1,cls2]"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'p'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            cls1:<span class="string">'test'</span>,</span></span><br><span class="line"><span class="actionscript">            cls2:<span class="string">'demo'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="文本绑定"><a href="#文本绑定" class="headerlink" title="文本绑定"></a>文本绑定</h3><ul><li><p>双大括号不能写在属性中</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">'txt'</span>&gt;</span></span><br><span class="line">相当于innerText    </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">'"我是文本“'</span>&gt;</span></span><br><span class="line">        此处方式主要，因为Vue的自定义属性内部的属性值，相当于放到js中解析，所以要注意书写格式</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">'txt1'</span>&gt;</span></span><br><span class="line">    相当于innerHTML</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;常用</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123;list[0]&#125;&#125;支持访问数组单元</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123;user.name&#125;&#125;支持访问对象，访问方式还是对象.的方式</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'p'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            txt:<span class="string">'我是文本'</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">            txt1:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是html结构的文本<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">            msg:<span class="string">'我也是文本'</span>,</span></span><br><span class="line"><span class="actionscript">            list:[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],</span></span><br><span class="line">            user:&#123;</span><br><span class="line"><span class="actionscript">                name:<span class="string">'张三'</span>,</span></span><br><span class="line">                age:18</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ul><li><p>语法：<code>v-on:事件名称=“回调函数”</code></p></li><li><p>可以简写<code>@事件名称=”回调函数“</code></p></li><li><p>当没有事件的回调函数没有传递参数的时候，实际上是有一个默认参数的，叫<code>事件对象</code>，实质和js中学的一样，传入书写固定格式为<code>$event</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &lt;a href="javascript:;" v-on:click='clicked'点击&lt;/a&gt;//相当于方法的调用，传递的参数相当于实参</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"clicked1($event,a)"</span> <span class="attr">value</span>=<span class="string">'点击我获取事件对象'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;&#125;,</span><br><span class="line"><span class="actionscript">       <span class="comment">//提供专门定义方法的属性methods,也可以定义事件的回调函数</span></span></span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">            clicked:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'点了'</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            clicked1:<span class="function"><span class="keyword">function</span><span class="params">(ev,n)</span></span>&#123;<span class="comment">//事件的声明，参数相当于形参</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(ev,a);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(ev.target);<span class="comment">//表示当前点击的DOM对象</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="事件绑定-修饰符"><a href="#事件绑定-修饰符" class="headerlink" title="事件绑定-修饰符"></a>事件绑定-修饰符</h3><ul><li>在vue中通过，<code>.修饰符</code>进行解决一些特殊的逻辑问题，如：冒泡，获取按键信息等</li><li>事件修饰符：<ul><li>.stop 阻止冒泡</li><li>.prevent 阻止表单提交默认行为<ul><li>以下几点会触发表单的提交行为<ul><li>点击type为submit的input</li><li>在文本框中回车</li><li>点击普通按钮<code>&lt;button&gt;&lt;/button&gt;</code></li><li>建议在form的submit事件中阻止表单自动提交行为</li></ul></li></ul></li><li>.capture </li><li>.self</li><li>.once</li><li>.passive</li></ul></li><li>按键修饰符<ul><li>.13</li><li>.enter</li><li>.tab</li><li>.delete</li><li>.esc</li><li>.space</li><li>.down</li><li>.left</li><li>.right</li><li>.up</li></ul></li><li>系统修饰符<ul><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta</li></ul></li><li>vue中也存在冒泡<ul><li>在原生js中阻止冒泡行为通过<code>事件对象.stopPropagation()</code>阻止</li></ul></li><li>这里使用原生js方式也是可以的，但是vue提供自己特有的方式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'parent'</span> @<span class="attr">click</span>=<span class="string">"clickParent"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span> @<span class="attr">click.stop</span>=<span class="string">"clickChild"</span>&gt;</span><span class="comment">&lt;!--阻止冒泡事件--&gt;</span></span><br><span class="line">           </span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">'send'</span>&gt;</span>//阻止表单提交默认行为</span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup</span>=<span class="string">"send"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> @<span class="attr">keyup.13</span>=<span class="string">"send"</span>&gt;</span><span class="comment">&lt;!--点击回车按键触发send事件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.enter</span>=<span class="string">"send"</span>&gt;</span><span class="comment">&lt;!--点击回车键触发send事件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.shift.enter</span>=<span class="string">"send"</span>&gt;</span><span class="comment">&lt;!--点击shift+enter触发send事件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.ctrl.shift.enter</span>=<span class="string">"end"</span>&gt;</span><span class="comment">&lt;!--点击ctrl+shift+enter按键触发send事件--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        methods:&#123;</span><br><span class="line">            clickParent()&#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'父亲'</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            clickChild()&#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'儿子'</span>);<span class="comment">//当点击子元素，父元素的点击事件也会触发，默认产生冒泡</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            send()&#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'你按下了这些按键……'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件绑定-this指向"><a href="#事件绑定-this指向" class="headerlink" title="事件绑定-this指向"></a>事件绑定-this指向</h3><ul><li>事件绑定中的this指向是vue的实例对象，且不可采用箭头函数的书写方式，因为会改变this的指向(window)</li></ul><h3 id="事件绑定-参数"><a href="#事件绑定-参数" class="headerlink" title="事件绑定-参数"></a>事件绑定-参数</h3><ul><li><p>默认参数是事件对象<code>$event</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">'clicked'</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--等价于--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">'clicked($event)'</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>传递参数直接<code>&lt;p @click=&#39;clicked(a,$event)&#39;&gt;&lt;/p&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'p'</span>,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        clicked(a,ev)&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(ev.target);<span class="comment">//表示当前点击的DOM对象</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="响应式数据绑定"><a href="#响应式数据绑定" class="headerlink" title="响应式数据绑定"></a>响应式数据绑定</h2><ul><li><p>模型中的数据和视图的响应式绑定（自动机制）</p></li><li><p>自己理解为就是，通过改变模型中的数据data来控制视图的显示</p></li><li><p>vue的实例对象可以直接访问data中的属性，也可以访问methods中的方法,或者<code>vue.$data.属性名</code></p></li><li><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'changeData'</span>&gt;</span></span><br><span class="line">        更改一个数据，视图自动变化</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            msg:<span class="string">'我是文本'</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">            changeData:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="comment">//此处不建议采用箭头函数的书写，因为会改变this指向(window)</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.msg=<span class="string">'我是更改的文本'</span>;<span class="comment">//这里的this指的是app，vue的实例对象</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.demo();</span></span><br><span class="line">            &#125;，</span><br><span class="line"><span class="actionscript">            demo:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'我就是一个普通方法'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="双向绑定数据"><a href="#双向绑定数据" class="headerlink" title="双向绑定数据"></a>双向绑定数据</h2><ul><li><p>前提：有自动机制（响应式数据绑定） 模型中的数据与视图相互响应</p></li><li><p>前面的响应式的数据绑定是：从vue的data中获取数据到视图中</p></li><li><p>视图上改变vue中的数据data</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"txt"</span>&gt;</span>//内部相当于为input注册input事件，并且记录input输入的值给txt,通过表单的v-model进行改变模型的data数据</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'clicked'</span>&gt;</span></span><br><span class="line">        查看改变的数据</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            txt:<span class="string">''</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">            clicked:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.txt);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>从视图上更新data数据，并在视图上进行响应（双向绑定）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'msg'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            msg:<span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><h3 id="v-show和v-if区别"><a href="#v-show和v-if区别" class="headerlink" title="v-show和v-if区别"></a>v-show和v-if区别</h3><ul><li>v-if和v-show都是控制视图的显示或隐藏</li><li>两者区别：<ul><li>v-if:直接移除页面中的元素</li><li>v-show:通过<code>display:none</code>进行控制视图的显示或隐藏元素</li><li>v-show无论真假始终渲染元素，v-if只有为true才会渲染</li><li>所以页面中对元素操作频繁时，用v-show,反之用v-if,另外v-if是惰性的，一旦为false,内部的所有元素都不会渲染</li></ul></li></ul><h3 id="v-if-v-else-if-v-else的使用"><a href="#v-if-v-else-if-v-else的使用" class="headerlink" title="v-if v-else-if v-else的使用"></a>v-if v-else-if v-else的使用</h3><ul><li><p>相当于js中的if - else if - else）</p></li><li><p>注意：</p><ul><li><p>v-if与v-else之间不准存在普通标签否则会报错</p></li><li><p>v-if和v-else必须在同一级</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 它是一个整体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">'seen'</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 他俩组成一个整体 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">'1==1'</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"age&gt;=17"</span>&gt;</span></span><br><span class="line">        成年</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        未成年</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"score&gt;=80"</span>&gt;</span></span><br><span class="line">   优秀 </span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">'age&gt;=70'</span>&gt;</span></span><br><span class="line">   良好 </span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">   及格 </span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            age:19,</span><br><span class="line">            score:88,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="v-for使用"><a href="#v-for使用" class="headerlink" title="v-for使用"></a>v-for使用</h3><ul><li><p>相当于js的forin</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'(item,index) in list'</span>&gt;</span>&#123;&#123;index&#125;&#125;--&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"(item,key,index) in user"</span>&gt;</span>&#123;&#123;key&#125;&#125;:&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">'n in 10'</span>&gt;</span></span><br><span class="line">        &#123;&#123;n&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            list:[1,2,3,4],</span><br><span class="line">            user:&#123;</span><br><span class="line"><span class="actionscript">                name:<span class="string">'张三'</span>,</span></span><br><span class="line">                age:18</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>数组更新</p><ul><li>常见的数组方法可以让其正常的进行视图更新</li><li>或者直接对数组重新赋值</li><li>注意以下两种不会更新视图<ul><li>通过索引直接设置数组不可以更新 vm.list[0]=newValue</li><li>通过改变数组长度不可以更新 vm.list.length=newLength</li></ul></li></ul></li><li><p>对象更新</p><ul><li>对没有初始化的对象成员设置不能更新到视图上</li><li>直接重新赋值该对象可以更新到视图上</li><li>修改对象的某一个初始化的成员可以更新到视图上</li></ul></li></ul><h3 id="在template标签中使用v-for"><a href="#在template标签中使用v-for" class="headerlink" title="在template标签中使用v-for"></a>在template标签中使用v-for</h3><ul><li><p>当需要遍历多个元素又不想增加额外标签节点时候，使用template标签是vue提供的一个特殊的标签，不会生成渲染结果</p></li><li><p><strong>注意</strong></p><ul><li><p>template上不能使用key,要把key加到真实的节点上</p></li><li><p>不能使用v-show</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">'item in todos'</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;&#123;item.id&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;&#123;item.title&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><blockquote><p>input事件：表单<code>正在</code>输入触发此事件</p></blockquote><h2 id="微博案例"><a href="#微博案例" class="headerlink" title="微博案例"></a>微博案例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"weibo"</span> id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;textarea <span class="class"><span class="keyword">class</span></span>=<span class="string">"weibo-text"</span>  v-model=<span class="string">'msg'</span> @keyup.shift.enter=<span class="string">'send'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line">    &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"weibo-btn"</span> value=<span class="string">"发布"</span> type=<span class="string">"button"</span> @click=<span class="string">'send'</span>&gt;</span><br><span class="line">    &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"weibo-list"</span>&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">'(item,index) in wblist'</span>&gt;&#123;&#123;item&#125;&#125;&lt;span @click=<span class="string">'deletewb(index)'</span> :index=<span class="string">'index'</span>&gt;删除&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="./</span>libs/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    new Vue(&#123;</span></span><br><span class="line"><span class="string">        el:'#app',</span></span><br><span class="line"><span class="string">        data:&#123;</span></span><br><span class="line"><span class="string">            msg:'',</span></span><br><span class="line"><span class="string">            wblist:[],</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">            send()&#123;</span></span><br><span class="line"><span class="string">                // console.log('发送');</span></span><br><span class="line"><span class="string">                this.wblist.unshift(this.msg);</span></span><br><span class="line"><span class="string">                this.msg="</span><span class="string">"</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">           </span></span><br><span class="line"><span class="string">            deletewb(i)&#123;</span></span><br><span class="line"><span class="string">                this.wblist.splice(i,1);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="key的使用"><a href="#key的使用" class="headerlink" title="key的使用"></a>key的使用</h2><ul><li><p>vue在进行模板渲染的时候，为了提升性能，并不是每次都创建新的节点，而是当页面有重复的节点，会选择直接复用（此复用是指原位置变化）</p></li><li><p>key的值一般不会使用索引值</p></li><li><p>只能是<code>简单类型</code>的字符串和数字类型，不能是数组和对象</p></li><li><p>为了解决它的弊端，存在一个叫<code>key</code>的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">key</span>=<span class="string">'1'</span> <span class="attr">placeholder</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">key</span>=<span class="string">'2'</span> <span class="attr">placeholder</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'clicked'</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                seen:<span class="literal">true</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line"><span class="actionscript">                clicked:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.seen=<span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>应用场景：与v-for结合</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'item in list'</span>&gt;</span>&#123;&#123;item.name&#125;&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                list:[&#123;</span><br><span class="line"><span class="javascript">                    id:<span class="built_in">Math</span>.random(),</span></span><br><span class="line"><span class="actionscript">                    name:<span class="string">'张三'</span>,</span></span><br><span class="line">                    age:18,</span><br><span class="line"><span class="actionscript">                    gender:<span class="string">'男'</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="javascript">                    id:<span class="built_in">Math</span>.random(),</span></span><br><span class="line"><span class="actionscript">                    name:<span class="string">'张三1'</span>,</span></span><br><span class="line">                    age:18,</span><br><span class="line"><span class="actionscript">                    gender:<span class="string">'男'</span></span></span><br><span class="line">                &#125;,&#123;</span><br><span class="line"><span class="javascript">                    id:<span class="built_in">Math</span>.random(),</span></span><br><span class="line"><span class="actionscript">                    name:<span class="string">'张三2'</span>,</span></span><br><span class="line">                    age:18,</span><br><span class="line"><span class="actionscript">                    gender:<span class="string">'男'</span></span></span><br><span class="line">                &#125;],</span><br><span class="line">              </span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                random()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> </span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="指令使用"><a href="#指令使用" class="headerlink" title="指令使用"></a>指令使用</h2><ul><li><p>就是带v-前缀的特殊属性</p></li><li><p>v-once:数据引用一次</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-once</span>&gt;</span></span><br><span class="line">        &#123;&#123;text&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      &#123;&#123;text&#125;&#125;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-cloak解决模板渲染时的页面闪烁，结合css使用</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">display</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">        &#123;&#123;text&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'./libs/vue.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> wm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            text:<span class="string">'我是'</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-pre：表示对应的标签不会再被vue处理</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-pre</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><ul><li><p>跟踪视图改变模型数据</p></li><li><p>使用</p><ul><li><p>对于type为text和textarea,使用v-model相当于对其进行绑定input事件来进行追踪当前元素内部的value值的变化</p><ul><li><p>其中v-model的修饰符</p><blockquote><p>v-model.lazy:使其绑定的事件转换为change事件</p><p>v-model.number：使其输入的内容进行数字类型转换</p><p>v-model.trim:使其清除左右两边的空格</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;&#123;username&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">v-model</span>=<span class="string">'username'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">'msg'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>对于checkbox和radio类型的表单控件，使用v-model相当于对其进行绑定change事件，<code>需要配合value属性</code>,当不设置value时<code>还是控制选中状态</code></p><ul><li><p>其中多选框需要设置数据为数组类型,为了收集选中的内容</p></li><li><p>无需通过checked指定默认的选中项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">:value</span>=<span class="string">'"足球"'</span> <span class="attr">v-model</span>=<span class="string">'hobby'</span>&gt;</span>足球</span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">:value</span>=<span class="string">'"篮球"'</span> <span class="attr">v-model</span>=<span class="string">'hobby'</span>&gt;</span>篮球</span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>  <span class="attr">:value</span>=<span class="string">'"男"'</span> <span class="attr">v-model</span>=<span class="string">'gender'</span>&gt;</span>男</span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>  <span class="attr">:value</span>=<span class="string">'"女"'</span> <span class="attr">v-model</span>=<span class="string">'gender'</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">               gender:<span class="string">'男'</span>,</span></span><br><span class="line"><span class="actionscript">               hobby:[<span class="string">'足球'</span>,<span class="string">'篮球'</span>]</span></span><br><span class="line">              </span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>对于select类型的表单控件，使用v-model相当于对其进行绑定change事件，可以配合value属性（建议配合）</p><ul><li><p>配合value时，参考的标准为value</p></li><li><p>不配合value时，参考的标准为当前选中的option的文本内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">'number'</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">               number:1</span><br><span class="line">              </span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="全选和反选案例"><a href="#全选和反选案例" class="headerlink" title="全选和反选案例"></a>全选和反选案例</h2><ul><li><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span>   <span class="attr">id</span>=<span class="string">"checkAll"</span> <span class="attr">:checked</span>=<span class="string">'list.length==checkedItem.length'</span> @<span class="attr">click</span>=<span class="string">'ckClick'</span> </span></span><br><span class="line"><span class="tag">       /&gt;</span>全选/全不选</span><br><span class="line">      <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>菜名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>商家<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'item in list'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>    <span class="attr">class</span>=<span class="string">"ck"</span> <span class="attr">:value</span>=<span class="string">'item.food'</span> <span class="attr">v-model</span>=<span class="string">'checkedItem'</span>  /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.food&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.brand&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                isCk:<span class="literal">false</span>,</span></span><br><span class="line">                list:[</span><br><span class="line"><span class="actionscript">                    &#123;id:<span class="number">1</span>,food:<span class="string">'红烧肉'</span>,brand:<span class="string">'李家'</span>,price:<span class="string">'￥200'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                    &#123;id:<span class="number">2</span>,food:<span class="string">'烧肉'</span>,brand:<span class="string">'赵家'</span>,price:<span class="string">'￥203'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                    &#123;id:<span class="number">3</span>,food:<span class="string">'红肉'</span>,brand:<span class="string">'孙家'</span>,price:<span class="string">'￥205'</span>&#125;,</span></span><br><span class="line">                ],</span><br><span class="line">                checkedItem:[],</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line"><span class="actionscript">                ckClick:<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line">                    if(e.target.checked)</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="javascript">                       <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//    this.checkedItem.push(item.food);</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(item.food);</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.checkedItem.push(item.food)</span></span><br><span class="line">                        </span><br><span class="line">                        </span><br><span class="line">                       &#125;) </span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h2><ul><li><p>对于属性绑定和事件绑定中的属性和事件名，变为动态的变量</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>  @[<span class="attr">eve</span>]=<span class="string">'clicked'</span> <span class="attr">:</span>[<span class="attr">prop</span>]=<span class="string">'"我是"'</span>&gt;</span><span class="comment">&lt;!--注意此处属性值的写法，进入vue管理，属性值当js中解析，所以需要两次引号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                eve:<span class="string">'click'</span>,</span></span><br><span class="line"><span class="actionscript">                prop:<span class="string">'title'</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">            clicked()&#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'我被点了……'</span>);</span></span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><ul><li><p>当视图中的数据展示处于不确定状态时。当你需要提供一些代码逻辑改变数据，从而进行渲染数据，可以采用计算属性</p></li><li><p>自己理解：也是<code>双向绑定</code>的一种体现，就是在computed内部计算属性，随着数据的不断改变，从而实现不断重新计算属性，对于事件绑定的事件处理函数均定义在methods中，其余如果涉及到页面渲染的(el,data,computed等)，计算属性的方法定义在computed中</p></li><li><p>触发时机，是页面加载时触发+视图改变促使数据改变</p></li><li><p>一定要有返回值，返回之后就是属性值</p></li><li><p>自带缓存技术</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'name'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-if</span>=<span class="string">'student.length'</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;student[0].name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;student[0].age&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;student[0].gender&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">              什么都没有</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">          el: <span class="string">'#app'</span>,</span></span><br><span class="line">          data: &#123;</span><br><span class="line"><span class="actionscript">              name: <span class="string">''</span>,</span></span><br><span class="line">              students: [</span><br><span class="line"><span class="actionscript">                  &#123; name: <span class="string">'小明'</span>, age: <span class="number">20</span>, gender: <span class="string">'男'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">                  &#123; name: <span class="string">'小画'</span>, age: <span class="number">10</span>, gender: <span class="string">'男'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">                  &#123; name: <span class="string">'小李'</span>, age: <span class="number">22</span>, gender: <span class="string">'男'</span> &#125;,</span></span><br><span class="line">              ],</span><br><span class="line">          &#125;,</span><br><span class="line">          computed: &#123;</span><br><span class="line"><span class="actionscript">              student: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">return</span> <span class="keyword">this</span>.students.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                      <span class="keyword">return</span> <span class="keyword">this</span>.name == item.name</span></span><br><span class="line">                  &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">       </span><br><span class="line">  </span><br><span class="line">      &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><ul><li><p>监听数据变化的机制</p></li><li><p>监听数据变化，获取新的数据和旧的数据，没有直接涉及渲染页面，当你想通过数据的变化实现一些特定逻辑，使用watch监视</p></li><li><p>不需要返回值，不需要绑定模式功能特点</p></li><li><p>触发机制=数据一改变就触发</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name1&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'name'</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">          el: <span class="string">'#app'</span>,</span></span><br><span class="line">          data: &#123;</span><br><span class="line">              name: 1,</span><br><span class="line"><span class="actionscript">              name1:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">              seen: <span class="literal">false</span>,</span></span><br><span class="line">              students: [</span><br><span class="line"><span class="actionscript">                  &#123; name: <span class="string">'小明'</span>, age: <span class="number">20</span>, gender: <span class="string">'男'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">                  &#123; name: <span class="string">'小画'</span>, age: <span class="number">10</span>, gender: <span class="string">'男'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">                  &#123; name: <span class="string">'小李'</span>, age: <span class="number">22</span>, gender: <span class="string">'男'</span> &#125;,</span></span><br><span class="line">              ],</span><br><span class="line">          &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line"><span class="actionscript">              name:<span class="function"><span class="keyword">function</span><span class="params">(newV,oldV)</span></span></span></span><br><span class="line">              &#123;</span><br><span class="line"><span class="actionscript">                  <span class="comment">// this.name1=newV.split('').reverse().join('');</span></span></span><br><span class="line"><span class="javascript">                  <span class="built_in">console</span>.log(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                  <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="built_in">Number</span>(newV)));</span></span><br><span class="line">                                </span><br><span class="line"><span class="javascript">                  <span class="keyword">if</span>(!<span class="built_in">Number</span>(newV)&amp;&amp;newV!=<span class="string">''</span>)</span></span><br><span class="line">                  &#123;</span><br><span class="line"><span class="actionscript">                      <span class="keyword">this</span>.name=oldV;</span></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Vue-DevTools调试工具"><a href="#Vue-DevTools调试工具" class="headerlink" title="Vue DevTools调试工具"></a>Vue DevTools调试工具</h2><ul><li>vue devtools插件默认只能工作在http协议下</li><li>如果想要它在file://本地文件地址协议下工作，必须手动设置启动<code>允许访问文件网址</code></li></ul><h2 id="基础案例"><a href="#基础案例" class="headerlink" title="基础案例"></a>基础案例</h2><ul><li><p>todoMVC.com</p></li><li><p>初始化：</p><ul><li>下载模板</li><li>使用github把模板下载到本地</li><li>切换到下载的目录</li><li>模板项目把样式等文件放到第三方包里面，所以我们需要执行npm i安装它的那些依赖项才能正常预览这个项目</li></ul></li><li><p>需求说明：</p></li><li><input disabled="" type="checkbox"> <p>任务列表</p><ul><li><input disabled="" type="checkbox"> 有数据的时候</li><li><input disabled="" type="checkbox"> 没有数据的时候</li></ul></li><li><input disabled="" type="checkbox"> <p>添加任务</p><ul><li><input disabled="" type="checkbox"> 添加任务到列表中</li><li><input disabled="" type="checkbox"> 文本框清空</li></ul></li><li><input disabled="" type="checkbox"> <p>删除单个任务项</p></li><li><input disabled="" type="checkbox"> <p>单个任务状态切换</p></li><li><input disabled="" type="checkbox"> <p>删除所有已完成任务</p></li><li><input disabled="" type="checkbox"> <p>切换所有任务的完成状态（全选功能）</p></li><li><input disabled="" type="checkbox"> <p>显示所有未完成的数量</p></li><li><input disabled="" type="checkbox"> <p>数据筛选</p><ul><li><input disabled="" type="checkbox"> 展示所有任务</li><li><input disabled="" type="checkbox"> 展示已完成任务</li><li><input disabled="" type="checkbox"> 展示未完成任务</li><li><input disabled="" type="checkbox"> 刷新页面保持筛选状态</li></ul></li><li><input disabled="" type="checkbox"> <p>数据持久化</p><ul><li><input disabled="" type="checkbox"> 这里没有后端接口，我们可以使用本地存储简单处理一下</li></ul></li><li><input disabled="" type="checkbox"> <p>编辑任务</p><ul><li><input disabled="" type="checkbox"> 双击获取编辑状态</li><li><input disabled="" type="checkbox"> 回车保存</li><li><input disabled="" type="checkbox"> esc取消</li></ul></li><li><p>代码(index.html)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Template • TodoMVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/todomvc-common/base.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/todomvc-app-css/index.css"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- CSS overrides - remove if you don't need it --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/app.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"todoapp"</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>todo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"new-todo"</span> <span class="attr">placeholder</span>=<span class="string">"What needs to be done?"</span> <span class="attr">autofocus</span> <span class="attr">v-model</span>=<span class="string">'message'</span></span></span><br><span class="line"><span class="tag">@<span class="attr">keyup.enter</span>=<span class="string">'addItem'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- This section should be hidden by default and shown when there are todos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"toggle-all"</span> <span class="attr">class</span>=<span class="string">"toggle-all"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> @<span class="attr">change</span>=<span class="string">'toggleChecked'</span> <span class="attr">:checked</span>=<span class="string">'isAll'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"toggle-all"</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:class</span>=<span class="string">" &#123;completed:item.done,editing:item==isEdit&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">'item.done'</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> @<span class="attr">dblclick</span>=<span class="string">"isEdit=item"</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span> @<span class="attr">click</span>=<span class="string">'delItem(item.id)'</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &#123;&#123;isEdit&#125;&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"edit"</span> <span class="attr">:value</span>=<span class="string">"isEdit.title"</span> @<span class="attr">keyup.enter</span>=<span class="string">'editItem'</span> @<span class="attr">keyup.esc</span>=<span class="string">'isEdit=&#123;&#125;'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- This footer should hidden by default and shown when there are todos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- This should be `0 items left` by default --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"todo-count"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> item left<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Remove this if you don't implement routing --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"filters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"selected"</span> <span class="attr">href</span>=<span class="string">"#/"</span>&gt;</span>All<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/active"</span>&gt;</span>Active<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/completed"</span>&gt;</span>Completed<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Hidden if no completed items are left ↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"clear-completed"</span> <span class="attr">v-show</span>=<span class="string">'isShow'</span> @<span class="attr">click</span>=<span class="string">'delCompleted'</span>&gt;</span>Clear completed<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Double-click to edit a todo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Remove the below line ↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Template by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://sindresorhus.com"</span>&gt;</span>Sindre Sorhus<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Change this out with your name and url ↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Created by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://todomvc.com"</span>&gt;</span>you<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Part of <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://todomvc.com"</span>&gt;</span>TodoMVC<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Scripts here. Don't remove ↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/todomvc-common/base.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/app.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>代码(app.js)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">'#app'</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">message: <span class="string">''</span>,</span><br><span class="line">list:<span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">'todolist'</span>))||[],</span><br><span class="line">isEdit: []</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">        <span class="comment">//每当list发生变化（添加删除修改）</span></span><br><span class="line">        <span class="comment">//默认只会监视数组成员的添加，删除，无法监视修改到成员中的对象数据修改</span></span><br><span class="line">        <span class="comment">//之前写的形式都是简写</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        list(newValue,oldValue)&#123;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        &#125; </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//深度监视一般针对复杂数据类型：数组，对象之类的</span></span><br><span class="line">list:&#123;</span><br><span class="line">            <span class="comment">//handler就是数据改变之后执行的处理函数</span></span><br><span class="line">handler()&#123;</span><br><span class="line"><span class="built_in">window</span>.localStorage.setItem(<span class="string">'todolist'</span>,<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.list));</span><br><span class="line">&#125;,</span><br><span class="line">deep:<span class="literal">true</span><span class="comment">//深度监视默认为false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">isAll() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.list.every(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> item.done</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">count() &#123;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!item.done) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;,</span><br><span class="line">isShow() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.list.some(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> item.done</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">addItem() &#123;</span><br><span class="line"><span class="keyword">this</span>.list.push(&#123;</span><br><span class="line">id: <span class="keyword">this</span>.list[<span class="keyword">this</span>.list.length - <span class="number">1</span>].id + <span class="number">1</span>,</span><br><span class="line">title: <span class="keyword">this</span>.message,</span><br><span class="line">done: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.message = <span class="string">''</span>;</span><br><span class="line">&#125;,</span><br><span class="line">delItem(id) &#123;</span><br><span class="line"><span class="keyword">this</span>.list.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (item.id == id) &#123;</span><br><span class="line"><span class="keyword">this</span>.list.splice(index, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">toggleChecked(e) &#123;</span><br><span class="line"><span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">item.done = e.target.checked;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">delCompleted() &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.list.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.list[i].done) &#123;</span><br><span class="line"><span class="keyword">this</span>.list.splice(i, <span class="number">1</span>);</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">editItem(e) &#123;</span><br><span class="line"><span class="comment">// console.log(e.target.value);</span></span><br><span class="line"><span class="keyword">this</span>.isEdit.title = e.target.value;</span><br><span class="line"><span class="comment">// this.isEdit=null;</span></span><br><span class="line"><span class="keyword">this</span>.isEdit = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>自己写的(index.html)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Template • TodoMVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/todomvc-common/base.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/todomvc-app-css/index.css"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- CSS overrides - remove if you don't need it --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/app.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"todoapp"</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>todomvc<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">实践建议：所有事件处理函数都起名为onXx,有利于阅读</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"new-todo"</span> <span class="attr">placeholder</span>=<span class="string">"What needs to be done?"</span> <span class="attr">autofocus</span> <span class="attr">v-model</span>=<span class="string">'inputTitle'</span></span></span><br><span class="line"><span class="tag">@<span class="attr">keyup.13</span>=<span class="string">'onAdd'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- This section should be hidden by default and shown when there are todos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">'todos.length'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"toggle-all"</span> <span class="attr">class</span>=<span class="string">"toggle-all"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> @<span class="attr">change</span>=<span class="string">'checkToggle'</span></span></span><br><span class="line"><span class="tag"><span class="attr">:checked</span>=<span class="string">'todos.length==checkedArr.length'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"toggle-all"</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">任务项：li有三种内置样式</span></span><br><span class="line"><span class="comment">completed 已完成状态</span></span><br><span class="line"><span class="comment">没有class 未完成状态</span></span><br><span class="line"><span class="comment">editing 编辑状态</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">'todo.id'</span> <span class="attr">v-for</span>=<span class="string">'(todo,index) in toggleArr'</span></span></span><br><span class="line"><span class="tag"><span class="attr">:class</span>=<span class="string">'&#123;completed:todo.done,editing:todo==isEdit&#125;'</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">表单元素 checkbox</span></span><br><span class="line"><span class="comment">双向绑定</span></span><br><span class="line"><span class="comment">数据影响视图</span></span><br><span class="line"><span class="comment">true:选中</span></span><br><span class="line"><span class="comment">false:不选</span></span><br><span class="line"><span class="comment">视图影响数据</span></span><br><span class="line"><span class="comment">选中 把数据修改为true</span></span><br><span class="line"><span class="comment">取消选中 把数据修改为false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数据改变，就会影响视图更新</span></span><br><span class="line"><span class="comment">为啥checkobox 切换把样式也给影响了，因为class也绑定了todo.done这个数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">'todo.done'</span> @<span class="attr">change</span>=<span class="string">'changed(index)'</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> @<span class="attr">dblclick</span>=<span class="string">"isEdit=todo"</span>&gt;</span>&#123;&#123;todo.title&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span> @<span class="attr">click</span>=<span class="string">'onDelete(index)'</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 编辑文本框默认隐藏，当任务项；li拥有editing为编辑模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"edit"</span> <span class="attr">:value</span>=<span class="string">"todo.title"</span> @<span class="attr">keyup.13</span>=<span class="string">'onSave'</span> @<span class="attr">keyup.esc</span>=<span class="string">'isEdit=null'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- This footer should hidden by default and shown when there are todos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- This should be `0 items left` by default --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"todo-count"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> item left<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Remove this if you don't implement routing --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"filters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">"&#123;selected:isShowAll&#125;"</span> <span class="attr">href</span>=<span class="string">"#/"</span> @<span class="attr">click</span>=<span class="string">'showAll'</span>&gt;</span>All<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/active"</span> <span class="attr">:class</span>=<span class="string">"&#123;selected:isShowActive&#125;"</span> @<span class="attr">click</span>=<span class="string">'showActive'</span>&gt;</span>Active<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/completed"</span> <span class="attr">:class</span>=<span class="string">"&#123;selected:isShowCompleted&#125;"</span> @<span class="attr">click</span>=<span class="string">'showCompleted'</span>&gt;</span>Completed<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Hidden if no completed items are left ↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"clear-completed"</span> <span class="attr">v-show</span>=<span class="string">'isShow'</span> @<span class="attr">click</span>=<span class="string">'onDeleteCompleted'</span>&gt;</span>Clear completed<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Double-click to edit a todo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Remove the below line ↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Template by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://sindresorhus.com"</span>&gt;</span>Sindre Sorhus<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Change this out with your name and url ↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Created by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://todomvc.com"</span>&gt;</span>you<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Part of <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://todomvc.com"</span>&gt;</span>TodoMVC<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Scripts here. Don't remove ↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/todomvc-common/base.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/app.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>自己写的(app.js)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">'#app'</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">inputTitle: <span class="string">''</span>,<span class="comment">//用户输入的任务名称</span></span><br><span class="line">todos: [</span><br><span class="line">&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'吃饭'</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'睡觉'</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'打豆豆'</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">&#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">title</span>: <span class="string">'跑步'</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line"></span><br><span class="line">],</span><br><span class="line">isEdit: &#123;&#125;,</span><br><span class="line">isSeen: <span class="literal">true</span>,</span><br><span class="line">toggleArr: [],</span><br><span class="line">isShowActive:<span class="literal">false</span>,</span><br><span class="line">isShowCompleted:<span class="literal">false</span>,</span><br><span class="line">isShowAll:<span class="literal">true</span>,</span><br><span class="line">isDelete:&#123;&#125;,</span><br><span class="line"><span class="comment">// todosNew: []</span></span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">isShow() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.todos.some(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> item.done;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">count() &#123;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.toggleArr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!item.done) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;,</span><br><span class="line">checkedArr() &#123;</span><br><span class="line"><span class="keyword">var</span> ckArr = [];</span><br><span class="line"><span class="keyword">this</span>.todos.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (item.done) &#123;</span><br><span class="line">ckArr.push(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> ckArr;</span><br><span class="line">&#125;,</span><br><span class="line">activeArr() &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">onAdd() &#123;</span><br><span class="line"><span class="comment">// 1.得到文本框的数据</span></span><br><span class="line"><span class="comment">// 2.非空校验</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.inputTitle.trim()) &#123;</span><br><span class="line">alert(<span class="string">'请输入内容'</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.todos);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.如果没有问题，把数据添加到任务列表中</span></span><br><span class="line"><span class="keyword">this</span>.toggleArr.push(&#123;</span><br><span class="line">id: <span class="keyword">this</span>.todos[<span class="keyword">this</span>.todos.length<span class="number">-1</span>].id+<span class="number">1</span>,</span><br><span class="line">title: <span class="keyword">this</span>.inputTitle,</span><br><span class="line">done: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.todos=<span class="keyword">this</span>.toggleArr;</span><br><span class="line">localStorage.setItem(<span class="string">'todos'</span>,<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.todos));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.清空数据</span></span><br><span class="line"><span class="keyword">this</span>.inputTitle = <span class="string">''</span>;</span><br><span class="line">&#125;,</span><br><span class="line">onDelete(index) &#123;</span><br><span class="line"><span class="keyword">this</span>.toggleArr.splice(index, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">this</span>.todos.splice(index,<span class="number">1</span>);</span><br><span class="line">localStorage.setItem(<span class="string">'todos'</span>,<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.todos));</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">onDeleteCompleted() &#123;</span><br><span class="line"><span class="keyword">var</span> todosNew = [];</span><br><span class="line"><span class="keyword">this</span>.todos.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!item.done) &#123;</span><br><span class="line"></span><br><span class="line">todosNew.push(item);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.todos = todosNew;</span><br><span class="line">&#125;,</span><br><span class="line">showActive(e) &#123;</span><br><span class="line"><span class="keyword">this</span>.toggleArr=[];</span><br><span class="line"><span class="keyword">this</span>.todos.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!item.done) &#123;</span><br><span class="line"><span class="keyword">this</span>.toggleArr.push(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.isShowActive=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>.isShowAll=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">this</span>.isShowCompleted=<span class="literal">false</span>;</span><br><span class="line">localStorage.setItem(<span class="string">'isShowPage'</span>,<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">isShowAll:<span class="keyword">this</span>.isShowAll,</span><br><span class="line">isShowActive:<span class="keyword">this</span>.isShowActive,</span><br><span class="line">isShowCompleted:<span class="keyword">this</span>.isShowCompleted</span><br><span class="line">&#125;));</span><br><span class="line">&#125;,</span><br><span class="line">showCompleted() &#123;</span><br><span class="line"><span class="keyword">this</span>.toggleArr=[];</span><br><span class="line"><span class="keyword">this</span>.todos.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (item.done) &#123;</span><br><span class="line"><span class="keyword">this</span>.toggleArr.push(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.isShowCompleted=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>.isShowAll=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">this</span>.isShowActive=<span class="literal">false</span>;</span><br><span class="line">localStorage.setItem(<span class="string">'isShowPage'</span>,<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">isShowAll:<span class="keyword">this</span>.isShowAll,</span><br><span class="line">isShowActive:<span class="keyword">this</span>.isShowActive,</span><br><span class="line">isShowCompleted:<span class="keyword">this</span>.isShowCompleted</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">checkToggle(e) &#123;</span><br><span class="line"><span class="keyword">this</span>.todos.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">item.done = e.target.checked;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">onSave(e) &#123;</span><br><span class="line"><span class="keyword">this</span>.isEdit.title = e.target.value</span><br><span class="line"><span class="keyword">this</span>.isEdit = <span class="literal">null</span>;</span><br><span class="line">&#125;,</span><br><span class="line">showAll()&#123;</span><br><span class="line"><span class="keyword">this</span>.toggleArr=[];</span><br><span class="line"><span class="keyword">this</span>.todos.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.toggleArr.push(item);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.isShowAll=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>.isShowActive=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">this</span>.isShowCompleted=<span class="literal">false</span>;</span><br><span class="line">localStorage.setItem(<span class="string">'isShowPage'</span>,<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">isShowAll:<span class="keyword">this</span>.isShowAll,</span><br><span class="line">isShowActive:<span class="keyword">this</span>.isShowActive,</span><br><span class="line">isShowCompleted:<span class="keyword">this</span>.isShowCompleted</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">changed(index)&#123;</span><br><span class="line"><span class="comment">// console.log('被点了');</span></span><br><span class="line">localStorage.setItem(<span class="string">'todos'</span>,<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.todos));</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.isShowAll)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.toggleArr.splice(index,<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(index);</span><br><span class="line"><span class="comment">// localStorage.setItem('todos',JSON.stringify(this.todos));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=localStorage.getItem(<span class="string">'todos'</span>);</span><br><span class="line"><span class="keyword">var</span> page=localStorage.getItem(<span class="string">'isShowPage'</span>);</span><br><span class="line"><span class="keyword">if</span>(!str||!page)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">localStorage.setItem(<span class="string">'isShowPage'</span>,<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">isShowAll:<span class="keyword">this</span>.isShowAll,</span><br><span class="line">isShowActive:<span class="keyword">this</span>.isShowActive,</span><br><span class="line">isShowCompleted:<span class="keyword">this</span>.isShowCompleted</span><br><span class="line">&#125;));</span><br><span class="line">localStorage.setItem(<span class="string">'todos'</span>,<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.todos));</span><br><span class="line">str=localStorage.getItem(<span class="string">'todos'</span>);</span><br><span class="line">page=localStorage.getItem(<span class="string">'isShowPage'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.todos=<span class="built_in">JSON</span>.parse(str);</span><br><span class="line">page=<span class="built_in">JSON</span>.parse(page);</span><br><span class="line"><span class="keyword">this</span>.isShowAll=page.isShowAll;</span><br><span class="line"><span class="keyword">this</span>.isShowActive=page.isShowActive;</span><br><span class="line"><span class="keyword">this</span>.isShowCompleted=page.isShowCompleted;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.todos.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// this.toggleArr.push(item);</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.isShowAll)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.showAll();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.isShowActive)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.showActive();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.isShowCompleted)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.showCompleted();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>小知识：</p><p>对于表单元素改变的时候</p><p>1.对于checkbox来讲，当选中状态改变的时候，无论通过什么方式（DOM，vue）获取checkbox改变之后的状态都建议使用change事件</p><p>2.不要使用click点击事件，因为点击事件触发的时候，checkbox的切换状态可能还没有改变，所以通过click事件获取checkbox的checked状态可能存在误差</p></blockquote><blockquote><p>数组中常用的方法：</p><p>​    1.forEach方法（大多数情况下可以代替for循环）</p><p>​        eg:</p><p>​            arr.forEach((item,index)=&gt;{</p><p>​            })</p><p>​    2.some方法（判断数组中是否包含指定条件的元素）它会遍历数组，然后对每一项执行条件判断，只要有一个满足条件，停止遍历，返回true,如果到循环结束都没有满足条件的元素，返回false</p><p>​        eg:</p><p>​            arr.some((item,index)=&gt;{</p><p>​                return item.title=’睡觉’</p><p>​            })</p><p>​    3.every判断数组是元素是否全部满足某个条件</p><p>​        eg:</p><p>​            arr.every((item,index)=&gt;{</p><p>​                return item.done</p><p>​            })</p><p>​    4.filter从数组中根据某个条件过滤数据得到一个新的数组，注意：过滤结果还是一个数组</p><p>​        eg:</p><p>​            arr.filter((item,index)=&gt;{</p><p>​                return item.done</p><p>​            })</p><p>​    5.find根据条件查找某个元素，它会遍历找到第一个满足条件的元素，停止遍历，并立即返回</p><p>​        eg:</p><p>​            arr.find((item,index)=&gt;{</p><p>​                    return item.id=3</p><p>​            })</p><p>​    6.findIndex根据条件查找元素的索引</p><p>​        eg:</p><p>​            arr.findIndex((item,index)=&gt;{</p><p>​                return item.id=3</p><p>​            })        </p><p>​    7.includes判断数组是否包含指定元素，类似indexof，返回布尔值，一般用于数组中都是普通类型：字符串，数字</p><p>​    eg:</p><p>​            arr.includes(1);</p></blockquote><h2 id="编辑插件"><a href="#编辑插件" class="headerlink" title="编辑插件"></a>编辑插件</h2><ul><li>​    vscode:live-server</li><li>sublime:sublime server</li></ul><h2 id="与服务器通信"><a href="#与服务器通信" class="headerlink" title="与服务器通信"></a>与服务器通信</h2><ul><li>类似于jQuery中的ajax库（axios）</li></ul><h3 id="学习准备"><a href="#学习准备" class="headerlink" title="学习准备"></a>学习准备</h3><h4 id="JSON-server"><a href="#JSON-server" class="headerlink" title="JSON-server"></a>JSON-server</h4><ul><li><p>是一个提供测试环境接口的工具，可以帮我们快速生成一套接口服务，专门用于学习测试</p></li><li><p>使用步骤</p><blockquote><p>1.安装：<code>https://github.com/typicode/json-server</code></p><p>2.在cmd中输入<code>npm install -g json-server</code></p><p>3.测试是否安装成功：<code>son-server --version</code></p><p>4.创建一个目录json-server-demo,然后在该目录中创建一个文件叫db.json并写入以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"posts"</span>: [</span><br><span class="line"> &#123; <span class="attr">"id"</span>: <span class="number">1</span>, <span class="attr">"title"</span>: <span class="string">"json-server"</span>, <span class="attr">"author"</span>: <span class="string">"typicode"</span> &#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"comments"</span>: [</span><br><span class="line"> &#123; <span class="attr">"id"</span>: <span class="number">1</span>, <span class="attr">"body"</span>: <span class="string">"some comment"</span>, <span class="attr">"postId"</span>: <span class="number">1</span> &#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"profile"</span>: &#123; <span class="attr">"name"</span>: <span class="string">"typicode"</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.最后，进入db.json文件所属的目录，执行<code>json-server --watch db.json</code></p><p><img src="E:%5Cblack%5C%E5%B0%B1%E4%B8%9A%E7%8F%AD%5Cvue%5Cassets%5Csnipaste_20191107_173920.png" alt="snipaste_20191107_173920"></p></blockquote></li></ul><h3 id="接口说明"><a href="#接口说明" class="headerlink" title="接口说明"></a>接口说明</h3><ul><li><p>jsonServer会根据db.json文件中的内容生成一些接口</p><ul><li><p>获取用户列表</p><blockquote><p>请求方法：get</p><p>请求路径:/users</p><p>请求参数：</p><p>响应数据：用户列表</p></blockquote></li><li><p>查询指定用户列表</p><blockquote><p>请求方法：get</p><p>请求路径:/users?name=姓名&amp;gender=性别&amp;age=年龄</p><p>请求参数：</p><p>Query(查询字符串)参数：</p><p>​    name:姓名</p><p>​    age:年龄</p><p>​    gender:性别</p><p>响应数据：指定用户列表</p></blockquote></li><li><p>添加用户</p><blockquote><p>请求方法：post</p><p>请求路径:/users</p><p>请求参数：</p><p>​    {    </p><p>​        “name”:用户名称,</p><p>​        “age”:年龄,</p><p>​        “gender”:性别</p><p>​    }</p><p>响应数据：新增用户信息</p><p>注意：请求体数据必须是json格式字符串</p></blockquote></li><li><p>删除用户</p><blockquote><p>请求方法：DELETE</p><p>请求路径:/users/id</p><p>eg:<code>例如删除id为3的用户:http://localhost:3000/users/3</code></p><p>请求参数：</p><p>响应数据：{}</p></blockquote></li><li><p>修改用户：</p><blockquote><p>请求方法：PATCH</p><p>请求路径:/users/id</p><p>eg:<code>例如修改id为3的用户:http://localhost:3000/users/3</code></p><p>请求参数：</p><p>body请求体数据：</p><p>{</p><p>​    “name”:名称,</p><p>​    “age”:年龄,</p><p>​    “gender”:性别</p><p>}</p><p>注意：name,age,gender都是可选的，修改谁就传谁</p><p>响应数据：修改之后的用户的完整信息</p></blockquote></li></ul></li></ul><h3 id="axios介绍"><a href="#axios介绍" class="headerlink" title="axios介绍"></a>axios介绍</h3><ul><li><p>网址：<code>http://github.com/axios/axios</code></p></li><li><p>安装:<code>npm install axios</code></p></li><li><p>获取用户列表</p><blockquote><p>axios({</p><p>​    method:’GET’,</p><p>​    url:’<a href="http://localhost:3000/users&#39;" target="_blank" rel="noopener">http://localhost:3000/users&#39;</a>,</p><p>​    </p><p>}).then(res=&gt;{</p><p>​    res是响应对象</p><p>​    接口返回的数据在res.data中</p><p>​    config:本次请求配置信息对象，很少使用</p><p>​    data:真正响应结果数据</p><p>​    headers：响应头数据，很少使用</p><p>​    request:请求对象，几乎不使用</p><p>​    status:响应状态码</p><p>​    statusText:响应状态短语    </p><p>​    console.log(res.data);</p><p>})</p></blockquote></li><li><p>查询指定用户列表</p><blockquote><p>axios({</p><p>​    method:’GET’,</p><p>​    url:’<a href="http://localhost:3000/users?id=2&#39;,//查询id为2的用户,或者写在params" target="_blank" rel="noopener">http://localhost:3000/users?id=2&#39;,//查询id为2的用户,或者写在params</a></p><p>​    params:{    </p><p>​        id:2,</p><p>​        name:’张三’</p><p>​    },</p><p>​    </p><p>}).then(res=&gt;{</p><p>​    console.log(res);</p><p>})</p></blockquote></li><li><p>添加用户</p><blockquote><p>axios({</p><p>​    method:’post’,</p><p>​    url:’<a href="http://localhost:3000/users&#39;" target="_blank" rel="noopener">http://localhost:3000/users&#39;</a>,</p><p>​    data:{</p><p>​        name:’’,</p><p>​        age:’’,</p><p>​        gender:’’</p><p>​    }</p><p>}).then(res=&gt;{</p><p>​    if(res.status==201){</p><p>​        console.log(res.data);</p><p>​    }</p><p>})</p></blockquote></li><li><p>删除用户：</p><blockquote><p>axios({</p><p>​    method:’DELETE’,</p><p>​    url:’<a href="http://localhost:3000/users/1&#39;,//删除id为1的用户" target="_blank" rel="noopener">http://localhost:3000/users/1&#39;,//删除id为1的用户</a></p><p>​    </p><p>}).then(res=&gt;{</p><p>​    console.log(res);</p><p>})</p></blockquote></li><li><p>修改用户：</p><blockquote><p>axios({</p><p>​    method:’PATCH’,</p><p>​    url:’<a href="http://localhost:3000/users/2&#39;,//修改id为2的用户" target="_blank" rel="noopener">http://localhost:3000/users/2&#39;,//修改id为2的用户</a></p><p>​    data:{</p><p>​        name:’’,</p><p>​        age:’’,</p><p>​        gender:’’</p><p>​    }</p><p>}).then(res=&gt;{</p><p>​    console.log(res,data);</p><p>})</p></blockquote></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>配置基础路径</li></ul><blockquote><p>axios.defaults.baseURL=’<a href="http://localhost:3000&#39;" target="_blank" rel="noopener">http://localhost:3000&#39;</a></p></blockquote><h3 id="axios快捷写法"><a href="#axios快捷写法" class="headerlink" title="axios快捷写法"></a>axios快捷写法</h3><blockquote><p>​     axios.get(url[, config])</p><p>​        axios.get(‘<a href="http://localhost:3000/users&#39;" target="_blank" rel="noopener">http://localhost:3000/users&#39;</a></p><p>​            //可选的配置对象</p><p>​        ).then(res =&gt; {</p><p>​            console.log(res);</p><p>​        })</p><p>​        // axios.delete(url[, config])</p><p>​        // axios.head(url[, config])</p><p>​        // axios.options(url[, config])</p><p>​        // axios.post(url[, data[, config]])</p><p>​        // axios.put(url[, data[, config]])</p><p>​        // axios.patch(url[, data[, config]])</p></blockquote><h3 id="axios错误处理"><a href="#axios错误处理" class="headerlink" title="axios错误处理"></a>axios错误处理</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line"> method:<span class="string">'GET'</span>,</span><br><span class="line"> url:<span class="string">'http://localhost:3000/users'</span>,</span><br><span class="line"> </span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//成功执行then</span></span><br><span class="line"> <span class="comment">//在axios中，默认只有&gt;=200和&lt;400的状态码都认为成功</span></span><br><span class="line"> <span class="comment">//axios在这个请求失败之后不执行then里面的代码</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line"> <span class="comment">//失败执行catch</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="vue和axios结合"><a href="#vue和axios结合" class="headerlink" title="vue和axios结合"></a>vue和axios结合</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt; --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">           表单的submit事件：当表单中的submit或者button点击的时候，或者表单文本框中敲回车的时候都会触发submit事件</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">"onAdd"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'user.name'</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                       v-model支持一个修饰符：.number可以把绑定的数据自动转为数字类型</span></span><br><span class="line"><span class="comment">                    --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.number</span>=<span class="string">'user.age'</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">'男'</span> <span class="attr">v-model</span>=<span class="string">'user.gender'</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span>男</span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">'女'</span> <span class="attr">v-model</span>=<span class="string">'user.gender'</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span>女</span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"添加"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"user in users"</span> <span class="attr">:key</span>=<span class="string">"user.id"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.gender&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'onClick(user.id)'</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/axios/dist/axios.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       axios.defaults.baseURL = <span class="string">'http://127.0.0.1:3000'</span>;</span></span><br><span class="line"><span class="actionscript">       <span class="comment">// // 1.发送请求获取数据</span></span></span><br><span class="line"><span class="actionscript">       <span class="comment">// axios(&#123;</span></span></span><br><span class="line"><span class="actionscript">       <span class="comment">//     method: 'GET',</span></span></span><br><span class="line"><span class="actionscript">       <span class="comment">//     url: '/users',</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">       <span class="comment">// &#125;).then(res =&gt; &#123;//then方法中的回调函数，只有当请求成功的时候才会执行</span></span></span><br><span class="line"><span class="actionscript">       <span class="comment">//     // 2.将请求的数据赋值给vue来使用 （vue中的数据一定要提前初始化）</span></span></span><br><span class="line"><span class="actionscript">       <span class="comment">//     //  把vue实例中的users=res.data</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">       <span class="comment">//     app.users = res.data;</span></span></span><br><span class="line"><span class="actionscript">       <span class="comment">//     // 3.将数据绑定到模板中</span></span></span><br><span class="line"><span class="actionscript">       <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="actionscript">       <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el: <span class="string">'#app'</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line"><span class="actionscript">               message: <span class="string">'hello vue.js'</span>,</span></span><br><span class="line"><span class="actionscript">               <span class="comment">// 根据接口要求包括视图，抽象出需要绑定的数据字段</span></span></span><br><span class="line"><span class="actionscript">               <span class="comment">// 这里的名字也不要瞎起，因为这个数据要提交给后端接口</span></span></span><br><span class="line">               user: &#123;</span><br><span class="line"><span class="actionscript">                   name: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                   age: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                   gender: <span class="string">''</span></span></span><br><span class="line">               &#125;,</span><br><span class="line"><span class="actionscript">               users: []<span class="comment">//存储用户数据列表</span></span></span><br><span class="line">           &#125;,</span><br><span class="line">           methods: &#123;</span><br><span class="line">               onAdd() &#123;</span><br><span class="line"><span class="javascript">                   <span class="built_in">console</span>.log(<span class="number">23</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                   <span class="comment">// 1.获取表单数据</span></span></span><br><span class="line"><span class="actionscript">                   <span class="comment">// 1.1根据接口和视图抽象出数据放到初始化到data中</span></span></span><br><span class="line"><span class="actionscript">                   <span class="comment">// 建议表单相关的数据放到单独的数据对象中</span></span></span><br><span class="line"><span class="actionscript">                   <span class="comment">// 1.2然后使用v-model把数据分别绑定到对应的表单元素上</span></span></span><br><span class="line"><span class="actionscript">                   <span class="comment">// 1.3完了利用VueDevTools调试工具测试数据是否绑定OK</span></span></span><br><span class="line"><span class="actionscript">                   <span class="comment">// </span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                   <span class="comment">// 2.请求提交</span></span></span><br><span class="line"><span class="actionscript">                   <span class="comment">// json-server 默认提供了CORS跨域 后端跨域 前端不需要做任何处理</span></span></span><br><span class="line"><span class="actionscript">                   <span class="comment">// 在后端的CORS请求中，浏览器会先发出一个方法请求方法OPTIONS的预检请求</span></span></span><br><span class="line"><span class="actionscript">                   <span class="comment">// 整个过程都是自动的，不需要代码参与，浏览器默认行为</span></span></span><br><span class="line"></span><br><span class="line">                   axios(&#123;</span><br><span class="line"><span class="actionscript">                       method: <span class="string">'POST'</span>,</span></span><br><span class="line"><span class="actionscript">                       url: <span class="string">'/users'</span>,</span></span><br><span class="line"><span class="actionscript">                       data: <span class="keyword">this</span>.user,</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">                   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                       <span class="built_in">console</span>.log(res);</span></span><br><span class="line"><span class="actionscript">                       <span class="comment">// 添加成功 重新获取最新的用户数据列表</span></span></span><br><span class="line"><span class="actionscript">                       <span class="keyword">this</span>.loadUsers();</span></span><br><span class="line"><span class="javascript">                   &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                       <span class="built_in">window</span>.alert(<span class="string">'添加失败'</span> + err);</span></span><br><span class="line">                   &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                   <span class="comment">// 3.根据响应结果进行后续处理</span></span></span><br><span class="line">               &#125;,</span><br><span class="line">               loadUsers() &#123;</span><br><span class="line">                   axios(&#123;</span><br><span class="line"><span class="actionscript">                       method: <span class="string">'GET'</span>,</span></span><br><span class="line"><span class="actionscript">                       url: <span class="string">'/users'</span>,</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                       <span class="comment">// 注意：then方法中的函数务必使用箭头函数，否则里面的this指向有问题</span></span></span><br><span class="line"><span class="actionscript">                       <span class="comment">//tnen方法中的回调函数，只有当请求成功的时候才会执行</span></span></span><br><span class="line"><span class="actionscript">                       <span class="comment">// 2.将请求的数据赋值给vue来使用 （vue中的数据一定要提前初始化）</span></span></span><br><span class="line"><span class="actionscript">                       <span class="comment">//  把vue实例中的users=res.data</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                       <span class="keyword">this</span>.users = res.data;</span></span><br><span class="line"><span class="actionscript">                       <span class="comment">// 3.将数据绑定到模板中</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                       <span class="comment">// 不太建议在created中写大量的业务逻辑代码</span></span></span><br><span class="line"><span class="actionscript">                       <span class="comment">// 我们更推荐把这些功能封装成一个一个的函数放到methods中</span></span></span><br><span class="line">                   &#125;)</span><br><span class="line">               &#125;,</span><br><span class="line">               onClick(id)&#123;</span><br><span class="line"><span class="javascript">                   <span class="keyword">if</span>(!<span class="built_in">window</span>.confirm(<span class="string">'Are you sure?'</span>))</span></span><br><span class="line">                   &#123;</span><br><span class="line"><span class="actionscript">                       <span class="keyword">return</span></span></span><br><span class="line">                   &#125;</span><br><span class="line">                       axios(&#123;</span><br><span class="line"><span class="actionscript">                           method:<span class="string">'DELETE'</span>,</span></span><br><span class="line"><span class="actionscript">                           url:<span class="string">'/users/'</span>+id,<span class="comment">//建议所有字符串都使用es6模板字符串方式</span></span></span><br><span class="line">                           </span><br><span class="line"><span class="javascript">                       &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                           <span class="keyword">this</span>.loadUsers();</span></span><br><span class="line"><span class="javascript">                       &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                           <span class="built_in">window</span>.alert(<span class="string">'删除失败！'</span>);</span></span><br><span class="line">                       &#125;)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line"><span class="actionscript">           <span class="comment">// 实例选项：created</span></span></span><br><span class="line"><span class="actionscript">           <span class="comment">// 他是一个函数，他会在vue初始化完成以后自动调用</span></span></span><br><span class="line"><span class="actionscript">           <span class="comment">// 我们可以在它里面访问this,获取vue实例</span></span></span><br><span class="line"><span class="actionscript">           <span class="comment">// 常见的场景就是：在页面加载好以后请求获取数据列表</span></span></span><br><span class="line">           created() &#123;</span><br><span class="line"><span class="actionscript">               <span class="comment">// // 1.发送请求获取数据</span></span></span><br><span class="line"><span class="actionscript">               <span class="comment">// axios(&#123;</span></span></span><br><span class="line"><span class="actionscript">               <span class="comment">//     method: 'GET',</span></span></span><br><span class="line"><span class="actionscript">               <span class="comment">//     url: '/users',</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">               <span class="comment">// &#125;).then(res =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">               <span class="comment">//     // 注意：then方法中的函数务必使用箭头函数，否则里面的this指向有问题</span></span></span><br><span class="line"><span class="actionscript">               <span class="comment">//     //tnen方法中的回调函数，只有当请求成功的时候才会执行</span></span></span><br><span class="line"><span class="actionscript">               <span class="comment">//     // 2.将请求的数据赋值给vue来使用 （vue中的数据一定要提前初始化）</span></span></span><br><span class="line"><span class="actionscript">               <span class="comment">//     //  把vue实例中的users=res.data</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">               <span class="comment">//     this.users = res.data;</span></span></span><br><span class="line"><span class="actionscript">               <span class="comment">//     // 3.将数据绑定到模板中</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">               <span class="comment">//     // 不太建议在created中写大量的业务逻辑代码</span></span></span><br><span class="line"><span class="actionscript">               <span class="comment">//     // 我们更推荐把这些功能封装成一个一个的函数放到methods中</span></span></span><br><span class="line"><span class="actionscript">               <span class="comment">// &#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">               <span class="comment">// 方法也可以直接通过vue实例进行调用</span></span></span><br><span class="line"><span class="actionscript">               <span class="keyword">this</span>.loadUsers();</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>##　组件基础</p><ul><li><p>引入组件的原因：为了避免更多的冗余标签及逻辑等</p></li><li><p>一个标签<code>&lt;span-btn&gt;</code>代表一个组件，写一个标签相当于一个组件的实例</p></li><li><p>注册一个全局组件（要写在vue实例对象之前）<code>Vue.component(组件名称，组件对象)</code></p><ul><li>组件名称一般采用abc 单词或abc-d双词（全小写）进行定义</li></ul></li><li><p>页面结构template<code>有且只有一个根节点</code></p></li><li><p>data是一个带返回值的函数（因为组件和组件之间要保存独立的数据）</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">span-btn</span>&gt;</span><span class="tag">&lt;/<span class="name">span-btn</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">span-btn</span>&gt;</span><span class="tag">&lt;/<span class="name">span-btn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       Vue.component(<span class="string">'span-btn'</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">           template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">           </span><br><span class="line"><span class="handlebars"><span class="xml">               <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;count&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">               <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'changeCount'</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">           data()&#123;</span><br><span class="line"><span class="actionscript">               <span class="keyword">return</span> &#123;</span></span><br><span class="line">                   count:0,</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           methods:&#123;</span><br><span class="line">               changeCount()&#123;</span><br><span class="line"><span class="actionscript">                   <span class="keyword">this</span>.count++;</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line"><span class="actionscript">       <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el:<span class="string">'#app'</span>,</span></span><br><span class="line">       &#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><ul><li>只要你实例化一个vue对象，就自动注册了这个全局组件（拥有）</li><li>注意：<strong>全局组件要写在所有vue实例对象的最前面</strong></li><li><code>Vue.component(组件名称,组件对象)</code></li></ul><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><ul><li><p>在哪个实例对象上注册组件，就对哪个实例对象起作用</p></li><li><p><code>components:{组件名称：组件对象}</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span-btn</span>&gt;</span><span class="tag">&lt;/<span class="name">span-btn</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span-btn</span>&gt;</span><span class="tag">&lt;/<span class="name">span-btn</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是vue实例2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span-btn</span>&gt;</span><span class="tag">&lt;/<span class="name">span-btn</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span-btn</span>&gt;</span><span class="tag">&lt;/<span class="name">span-btn</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">          el: <span class="string">'#app1'</span>,</span></span><br><span class="line">          components:&#123;</span><br><span class="line"><span class="actionscript">              <span class="string">"span-btn"</span>:&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                  template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>我试一下<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">     </span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">          el: <span class="string">'#app'</span>,</span></span><br><span class="line">      &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="组件总结"><a href="#组件总结" class="headerlink" title="组件总结"></a>组件总结</h2><ul><li>特点：<ul><li>组件是一个特殊的Vue实例</li><li>没有el实例选项，有template属性</li><li>组件和vue实例对象的区别是组件中的data是带有返回值的函数</li><li>template代表页面的结构（有且只有一个根节点）</li><li>组件之间是独立的</li></ul></li><li>局部组件和全局组件之间区别：注册位置不同，应用范围不同</li></ul><h2 id="组件嵌套"><a href="#组件嵌套" class="headerlink" title="组件嵌套"></a>组件嵌套</h2><ul><li>一旦形成组件嵌套，就有了父子关系</li><li>在组件中使用了其他组件的标签，就会产生组件嵌套</li><li>组件嵌套形式<ul><li>下面展示的是组件和组件之间的纯嵌套</li><li>Vue实例对象与组件之间的嵌套（就是在视图中直接写组件标签）</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是vue实例2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span-btn</span>&gt;</span><span class="tag">&lt;/<span class="name">span-btn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span-btn</span>&gt;</span><span class="tag">&lt;/<span class="name">span-btn</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"span-btn"</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:`<span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span></span><br><span class="line">        我是你爸爸</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">span-child</span>&gt;</span><span class="tag">&lt;/<span class="name">span-child</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span>`,</span></span></span><br><span class="line">        components:&#123;</span><br><span class="line"><span class="actionscript">            <span class="string">"child"</span>:&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                template:`<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span>我是直系亲属<span class="tag">&lt;/<span class="name">p</span>&gt;</span>`</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'span-child'</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:`<span class="tag">&lt;<span class="name">p</span>&gt;</span>我是你儿子<span class="tag">&lt;/<span class="name">p</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app1'</span>,</span></span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件通信的几种情况"><a href="#组件通信的几种情况" class="headerlink" title="组件通信的几种情况"></a>组件通信的几种情况</h2><ul><li>父组件=&gt;子组件<code>通过props</code></li><li>子组件=&gt;父组件</li><li>兄弟组件=&gt;兄弟组件</li></ul><h2 id="父组件给子组件传值Props"><a href="#父组件给子组件传值Props" class="headerlink" title="父组件给子组件传值Props"></a>父组件给子组件传值Props</h2><ul><li>给谁传值就在谁身上定义属性（Vue自定义属性），属性值为要<code>传递</code>的数据的名字</li><li>在子组件内部<code>接收</code>属性，通过props，其值为数组（字符串数组）</li><li>子组件中使用该数据，名字也为props中的写字符串数组的名字</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Vue实例对象与子组件进行嵌套1--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foods</span> <span class="attr">:foodlist</span>=<span class="string">'list'</span>&gt;</span><span class="tag">&lt;/<span class="name">foods</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app1'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                list:[<span class="string">'红烧肉'</span>,<span class="string">'糖醋里脊'</span>,<span class="string">'四喜丸子'</span>],</span></span><br><span class="line">            &#125;,</span><br><span class="line">            components:&#123;</span><br><span class="line"><span class="actionscript">                <span class="string">'foods'</span>:&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                    template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>我是饭</span><span class="template-variable">&#123;&#123;foodlist&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="actionscript">                    props:[<span class="string">'foodlist'</span>],</span></span><br><span class="line">                    methods:&#123;</span><br><span class="line">                        fnc()&#123;</span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="keyword">this</span>.foodlist);<span class="comment">//this指向是当前的组件对象，可以直接访问内部的data数据，或者props传过来的值，与Vue实例对象内部的this一样</span></span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Vue实例对象与子组件之间进行传递值2--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">:cities</span>=<span class="string">"citylist"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app1'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                citylist:[<span class="string">'上海'</span>,<span class="string">'北京'</span>,<span class="string">'天津'</span>,<span class="string">'重庆'</span>],</span></span><br><span class="line">            &#125;,</span><br><span class="line">            components:&#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"child"</span>:&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                    template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">                        我去过的城市有：</span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"city in cities"</span>&gt;</span></span><span class="template-variable">&#123;&#123;city&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="actionscript">                    props:[<span class="string">'cities'</span>],</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--组件与组件之间嵌套时，进行父传子--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;foods :foodlist='list'&gt;&lt;/foods&gt;   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">father</span>&gt;</span><span class="tag">&lt;/<span class="name">father</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'father'</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">                我是父亲</span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">child</span> <span class="attr">:num</span>=<span class="string">"count"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">            data()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line">                    count:0,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            components:&#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"child"</span>:&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                    template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">                        我是儿子</span><br><span class="line"><span class="handlebars"><span class="xml">                        </span><span class="template-variable">&#123;&#123;num&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="actionscript">                    props:[<span class="string">'num'</span>]</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app1'</span>,</span></span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h2><ul><li>单页面应用程序：<ul><li>多个模块访问一个一个网页</li><li>一次向服务器获取资源</li></ul></li><li>优点：<ul><li>减缓网络延迟</li><li>完全组件化开发</li></ul></li><li>缺点：<ul><li>首屏加载慢–&gt;<code>按需加载</code>不刷新页面，只请求js模块</li><li>不利于SEO-服务端渲染</li><li>开发难度略高</li></ul></li></ul><h3 id="SPA原理"><a href="#SPA原理" class="headerlink" title="SPA原理"></a>SPA原理</h3><ul><li>实现在前端自由切换的模块–事件监听onhashchange进行实现自由切换</li><li>对当前的模块由记忆功能–页面刷新锚点之前点击的锚点还存在，只需要通过锚点获取响应的内容</li><li>不引起页面刷新—锚点不会引起页面刷新</li><li>解决：<ul><li>解决页面不刷新以及模块之间进行切换<ul><li>前端路由–通过hash值获取当前锚点（模块）</li><li>通过事件监听hash改变<code>onhashchange</code></li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--js实现路由的实现过程--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#bj"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#sh"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#sz"</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#gz"</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> fnc= <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> path = <span class="built_in">window</span>.location.hash.substr(<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">switch</span> (path) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">'bj'</span>:</span></span><br><span class="line"><span class="actionscript">                    dom.innerHTML = <span class="string">'北京'</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">'sh'</span>:</span></span><br><span class="line"><span class="actionscript">                    dom.innerHTML = <span class="string">'上海'</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">'sz'</span>:</span></span><br><span class="line"><span class="actionscript">                    dom.innerHTML = <span class="string">'深圳'</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">'gz'</span>:</span></span><br><span class="line"><span class="actionscript">                    dom.innerHTML = <span class="string">'广州'</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">default</span>:</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        fnc();</span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onhashchange =fnc;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="VueRouter路由"><a href="#VueRouter路由" class="headerlink" title="VueRouter路由"></a>VueRouter路由</h2><ul><li><p>需要下载vue-router插件</p></li><li><p>通过to属性实现不同模块之间的跳转</p></li><li><p>步骤</p><ul><li>引入vue-router.js文件</li><li>定义导航<code>&lt;router-link&gt;</code>可以不设置</li><li>第一容器<code>&lt;router-view&gt;</code>必须有</li><li>实例化VueRouter</li><li>配置路由表，一个地址对应一个组件（模块）</li><li>挂载路由</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/main'</span>&gt;</span>主食<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/meat'</span>&gt;</span>肉食<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/soup'</span>&gt;</span>汤<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> router=<span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">        routes:[</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">                path:<span class="string">'/main'</span>,</span></span><br><span class="line">                component:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                    template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>吃什么吃，啥也没有<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">                path:<span class="string">'/meat'</span>,</span></span><br><span class="line">                component:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                    template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>塞牙缝<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">                path:<span class="string">'/soup'</span>,</span></span><br><span class="line">                component:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                    template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>喝西北风<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        router</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><ul><li>动态路由传参</li><li>获取参数<code>$route.params</code>=&gt;获取所有动态路由参数的集合</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/foods/主食'</span>&gt;</span>主食<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/foods/肉食'</span>&gt;</span>肉食<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/foods/汤'</span>&gt;</span>汤<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">     <span class="keyword">var</span> router=<span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">         routes:[</span><br><span class="line">             &#123;</span><br><span class="line"><span class="actionscript">                 path:<span class="string">'/foods/:foodname'</span>,</span></span><br><span class="line">                 component:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                     template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>吃什么吃，啥也没有</span><span class="template-variable">&#123;&#123;$route.params.foodname&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         ]</span><br><span class="line">     &#125;)</span><br><span class="line"><span class="actionscript">     <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">         el:<span class="string">'#app'</span>,</span></span><br><span class="line">         router</span><br><span class="line">     &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="VueRouter中to的其他赋值方式"><a href="#VueRouter中to的其他赋值方式" class="headerlink" title="VueRouter中to的其他赋值方式"></a>VueRouter中to的其他赋值方式</h2><ul><li><p>字符串</p></li><li><p>变量</p></li><li><p>对象</p></li><li><p>对象name形式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/bj'</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/sh'</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 变量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">'shStr'</span>&gt;</span>上海(变量)<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">'&#123;path:"/sh"&#125;'</span>&gt;</span>上海（对象）<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对象name形式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">'&#123;name:"sd"&#125;'</span>&gt;</span>上海（对象name形式）<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/sz'</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/gz'</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">            routes: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    path: <span class="string">'/bj'</span>,</span></span><br><span class="line">                    component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    name:<span class="string">'sd'</span>,</span></span><br><span class="line"><span class="actionscript">                    path: <span class="string">'/sh'</span>,</span></span><br><span class="line">                    component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    path: <span class="string">'/sz'</span>,</span></span><br><span class="line">                    component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="actionscript">                    path: <span class="string">'/gz'</span>,</span></span><br><span class="line">                    component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                shStr:<span class="string">'/sh'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            router</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--传递参数的to的不同赋值形式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/bj/首都'</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/sh/是吗'</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 变量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">'shStr'</span>&gt;</span>上海(变量)<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">'&#123;path:"/sh/是吗3"&#125;'</span>&gt;</span>上海（对象）<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对象name形式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">'&#123;name:"sd",params:&#123;ab:"我是"&#125;&#125;'</span>&gt;</span>上海（对象name形式）<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/sz'</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/gz'</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">            routes: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    path: <span class="string">'/bj/:abc'</span>,</span></span><br><span class="line">                    component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>北京</span><span class="template-variable">&#123;&#123;$route.params.abc&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    name:<span class="string">'sd'</span>,</span></span><br><span class="line"><span class="actionscript">                    path: <span class="string">'/sh/:ab'</span>,</span></span><br><span class="line">                    component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>上海</span><span class="template-variable">&#123;&#123;$route.params.ab&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    path: <span class="string">'/sz'</span>,</span></span><br><span class="line">                    component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="actionscript">                    path: <span class="string">'/gz'</span>,</span></span><br><span class="line">                    component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                shStr:<span class="string">'/sh/是吗1'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            router</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><ul><li><p>拦截谁就在谁的路由上写<code>redirect</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/bj/首都'</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/sh/是吗'</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/sz'</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/gz'</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">          routes: [</span><br><span class="line">              &#123;</span><br><span class="line"><span class="actionscript">                  path: <span class="string">'/bj/:abc'</span>,</span></span><br><span class="line">                  component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>北京</span><span class="template-variable">&#123;&#123;$route.params.abc&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'sd'</span>,</span></span><br><span class="line"><span class="actionscript">                  path: <span class="string">'/sh/:ab'</span>,</span></span><br><span class="line">                  component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>上海</span><span class="template-variable">&#123;&#123;$route.params.ab&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">                     </span><br><span class="line">                  &#125;,</span><br><span class="line"><span class="actionscript">                  redirect:<span class="string">'/bj/abc'</span></span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line"><span class="actionscript">                  path: <span class="string">'/sz'</span>,</span></span><br><span class="line">                  component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line"><span class="actionscript">                  path: <span class="string">'/gz'</span>,</span></span><br><span class="line">                  component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          ]</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">          el: <span class="string">'#app'</span>,</span></span><br><span class="line">        </span><br><span class="line">          router</span><br><span class="line">      &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><ul><li><p>实现跳转</p><ul><li>a标签</li><li>window.location.href</li><li>采用代码行为进行跳转<ul><li>$.router.push() 推进一条记录，点击返回回到上次的地址</li><li>$.router.replace()替换当前记录，不能返回，替换记录</li><li>$.router.go()为正值前进，为负值后退</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">       <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       <span class="comment">// 1. 实例化一个导航路由</span></span></span><br><span class="line"><span class="actionscript">       <span class="comment">// 2. 导航为 A, B, C, D</span></span></span><br><span class="line"><span class="actionscript">       <span class="comment">// 3. 实现A =&gt; B, B =&gt; C, 然后从C返回时, 直接回到A</span></span></span><br><span class="line"><span class="actionscript">       <span class="comment">// 4. 实现A =&gt; B, B =&gt; C, C =&gt; D 从D返回时 不能返回</span></span></span><br><span class="line"><span class="actionscript">       <span class="comment">// 5. 实现A =&gt; B, B =&gt; C, C =&gt; D 从D返回直接返回到A 在A中直接前进到D</span></span></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">           routes: [</span><br><span class="line">               &#123;</span><br><span class="line"><span class="actionscript">                   path: <span class="string">'/'</span>,</span></span><br><span class="line"><span class="actionscript">                   redirect: <span class="string">'/A'</span></span></span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line"><span class="actionscript">                   path: <span class="string">'/A'</span>,</span></span><br><span class="line">                   component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                       template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>我是A，我要去B<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'goB'</span>&gt;</span>去B<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">                       methods: &#123;</span><br><span class="line">                           goB() &#123;</span><br><span class="line"><span class="actionscript">                               <span class="keyword">this</span>.$router.push(<span class="string">'/B'</span>);</span></span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;,</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line"><span class="actionscript">                   path: <span class="string">'/B'</span>,</span></span><br><span class="line">                   component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                       template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>我是B，我要去C<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'goC'</span>&gt;</span>去C<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">                       methods: &#123;</span><br><span class="line">                           goC() &#123;</span><br><span class="line"><span class="actionscript">                               <span class="keyword">this</span>.$router.replace(<span class="string">'/C'</span>);</span></span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;,</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line"><span class="actionscript">                   path: <span class="string">'/C'</span>,</span></span><br><span class="line">                   component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                       template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>我是C，我要去D<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'goD'</span>&gt;</span>去D<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">                       methods: &#123;</span><br><span class="line">                           goD() &#123;</span><br><span class="line"><span class="actionscript">                               <span class="keyword">this</span>.$router.replace(<span class="string">'/D'</span>);</span></span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;,</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line"><span class="actionscript">                   path: <span class="string">'/D'</span>,</span></span><br><span class="line">                   component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                       template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>我是D，我要去A<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'goA'</span>&gt;</span>去A<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">                       methods: &#123;</span><br><span class="line">                           goA() &#123;</span><br><span class="line"><span class="actionscript">                               <span class="comment">// this.$router.push('/cy');</span></span></span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;,</span><br><span class="line">               &#125;,</span><br><span class="line">              </span><br><span class="line">           ]</span><br><span class="line">       &#125;)</span><br><span class="line"><span class="actionscript">       <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el: <span class="string">'#app'</span>,</span></span><br><span class="line">           router</span><br><span class="line">       &#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="激活路由样式"><a href="#激活路由样式" class="headerlink" title="激活路由样式"></a>激活路由样式</h2><ul><li><p>当前选中的模块会有一个class类名<code>class=&quot;router-link-exact-active router-link-active&quot;</code></p></li><li><p>所以可以通过设置当前拥有类名的标签，产生一定的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">       <span class="selector-class">.router-link-active</span>&#123;</span></span><br><span class="line">           color: red;</span><br><span class="line">           font-size: 40px;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2><ul><li>二级路由设置通过children属性进行设置，属性值也是一个数组，和routes一样</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/hot'</span>&gt;</span>热点<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/edu'</span>&gt;</span>教育<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/soc'</span>&gt;</span>社会<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/music'</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./libs/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> router=<span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">           routes:[</span><br><span class="line">               &#123;</span><br><span class="line"><span class="actionscript">                   path:<span class="string">'/'</span>,</span></span><br><span class="line"><span class="actionscript">                   redirect:<span class="string">'/hot'</span></span></span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line"><span class="actionscript">                   path:<span class="string">'/hot'</span>,</span></span><br><span class="line">                   component:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                       template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>热点<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line"><span class="actionscript">                   path:<span class="string">'/edu'</span>,</span></span><br><span class="line">                   component:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                       template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>教育<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line"><span class="actionscript">                   path:<span class="string">'/soc'</span>,</span></span><br><span class="line">                   component:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                       template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>社会<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line"><span class="actionscript">                   path:<span class="string">'/music'</span>,</span></span><br><span class="line">                   children:[</span><br><span class="line">                       &#123;</span><br><span class="line"><span class="actionscript">                           path:<span class="string">''</span>,</span></span><br><span class="line">                           component:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                               template:`<span class="tag">&lt;<span class="name">p</span>&gt;</span>我是默认的二级路由内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span>`</span></span></span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;,</span><br><span class="line">                       &#123;</span><br><span class="line"><span class="actionscript">                           path:<span class="string">'/music/pop'</span>,</span></span><br><span class="line">                           component:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                               template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>流行音乐<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;,</span><br><span class="line">                       &#123;</span><br><span class="line"><span class="actionscript">                           path:<span class="string">'/music/class'</span>,</span></span><br><span class="line">                           component:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                               template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>古典音乐<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;,</span><br><span class="line">                       &#123;</span><br><span class="line"><span class="actionscript">                           path:<span class="string">'/music/jazz'</span>,</span></span><br><span class="line">                           component:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                               template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>爵士音乐<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   ],</span><br><span class="line">                   component:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                       template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>音乐</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                           <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/music/pop"</span>&gt;</span>流行音乐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                           <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/music/class"</span>&gt;</span>古典音乐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                           <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/music/jazz"</span>&gt;</span>爵士音乐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                           <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                       <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           ]</span><br><span class="line">       &#125;)</span><br><span class="line"><span class="actionscript">       <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el:<span class="string">'#app'</span>,</span></span><br><span class="line">           router</span><br><span class="line">       &#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生命周期–钩子函数"><a href="#生命周期–钩子函数" class="headerlink" title="生命周期–钩子函数"></a>生命周期–钩子函数</h2><blockquote><p>分为四个阶段：（8个钩子函数）</p><p>​    ❀实例化Vue对象前后：实例化对象之前的beforeCreate也是摆设</p><p>​        beforeCreate:对象实例化之前，一般不做处理</p><p>​        created:对象实例化完成后：一般用于数据查询（接口调用，获取数据），但是此阶段斌没有完成页面渲染</p><p>​    ❀页面渲染完成前后</p><p>​        beforeMount:页面渲染之前，加载数据，查询数据，但是这里依然没有完成页面渲染</p><p>​        mounted:页面渲染完成后，加载数据，页面渲染完成，可以$refs来获取dom对象，可以把查询到的数据更新到页面上</p><p>​    ❀数据更新前后：摆设，因为有更好的watch侦听，这个在不同的数据之间没啥区别</p><p>​        beforeUpdate:数据更新前</p><p>​        updated:数据更新后</p><p>​    ❀实例销毁前后：实例销毁后destroyed是摆设</p><p>​        beforeDestroy:实例销毁前（将之前定义定时器销毁，因为当某个组件退出江湖之后，操作他的定时器还存在的话，会报错）</p><p>​        destroyed：实例销毁后</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue&quot;&gt;&lt;a href=&quot;#Vue&quot; class=&quot;headerlink&quot; title=&quot;Vue&quot;&gt;&lt;/a&gt;Vue&lt;/h1&gt;&lt;h2 id=&quot;Vue介绍&quot;&gt;&lt;a href=&quot;#Vue介绍&quot; class=&quot;headerlink&quot; title=&quot;Vue介绍&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>1.Vue基础</title>
    <link href="http://yoursite.com/2019/12/04/Vue%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/12/04/Vue%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-12-04T13:47:57.000Z</published>
    <updated>2019-12-07T09:05:51.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><h4 id="1-兼容性-注意"><a href="#1-兼容性-注意" class="headerlink" title="(1) 兼容性 : (注意!!)"></a>(1) 兼容性 : (注意!!)</h4><p>Vue 不支持IE8 及以下版本,因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有<a href="https://caniuse.com/#feat=es5" target="_blank" rel="noopener">兼容 ECMAScript 5 的浏览器</a>。</p><h4 id="2-Vue-Devtools-浏览器插件"><a href="#2-Vue-Devtools-浏览器插件" class="headerlink" title="(2) Vue Devtools : (浏览器插件)"></a>(2) Vue Devtools : (浏览器插件)</h4><p>审查和调试Vue 的一个插件  安装插件需要进入Chrome商店进行下载 点击此处<a href="[https://fangshiqian.github.io/my-blog/2018/11/30/%E8%B0%B7%E6%AD%8C%E6%8F%92%E4%BB%B6/](https://fangshiqian.github.io/my-blog/2018/11/30/谷歌插件/)">谷歌插件(可以访问谷歌商店)</a>进行下载该插件</p><h3 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2. 介绍"></a>2. 介绍</h3><h4 id="1-Vue-js-是什么"><a href="#1-Vue-js-是什么" class="headerlink" title="(1) Vue.js 是什么?"></a>(1) Vue.js 是什么?</h4><blockquote><p>​    Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。(这段话引自于官网<a href="https://cn.vuejs.org/v2/guide/index.html#Vue-js-是什么" target="_blank" rel="noopener">Vue.js 是什么</a>)</p></blockquote><p>简单理解:</p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3Vue" alt=""></p><h4 id="2-安装"><a href="#2-安装" class="headerlink" title="(2) 安装"></a>(2) 安装</h4><ul><li>直接下载<ul><li>开发版本：<a href="https://cn.vuejs.org/js/vue.js" target="_blank" rel="noopener">https://cn.vuejs.org/js/vue.js</a></li><li>生产版本：<a href="https://cn.vuejs.org/js/vue.min.js" target="_blank" rel="noopener">https://cn.vuejs.org/js/vue.min.js</a></li></ul></li><li>CDN<ul><li><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;</code> 最新稳定版</li><li><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js&quot;&gt;&lt;/script&gt;</code> 指定版本</li></ul></li><li>使用 <code>npm</code> 下载<ul><li><code>npm install vue</code> 最新稳定版</li><li><code>npm install vue@版本号</code> 指定版本</li></ul></li></ul><h4 id="3-使用举例"><a href="#3-使用举例" class="headerlink" title="(3) 使用举例"></a>(3) 使用举例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;masges&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123;user.age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：&#123;&#123;user.gender === 0 ? '男':'女'&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'itme in biaoqian'</span>&gt;</span>&#123;&#123;itme&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. 安装vue.js</span></span><br><span class="line"><span class="comment">        2. 创建vue </span></span><br><span class="line"><span class="comment">        3. 根据视图抽象 data 里面的数据</span></span><br><span class="line"><span class="comment">        4. 使用 vue 语法把数据绑定到视图中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 告诉 vue管理视图的入口</span></span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 可以理解为data中的数据渲染到视图里面</span></span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                masges:<span class="string">'hello vue.js'</span>,</span></span><br><span class="line">                user:&#123;</span><br><span class="line"><span class="actionscript">                    name: <span class="string">'里斯'</span>,</span></span><br><span class="line">                    age: 19,</span><br><span class="line">                    gender: 0</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                biaoqian:[<span class="string">'吃饭'</span>,<span class="string">'睡觉'</span>,<span class="string">'打豆豆S'</span>]</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-Vue-实例-多看"><a href="#3-Vue-实例-多看" class="headerlink" title="3. Vue 实例 (多看)"></a>3. Vue 实例 (多看)</h3><blockquote><p>​    每个Vue应用都是通过用Vue函数创建一个新的Vue 实例开始的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当创建一个Vue实例时,你可以传入一个<strong>选项对象</strong>下面的就是使用这个选项创建想要的<strong>行为</strong></p><p>例如:</p><ul><li>el</li><li>data(这里的数据会放到视图里面)</li><li>methods(方法)</li><li>watch()</li><li>computed()</li><li>. . . </li></ul><h4 id="1-实例选项-el"><a href="#1-实例选项-el" class="headerlink" title="(1) 实例选项 - el"></a>(1) 实例选项 - el</h4><ul><li>不能是html、body节点</li><li>el只能作用到单一节点上</li></ul><h4 id="2-实例选项-data"><a href="#2-实例选项-data" class="headerlink" title="(2) 实例选项 - data"></a>(2) 实例选项 - data</h4><p>官方一点说: data不是普通数据,这种数据我们称之为<strong>响应式</strong>数据,用来驱动视图更新的数据</p><p>自己理解: data里面的数据就是渲染到视图(html)上的数据</p><p>注意:</p><ul><li>模板中访问的数据,必须初始化到data中</li><li>模板无法访问Vue实例之外的数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 告诉 Vue 管理视图的入口</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 这个 data 就好比之前使用 art-template 模板引擎的数据一样的</span></span><br><span class="line"><span class="comment">       * 我们可以直接在被 Vue 管理的视图中使用 data 中的数据绑定</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        message: <span class="string">'Hello Vue.js!'</span>,</span><br><span class="line">        user: &#123;</span><br><span class="line">          name: <span class="string">'张三'</span>,</span><br><span class="line">          age: <span class="number">18</span>,</span><br><span class="line">          gender: <span class="number">0</span> <span class="comment">// 0 男，1 女</span></span><br><span class="line">        &#125;,</span><br><span class="line">        todos: [<span class="string">'吃饭'</span>, <span class="string">'睡觉'</span>, <span class="string">'打豆豆'</span>],</span><br><span class="line">        count: <span class="string">''</span>,</span><br><span class="line">        num: <span class="number">0</span>, <span class="comment">// 数字</span></span><br><span class="line">        str: <span class="string">''</span>, <span class="comment">// 字符串</span></span><br><span class="line">        isSeen: <span class="literal">false</span>, <span class="comment">// 布尔值</span></span><br><span class="line">        arr: [], <span class="comment">// 空数组</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对于对象的修改</span></span><br><span class="line"><span class="comment">         * 1. 没有初始化的对象成员如果修改不会更新视图</span></span><br><span class="line"><span class="comment">         * 2. 也有方式可以动态添加未初始化的数据成员并且能更新视图（后面说）</span></span><br><span class="line"><span class="comment">         * 3. 直接对对象进行重新赋值可以实现视图更新</span></span><br><span class="line"><span class="comment">         *   xxx = 新的数据对象，例如 app.obj = &#123; a: 123 &#125;</span></span><br><span class="line"><span class="comment">         * 建议：最好把所有需要的数据都初始化到 data 中来</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        obj: &#123;</span><br><span class="line">          <span class="comment">// a: 0</span></span><br><span class="line">        &#125; <span class="comment">// 对象，没有初始化的对象成员如果修改不会更新视图</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="4-模板语法-多看"><a href="#4-模板语法-多看" class="headerlink" title="4. 模板语法(多看)"></a>4. 模板语法(多看)</h3><blockquote><p>​    官方: Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。</p></blockquote><h4 id="1-插值"><a href="#1-插值" class="headerlink" title="(1) 插值"></a>(1) 插值</h4><p>a: 文本</p><p> 数据绑定最常见的形式就是使用”Mustache”语法(双大括号)的文本插值</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b: JavaScript表达式</p><p> <code>双大括号</code> 中可以有一些简单的JavaScript逻辑运算:</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; number + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; number + 1 &gt; 10 ? 'number大于10' : 'number小于10' &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; arr &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message.split('').reverse().join('') &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c:  属性</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:title</span>=<span class="string">"message"</span>&gt;</span>花括号不能使用在属性中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 可以简写</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">"message"</span>&gt;</span>花括号不能使用在属性中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 后面可以作为动态属性使用</p><p> 属性只中的写法和文本插值中的写法一致，也可以写简单的 JavaScript 运算表达式：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">"message.split('').reverse().join('')"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">"1 + 1"</span>&gt;</span>属性中的表达式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">"number + 1 &gt; 10 ? 'number大于10' : 'number小于10'"</span>&gt;</span>属性中的表达式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>双大括号</code>怎么写，那么 <code>v-bind</code> 属性绑定也怎么写</p><p>d:  原始 HTML 字符串</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; htmlStr &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 v-html 指令渲染 html 标签内容字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"htmlStr"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>v-html 中绑定的 html 内容数据不能使用数据绑定</p><h3 id="5-计算属性和侦听器"><a href="#5-计算属性和侦听器" class="headerlink" title="5. 计算属性和侦听器"></a>5. 计算属性和侦听器</h3><h3 id="6-Class-与-Style-绑定"><a href="#6-Class-与-Style-绑定" class="headerlink" title="6. Class 与 Style 绑定"></a>6. Class 与 Style 绑定</h3><h3 id="7-条件渲染"><a href="#7-条件渲染" class="headerlink" title="7. 条件渲染"></a>7. 条件渲染</h3><h3 id="8-列表渲染"><a href="#8-列表渲染" class="headerlink" title="8. 列表渲染"></a>8. 列表渲染</h3><h4 id="1-遍历数组"><a href="#1-遍历数组" class="headerlink" title="(1) 遍历数组"></a>(1) 遍历数组</h4><p>html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"v-for-object"</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in object"</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: '#v-for-object',</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      title: 'How to do lists in Vue',</span><br><span class="line">      author: 'Jane Doe',</span><br><span class="line">      publishedAt: '2016-04-10'</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E5%81%9A%E5%AE%A3%E4%BC%A05w7e" alt=""></p><h3 id="9-事件处理"><a href="#9-事件处理" class="headerlink" title="9. 事件处理"></a>9. 事件处理</h3><h3 id="10-表单输入绑定"><a href="#10-表单输入绑定" class="headerlink" title="10. 表单输入绑定"></a>10. 表单输入绑定</h3><h3 id="11-组件基础"><a href="#11-组件基础" class="headerlink" title="11. 组件基础"></a>11. 组件基础</h3><h2 id="深入了解组件"><a href="#深入了解组件" class="headerlink" title="深入了解组件"></a>深入了解组件</h2><h3 id="1-组件注册"><a href="#1-组件注册" class="headerlink" title="1. 组件注册"></a>1. 组件注册</h3><h3 id="2-Prop"><a href="#2-Prop" class="headerlink" title="2. Prop"></a>2. Prop</h3><h3 id="3-自定义事件"><a href="#3-自定义事件" class="headerlink" title="3. 自定义事件"></a>3. 自定义事件</h3><h3 id="4-插槽"><a href="#4-插槽" class="headerlink" title="4. 插槽"></a>4. 插槽</h3><h3 id="5-动态组件-amp-异步组件"><a href="#5-动态组件-amp-异步组件" class="headerlink" title="5. 动态组件 &amp; 异步组件"></a>5. 动态组件 &amp; 异步组件</h3><h3 id="6-处理边界情况"><a href="#6-处理边界情况" class="headerlink" title="6. 处理边界情况"></a>6. 处理边界情况</h3><h2 id="过渡-amp-动画"><a href="#过渡-amp-动画" class="headerlink" title="过渡 &amp; 动画"></a>过渡 &amp; 动画</h2><h3 id="1-进入-离开-amp-列表过渡"><a href="#1-进入-离开-amp-列表过渡" class="headerlink" title="1. 进入/离开 &amp; 列表过渡"></a>1. 进入/离开 &amp; 列表过渡</h3><h3 id="2-状态过渡"><a href="#2-状态过渡" class="headerlink" title="2. 状态过渡"></a>2. 状态过渡</h3><h2 id="可复用性-amp-组合"><a href="#可复用性-amp-组合" class="headerlink" title="可复用性 &amp; 组合"></a>可复用性 &amp; 组合</h2><h3 id="1-混入"><a href="#1-混入" class="headerlink" title="1. 混入"></a>1. 混入</h3><h3 id="2-自定义指令"><a href="#2-自定义指令" class="headerlink" title="2. 自定义指令"></a>2. 自定义指令</h3><h3 id="3-渲染函数-amp-JSX"><a href="#3-渲染函数-amp-JSX" class="headerlink" title="3. 渲染函数 &amp; JSX"></a>3. 渲染函数 &amp; JSX</h3><h3 id="4-插件"><a href="#4-插件" class="headerlink" title="4. 插件"></a>4. 插件</h3><h3 id="5-过滤器"><a href="#5-过滤器" class="headerlink" title="5. 过滤器"></a>5. 过滤器</h3><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="1-单文件组件"><a href="#1-单文件组件" class="headerlink" title="1. 单文件组件"></a>1. 单文件组件</h3><h3 id="2-单元测试"><a href="#2-单元测试" class="headerlink" title="2. 单元测试"></a>2. 单元测试</h3><h3 id="3-TypeScript-支持"><a href="#3-TypeScript-支持" class="headerlink" title="3. TypeScript 支持"></a>3. TypeScript 支持</h3><h3 id="4-生产环境部署"><a href="#4-生产环境部署" class="headerlink" title="4. 生产环境部署"></a>4. 生产环境部署</h3><h2 id="规模化"><a href="#规模化" class="headerlink" title="规模化"></a>规模化</h2><h3 id="1-路由"><a href="#1-路由" class="headerlink" title="1. 路由"></a>1. 路由</h3><h3 id="2-状态管理"><a href="#2-状态管理" class="headerlink" title="2. 状态管理"></a>2. 状态管理</h3><h3 id="3-服务端渲染"><a href="#3-服务端渲染" class="headerlink" title="3. 服务端渲染"></a>3. 服务端渲染</h3><h2 id="内在"><a href="#内在" class="headerlink" title="内在"></a>内在</h2><h3 id="1-深入响应式原理"><a href="#1-深入响应式原理" class="headerlink" title="1. 深入响应式原理"></a>1. 深入响应式原理</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;h3 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1. 安装&quot;&gt;&lt;/a&gt;1. 安装&lt;
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>jQuery</title>
    <link href="http://yoursite.com/2019/12/04/jQuery/"/>
    <id>http://yoursite.com/2019/12/04/jQuery/</id>
    <published>2019-12-04T09:59:26.000Z</published>
    <updated>2019-12-07T09:05:51.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="体验jQuery"><a href="#体验jQuery" class="headerlink" title="体验jQuery"></a>体验jQuery</h2><ul><li><p>引入jQuery文件</p></li><li><p>入口函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//js版本</span></span><br><span class="line">    <span class="keyword">var</span> div=<span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span><br><span class="line">    div.style.display=<span class="string">'none'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//jQuery版本</span></span><br><span class="line">    <span class="comment">//先获取div</span></span><br><span class="line">    <span class="comment">//隐藏div</span></span><br><span class="line">    <span class="keyword">var</span> myDiv=$(<span class="string">'div'</span>);</span><br><span class="line">    myDiv.hide();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'你好'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">jQuery(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'你好'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过原生js获取div</span></span><br><span class="line"><span class="keyword">var</span> myDiv=<span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(myDiv);<span class="comment">//以对象形式将元素展示在控制台</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用jQuery的方式</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取div</span></span><br><span class="line">    <span class="keyword">var</span> myDiv=$(<span class="string">'div'</span>);</span><br><span class="line">    <span class="built_in">console</span>.dir(myDiv);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="DOM对象与jQuery对象的转换"><a href="#DOM对象与jQuery对象的转换" class="headerlink" title="DOM对象与jQuery对象的转换"></a>DOM对象与jQuery对象的转换</h2><ul><li><p>jQuery对象转化为DOM对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div=$(<span class="string">'div'</span>);</span><br><span class="line">div[<span class="number">0</span>];</span><br><span class="line">div.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>DOM对象转化为jQuery对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div=<span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span><br><span class="line">$(div);</span><br></pre></td></tr></table></figure></li></ul><h2 id="jQuery对象-1"><a href="#jQuery对象-1" class="headerlink" title="jQuery对象"></a>jQuery对象</h2><h3 id="通过选择器获取jQ对象"><a href="#通过选择器获取jQ对象" class="headerlink" title="通过选择器获取jQ对象"></a>通过选择器获取jQ对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'选择器'</span>);<span class="comment">//获取jQuery对象</span></span><br><span class="line">$(<span class="string">'.first'</span>);</span><br><span class="line">$(<span class="string">'#two'</span>);</span><br><span class="line">$(<span class="string">'li:nth-child(3)'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQ中的方法获取页面中的元素</span></span><br><span class="line">$(<span class="string">'li:first'</span>);</span><br><span class="line">$(<span class="string">'li:last'</span>);</span><br><span class="line">$(<span class="string">'li:eq(2)'</span>);<span class="comment">//索引从0开始</span></span><br><span class="line">$(<span class="string">'li:odd'</span>);<span class="comment">//索引值为奇数</span></span><br><span class="line">$(<span class="string">'li:even'</span>);<span class="comment">//索引值为偶数</span></span><br><span class="line"><span class="comment">//作为比较，写在css内部</span></span><br><span class="line">li:nth-child(odd)&#123;&#125;</span><br><span class="line">li:nth-child(even)&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="jQ获取元素的其他方式"><a href="#jQ获取元素的其他方式" class="headerlink" title="jQ获取元素的其他方式"></a>jQ获取元素的其他方式</h3><ul><li><p>获取当前元素的父元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'span'</span>).parent();<span class="comment">//上下级父亲</span></span><br><span class="line">$(<span class="string">'span'</span>).parents([<span class="string">'选择器'</span>]);<span class="comment">//获取元素的所有父元素（可以获取指定父元素）</span></span><br></pre></td></tr></table></figure></li><li><p>获取子元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li:nth-child(3)'</span>).children([<span class="string">'选择器'</span>])；<span class="comment">//获取当前元素的所有直接的（子代）子元素，可以获取指定的子元素</span></span><br><span class="line">$(<span class="string">'li:nth-child(3)'</span>).find([<span class="string">'选择器'</span>]);<span class="comment">//获取当前元素的所有的（后代）子元素，可以获取指定的子元素，但是，一般基本上加参数</span></span><br></pre></td></tr></table></figure></li><li><p>获取兄弟元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'p'</span>).siblings([<span class="string">'选择器'</span>]);<span class="comment">//获取当前元素的所有的兄弟元素，可以获取指定的兄弟元素</span></span><br><span class="line">$(<span class="string">'p'</span>).nextAll();<span class="comment">//获取当前元素的后面的所有的兄弟元素</span></span><br><span class="line">$(<span class="string">'p'</span>).prevAll();<span class="comment">//获取当前元素的前面的所有的兄弟元素</span></span><br></pre></td></tr></table></figure></li><li><p>判断当前元素是否有某个类名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li'</span>).hasClass(<span class="string">'one'</span>);</span><br></pre></td></tr></table></figure></li><li><p>获取索引值为n的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'span'</span>).eq(n);</span><br></pre></td></tr></table></figure></li></ul><h3 id="给jQ对象设置样式"><a href="#给jQ对象设置样式" class="headerlink" title="给jQ对象设置样式"></a>给jQ对象设置样式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li'</span>).css(<span class="string">'backgroundCOlor'</span>,<span class="string">'red'</span>);<span class="comment">//注意此处的属性名需要使用引号引起来</span></span><br><span class="line">$(<span class="string">'li'</span>).css(&#123;</span><br><span class="line">    backgroundColor:<span class="string">'red'</span>,</span><br><span class="line">    color:<span class="string">'green'</span></span><br><span class="line">&#125;);<span class="comment">//存在隐式迭代</span></span><br></pre></td></tr></table></figure><h2 id="jQ对象绑定事件"><a href="#jQ对象绑定事件" class="headerlink" title="jQ对象绑定事件"></a>jQ对象绑定事件</h2><ul><li><p>鼠标移入事件mouseenter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//js基础学过的mouseover事件，也是鼠标移入事件，但是两者是有细微的差别，mouseenter没有冒泡</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>鼠标移出事件mouseleave</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).mouseleave(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)<span class="comment">//mouseout</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="新浪导航"><a href="#新浪导航" class="headerlink" title="新浪导航"></a>新浪导航</h2><ul><li><p>获取当前元素的索引值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).index();</span><br></pre></td></tr></table></figure></li><li><p>滑入滑出（后面会介绍）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).slideUp();</span><br><span class="line">$(<span class="keyword">this</span>).slideDown();</span><br></pre></td></tr></table></figure></li></ul><h2 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h2><ul><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).css(&#123;<span class="attr">color</span>:<span class="string">'red'</span>&#125;).siblings().css(&#123;<span class="attr">color</span>:<span class="string">''</span></span><br><span class="line">&#125;)<span class="comment">//链式变成</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="操作类的方式操作标签的样式"><a href="#操作类的方式操作标签的样式" class="headerlink" title="操作类的方式操作标签的样式"></a>操作类的方式操作标签的样式</h2><ul><li><p>添加类名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).addClass(<span class="string">'box test'</span>);</span><br><span class="line"><span class="comment">//注意：此处添加多个类名和js中的clasList的add()方法有区别，此处用空格，而add()方法是通过逗号进行添加多个类名</span></span><br></pre></td></tr></table></figure></li><li><p>删除类名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).removeClass();<span class="comment">//不写参数表示移除全部类名</span></span><br><span class="line">$(<span class="string">'div'</span>).removeClass(<span class="string">'test'</span>);</span><br></pre></td></tr></table></figure></li><li><p>切换类名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).toggleClass(<span class="string">'test'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="jQ操作元素的动画效果"><a href="#jQ操作元素的动画效果" class="headerlink" title="jQ操作元素的动画效果"></a>jQ操作元素的动画效果</h2><h3 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h3><ul><li>hide([speed,easing,fn])<ul><li>隐藏</li><li>参数1：slow fast normal 毫秒值</li><li>参数2：linear swing</li><li>参数3：function(){}</li></ul></li><li>show([speed,easing,fn])<ul><li>显示</li><li>参数与hide()的参数一样</li></ul></li><li>toggle([speed,easing,fn])<ul><li>切换</li><li>参数与hide()的参数一样</li></ul></li></ul><h3 id="滑动动画"><a href="#滑动动画" class="headerlink" title="滑动动画"></a>滑动动画</h3><ul><li>slideDown([speed],[easing],[fn])<ul><li>改变高度进行显示</li><li>参数与hide()方法一样</li></ul></li><li>slideUp([speed,easing,fn])<ul><li>改变高度进行隐藏</li><li>参数与hide()方法一样</li></ul></li><li>slideToggle([speed,easing,fn])<ul><li>改变高度进行切换显示和隐藏</li><li>参数与hide()方法一样</li></ul></li></ul><h3 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><ul><li>fadeIn([speed,easing,fn])<ul><li>改变透明度进行显示</li><li>参数和hide()一样</li></ul></li><li>fadeOut([speed,easing,fn])<ul><li>改变透明度进行隐藏</li><li>参数和hide()一样</li></ul></li><li>fadeTo(speed,opacity,[easing],[fn])<ul><li>显示的透明度的程度</li><li>其中opacity为必写属性，但是speed也是需要设置的</li></ul></li><li>fadeToggle([speed,easing,fn])<ul><li>改变透明度进行切换</li><li>参数和hide()一样</li></ul></li></ul><h3 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h3><ul><li><p>语法：</p></li><li><p>参数1：param</p></li><li><p>参数2：speed</p></li><li><p>参数3:easing</p></li><li><p>参数4：fn</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).animate(&#123;</span><br><span class="line">    width:<span class="number">300</span>,</span><br><span class="line">    <span class="comment">//其中不能设置有关颜色的信息，需要后期引入插件才能进行实现</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="动画排队"><a href="#动画排队" class="headerlink" title="动画排队"></a>动画排队</h2><ul><li><p>stop()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).stop().animate(&#123;</span><br><span class="line">    width:<span class="number">400</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//一般加在动画的前面，更好的优化，停止当前正在执行的动画，以当前状态动画进行执行动画</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="操作标签的属性"><a href="#操作标签的属性" class="headerlink" title="操作标签的属性"></a>操作标签的属性</h2><ul><li><p>操作固有属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">'div'</span>).prop(<span class="string">'class'</span>));<span class="comment">//获取  </span></span><br><span class="line">$(<span class="string">'div'</span>).prop(<span class="string">'class'</span>,<span class="string">'one'</span>);<span class="comment">//设置</span></span><br><span class="line"><span class="comment">//其中设置开关属性的页通过prop设置和获取</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'div'</span>).prop(<span class="string">'checked'</span>));</span><br><span class="line">$(<span class="string">'div'</span>).prop(<span class="string">'checked'</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li><p>获取自定义属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">'div'</span>).attr(<span class="string">'myname'</span>));<span class="comment">//获取不是以data-开头的自定义属性</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'div'</span>).attr(<span class="string">'data-age'</span>));<span class="comment">//获取以data-开头的自定义属性</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'div'</span>).attr(<span class="string">'id'</span>));<span class="comment">//也可以获取固有属性</span></span><br><span class="line">$(<span class="string">'div'</span>).attr(<span class="string">'name'</span>,<span class="string">'lxh'</span>)</span><br></pre></td></tr></table></figure></li><li><p>操作缓存数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//程序中，将数据保存下来的方式</span></span><br><span class="line"><span class="comment">//变量，数组，对象，本地存储，自定义属性</span></span><br><span class="line">$(<span class="string">'div'</span>).data(<span class="string">'myage'</span>,<span class="number">180</span>);<span class="comment">//随着刷新将会消失</span></span><br><span class="line"><span class="comment">//也可以获取data-开头的自定义属性</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="实现全选效果"><a href="#实现全选效果" class="headerlink" title="实现全选效果"></a>实现全选效果</h2><ul><li><p>小知识：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.ck input:checked'</span>);<span class="comment">//获取所有选中的元素</span></span><br><span class="line"><span class="comment">//通过程序的方式实现数据博村两位小数</span></span><br><span class="line"><span class="keyword">var</span> total_money=total_money.toFixed(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//实现用户手动输入修改对应的总价</span></span><br><span class="line">$(<span class="string">'.i_number input'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>设置和获取表单控件的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'input'</span>).val();</span><br><span class="line">$(<span class="string">'input'</span>).val(<span class="string">'值'</span>)</span><br></pre></td></tr></table></figure></li><li><p>设置和获取普通标签中的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).html()<span class="comment">//获取div内部的html结构文本内容 类似于innerHTML</span></span><br><span class="line">$(<span class="string">'div'</span>).text()<span class="comment">//获取div内部的文本内容 类似于innerText</span></span><br><span class="line">$(<span class="string">'div'</span>).html(<span class="string">'&lt;span&gt;我是一个span标签&lt;/span&gt;'</span>);<span class="comment">//设置div内部的html结构</span></span><br><span class="line">$(<span class="string">'div'</span>).text(<span class="string">'我是文本'</span>);<span class="comment">//设置div内部的文本内容</span></span><br></pre></td></tr></table></figure></li><li><p>遍历jQ对象</p><ul><li><p>第一种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,domElement</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>(index,domElement);<span class="comment">//index为索引 domElement为dom对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>第二种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.each($(<span class="string">'li'</span>),<span class="function"><span class="keyword">function</span>(<span class="params">index,domElement</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index,domElement);<span class="comment">//index为索引 domElement为dom对象</span></span><br><span class="line">    <span class="comment">//此种遍历方式一般用于遍历数据，一般遍历页面中的元素使用第一种</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过jQ对象创建元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> span=$(<span class="string">'&lt;span&gt;我是新创建的span&lt;/span&gt;'</span>);<span class="comment">//创建span标签</span></span><br><span class="line">$(<span class="string">'div'</span>).html(<span class="string">'html标签'</span>);</span><br><span class="line"><span class="comment">//添加子元素</span></span><br><span class="line">$(<span class="string">'div'</span>).append(span);<span class="comment">//添加到div内部的最后面</span></span><br><span class="line">$(<span class="string">'div'</span>).prepend(span);<span class="comment">//添加到div内部的最前面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加兄弟元素</span></span><br><span class="line">$(<span class="string">'div'</span>).after(span);<span class="comment">//添加到div的后面</span></span><br><span class="line">$(<span class="string">'div'</span>).before(span);<span class="comment">//添加到div的前面</span></span><br></pre></td></tr></table></figure></li><li><p>删除元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).remove();<span class="comment">//删除当前的元素</span></span><br><span class="line">$(<span class="keyword">this</span>).empty();<span class="comment">//删除当前元素的所有内部子元素</span></span><br><span class="line">$(<span class="keyword">this</span>).html(<span class="string">''</span>);<span class="comment">//删除当前元素的内部的html结构文本内容</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="jQ方式获取元素大小和位置"><a href="#jQ方式获取元素大小和位置" class="headerlink" title="jQ方式获取元素大小和位置"></a>jQ方式获取元素大小和位置</h2><ul><li>获取元素大小<ul><li>jQ对象.width()    获取宽度</li><li>jQ对象.height()       获取高度</li><li>jQ对象.innerWidth()    获取width+padding</li><li>jQ对象.innerHeight()    获取height+padding</li><li>jQ对象.outerWidth()      获取width+padding+border</li><li>jQ对象.outerHeight()         获取height+padding+border</li><li>jQ对象.outerWidth(true)     获取width+padding+border+margin</li><li>jQ对象.outerHeight(true)          获取height+padding+border+margin</li></ul></li><li>设置元素大小<ul><li>jQ对象.width(值)//不带单位</li><li>jQ对象.height(值)</li></ul></li></ul><h2 id="获取元素元素位置"><a href="#获取元素元素位置" class="headerlink" title="获取元素元素位置"></a>获取元素元素位置</h2><ul><li><p>offset    与父元素无关，获取当前元素相对于整个文档的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.one'</span>).offset()<span class="comment">//返回一个对象</span></span><br><span class="line">$(<span class="string">'.one'</span>).offset().left;</span><br><span class="line">$(<span class="string">'.one'</span>).offset().top;</span><br></pre></td></tr></table></figure></li><li><p>position        如果当前父元素没有定位，那么参照整个页面，如果当前父元素有定位，直接参照父元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.one'</span>).position();<span class="comment">//返回一个对象</span></span><br><span class="line">$(<span class="string">'.one'</span>).position().left;</span><br><span class="line">$(<span class="string">'.one'</span>).position().top;</span><br></pre></td></tr></table></figure></li></ul><h2 id="获取元素滚动出去的距离"><a href="#获取元素滚动出去的距离" class="headerlink" title="获取元素滚动出去的距离"></a>获取元素滚动出去的距离</h2><ul><li><p>给浏览器注册滚动事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'html'</span>).scrollTop();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>文档没有animate方法，只有页面中的元素才有animate，其中animate中有一个属性scrollTop属性</p></li></ul><h2 id="通过on的方式给元素注册事件"><a href="#通过on的方式给元素注册事件" class="headerlink" title="通过on的方式给元素注册事件"></a>通过on的方式给元素注册事件</h2><ul><li><p>一个对象可以同时注册多个事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).on(<span class="string">'事件类型'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).css(<span class="string">'backgroundColor'</span>,<span class="string">'red'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'div'</span>).on(&#123;</span><br><span class="line">    <span class="string">'事件类型'</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'事件类型'</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="通过on注册委托事件"><a href="#通过on注册委托事件" class="headerlink" title="通过on注册委托事件"></a>通过on注册委托事件</h2><ul><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.box'</span>).on(<span class="string">'click'</span>,<span class="string">'.one'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//使.box内部的子元素.one有点击事件  </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h2><ul><li>jQ对象.off()//解绑所有注册的事件</li><li>jQ对象.off(‘mouseenter’) 解绑鼠标进入事件</li><li>jQ对象.off(‘事件类型’,’选择器’) 解绑委托事件</li></ul><h2 id="one事件"><a href="#one事件" class="headerlink" title="one事件"></a>one事件</h2><ul><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.one'</span>).one(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//只执行一次</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="自动触发事件"><a href="#自动触发事件" class="headerlink" title="自动触发事件"></a>自动触发事件</h2><ul><li><p>方式1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).click();</span><br></pre></td></tr></table></figure></li><li><p>方式2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).trigger(<span class="string">'click'</span>);</span><br></pre></td></tr></table></figure></li><li><p>方式3：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).triggerHandler()<span class="comment">//默认行为不执行</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>小知识：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自调用函数：让函数自己调用自己</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;&#125;)()</span><br></pre></td></tr></table></figure></li></ul><h2 id="jQ中的事件对象"><a href="#jQ中的事件对象" class="headerlink" title="jQ中的事件对象"></a>jQ中的事件对象</h2><ul><li>事件对象参数：与js基础中学习的基本一样</li><li>只不过可以不用设置参数直接使用event可以</li></ul><h2 id="拷贝对象"><a href="#拷贝对象" class="headerlink" title="拷贝对象"></a>拷贝对象</h2><ul><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.extend(obj1,obj2);</span><br><span class="line"><span class="comment">//第一个参数，是布尔类型，默认为false,表示浅拷贝</span></span><br><span class="line"><span class="comment">//第二个参数：目标拷贝对象</span></span><br><span class="line"><span class="comment">//第三个参数：被拷贝的对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$.extend(<span class="literal">true</span>,obj1,obj2);</span><br><span class="line"><span class="comment">//第一个参数，是布尔类型，表示深拷贝</span></span><br><span class="line"><span class="comment">//第二个参数：目标拷贝对象</span></span><br><span class="line"><span class="comment">//第三个参数：被拷贝的对象</span></span><br></pre></td></tr></table></figure></li><li><p>总结：</p><ul><li>不管是深拷贝还是浅拷贝，如果原来对象中有一个和被拷贝对象相同的属性，会被覆盖掉</li><li>不管是深拷贝还是浅拷贝，如果原来对象中不存在与被拷贝对象相同的属性，不会被覆盖掉</li><li>如果是浅拷贝，那么拷贝过程中，遇到的是对象，是将对象的地址赋值给目标对象</li><li>如果是深拷贝，那么在拷贝过程中，是直接将对象赋值一份拷贝给当前对象</li></ul></li></ul><h2 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getelement=jQuery.noConflict();</span><br><span class="line">getelement(<span class="string">'div'</span>);<span class="comment">//获取jQ对象</span></span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul><li>先引入jquery文件，再引入插件</li></ul><h3 id="全屏滚动插件"><a href="#全屏滚动插件" class="headerlink" title="全屏滚动插件"></a>全屏滚动插件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'fullPage'</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'section'</span>&gt;</span></span><br><span class="line">        第一</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'section'</span>&gt;</span></span><br><span class="line">        第二</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'section'</span>&gt;</span></span><br><span class="line">        第三</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'jquery.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'jquery.fullPage.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#fullPage'</span>).fullpage(&#123;</span><br><span class="line">        sectionsColor:[<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'pink'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">'lazy'</span> <span class="attr">data-original</span>=<span class="string">'01.jpg'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'jquery.js'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'jquery.lazyload.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'img.lazy'</span>).lazyload();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="todoList案例"><a href="#todoList案例" class="headerlink" title="todoList案例"></a>todoList案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"title"</span>&gt;</span>todoList<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>正在进行<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>已经完成<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jQuery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 调用加载数据的方法</span></span></span><br><span class="line">            loadDate();</span><br><span class="line"><span class="actionscript">            <span class="comment">// 1.先创建一条数据：如果原来就有数据，在原来数据基础上在追加一条新的数据，否则直接创建一条数据</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 1.1先给输入框注册一个键盘事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#title'</span>).keydown(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 先要明确用户按下的是回车键</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// console.log(e.keyCode);</span></span></span><br><span class="line">                if (e.keyCode == 13) &#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 获取当前输入框中的值</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> input_v = $(<span class="keyword">this</span>).val();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 获取本地存储中的数据</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> list = getDate();</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//    将输入框中的值直接添加到list中</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// list.push(input_v);</span></span></span><br><span class="line">                    list.push(&#123;</span><br><span class="line">                        listname: input_v,</span><br><span class="line"><span class="actionscript">                        ischeck: <span class="literal">false</span>,</span></span><br><span class="line">                    &#125;)</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 将新的数据再次存入到本地存储中</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(list);</span></span><br><span class="line"><span class="actionscript">                    localStorage.setItem(<span class="string">'todoList'</span>, str);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 动态渲染标签：有几条数据就创建几个标签</span></span></span><br><span class="line">                    loadDate();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取本地存储中国的数据</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> list = localStorage.getItem(<span class="string">'todoList'</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (list != <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//    如果有数据 那么就将原来数据转化为数组</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(list);</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//    localStorage.setItem('todoList','[]');</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> [];</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">//动态渲染标签 （动态创建标签）</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">loadDate</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 获取本地存储的数据</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> list = getDate();</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 为了避免重复加载，先将ol中的内容清空</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">'ol,ul'</span>).empty();</span></span><br><span class="line">                </span><br><span class="line"><span class="actionscript">                <span class="comment">// 动态遍历list 然后创建标签</span></span></span><br><span class="line"><span class="javascript">                $.each(list, <span class="function"><span class="keyword">function</span> (<span class="params">i, item</span>) </span>&#123;</span></span><br><span class="line">                    if (item.ischeck) &#123;</span><br><span class="line"><span class="actionscript">                        <span class="comment">// console.log(i,item);</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 创建li</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        var li = $('<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>' + item.listname + '<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">aindex</span>=<span class="string">"' + i + '"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>');</span></span></span><br><span class="line"><span class="javascript">                        $(<span class="string">'ul'</span>).prepend(li);</span></span><br><span class="line"><span class="actionscript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// console.log(i,item);</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 创建li</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        var li = $('<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>' + item.listname + '<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">aindex</span>=<span class="string">"' + i + '"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>');</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 将该标签添加到ol中</span></span></span><br><span class="line"><span class="javascript">                        $(<span class="string">'ol'</span>).prepend(li);</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 实现删除效果</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'ol,ul'</span>).on(<span class="string">'click'</span>, <span class="string">'a'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 实现将本地存储的数据删除</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// console.log($(this</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// ).index());</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> list = getDate();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 获取自定义属性值</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// console.log($(this).attr('aindex'));</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> index = $(<span class="keyword">this</span>).attr(<span class="string">'aindex'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 从数组中删除一条数据</span></span></span><br><span class="line">                list.splice(index, 1);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 重新将数据更新到本地存储中</span></span></span><br><span class="line"><span class="javascript">                localStorage.setItem(<span class="string">'todoList'</span>, <span class="built_in">JSON</span>.stringify(list));</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 重新加载数据</span></span></span><br><span class="line">                loadDate();</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 实现状态修改</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'ol,ul'</span>).on(<span class="string">'click'</span>, <span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 获取对应索引值</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> index = $(<span class="keyword">this</span>).siblings(<span class="string">'a'</span>).attr(<span class="string">'aindex'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(index);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 获取本地存储的数据</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> list = getDate();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 修改</span></span></span><br><span class="line"><span class="javascript">                list[index].ischeck = $(<span class="keyword">this</span>).prop(<span class="string">'checked'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 将数据更新到本地存储中</span></span></span><br><span class="line"><span class="javascript">                localStorage.setItem(<span class="string">'todoList'</span>, <span class="built_in">JSON</span>.stringify(list));</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 重新加载数据</span></span></span><br><span class="line">                loadDate();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jQuery&quot;&gt;&lt;a href=&quot;#jQuery&quot; class=&quot;headerlink&quot; title=&quot;jQuery&quot;&gt;&lt;/a&gt;jQuery&lt;/h1&gt;&lt;h2 id=&quot;体验jQuery&quot;&gt;&lt;a href=&quot;#体验jQuery&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>React</title>
    <link href="http://yoursite.com/2019/12/04/React/"/>
    <id>http://yoursite.com/2019/12/04/React/</id>
    <published>2019-12-04T09:59:15.000Z</published>
    <updated>2019-12-07T09:05:51.408Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="React" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Node-JS</title>
    <link href="http://yoursite.com/2019/12/04/NodeJS/"/>
    <id>http://yoursite.com/2019/12/04/NodeJS/</id>
    <published>2019-12-04T09:47:42.000Z</published>
    <updated>2019-12-07T09:05:51.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>通俗理解为就是可以脱离浏览器，运行js代码的一个环境</p><h3 id="Node-js基本概念"><a href="#Node-js基本概念" class="headerlink" title="Node.js基本概念"></a>Node.js基本概念</h3><ul><li>基于chrome v8引擎的javascript运行环境</li><li>浏览器中有一个可以解析js的解析器<ul><li>解析器（翻译官）<ul><li>把编程语言翻译成计算机可以是别的二进制</li><li>js……（翻译官）→计算机执行</li></ul></li></ul></li><li>js运行环境<ul><li>通过node.js可以直接运行js代码</li></ul></li></ul><h3 id="Node-js-安装"><a href="#Node-js-安装" class="headerlink" title="Node.js-安装"></a>Node.js-安装</h3><p>下载地址：<code>http://nodejs.org/en/</code></p><h3 id="js组成"><a href="#js组成" class="headerlink" title="js组成"></a>js组成</h3><ul><li>浏览器端<ul><li>ECMAScript:js语法</li><li>DOM：文档对象模型<ul><li>约定操作dom元素的语法</li></ul></li><li>BOM：浏览器对象模型<ul><li>操纵浏览器语法</li></ul></li></ul></li><li>服务器端<ul><li>ECMAScript:js基础语法</li><li>BOM一些常用的api</li><li>模块：（类似之前的jQ，swiper……）<ul><li>内置模块</li><li>第三方模块</li></ul></li></ul></li></ul><h3 id="Node-js基本使用-REPL-了解-【cmd】"><a href="#Node-js基本使用-REPL-了解-【cmd】" class="headerlink" title="Node.js基本使用-REPL(了解)【cmd】"></a>Node.js基本使用-REPL(了解)【cmd】</h3><ul><li><p>read eval print loop</p></li><li><p>打开黑窗</p></li><li><p>输入node回车</p></li><li><p>写js代码回车运行</p></li><li><p>循环步骤3</p></li></ul><h3 id="Node-js基本使用-执行js文件【git-bash-here】"><a href="#Node-js基本使用-执行js文件【git-bash-here】" class="headerlink" title="Node.js基本使用-执行js文件【git bash here】"></a>Node.js基本使用-执行js文件【git bash here】</h3><ul><li>写好一个js文件</li><li>内部有node.js支持的代码</li><li>打开黑窗（git bash here）支持的代码</li><li>输入<code>node 文件名</code>回车</li><li>运行</li><li>注意：<ul><li>文件名不需要打全，写个开头+tab自动提示</li><li>黑窗打开位置和js在一个文件夹下</li><li>文件名不要叫node.js</li></ul></li></ul><h3 id="Node-js基本使用-在vscode中打开"><a href="#Node-js基本使用-在vscode中打开" class="headerlink" title="Node.js基本使用-在vscode中打开"></a>Node.js基本使用-在vscode中打开</h3><ul><li>右键文件→在终端中打开→输入命令运行(<code>node 文件名</code>)</li><li>关闭终端的快捷键 ctrl+~</li></ul><h3 id="Node-js-内置模块"><a href="#Node-js-内置模块" class="headerlink" title="Node.js-内置模块"></a>Node.js-内置模块</h3><p>脱离浏览器的限制，通过内置模块可以实现很多在浏览器中干不了的事情</p><p>官方文档：<code>http://nodejs.cn/api/fs.html</code></p><h3 id="Node-js-js内置模块基本使用-文件读写操作"><a href="#Node-js-js内置模块基本使用-文件读写操作" class="headerlink" title="Node.js-js内置模块基本使用-文件读写操作"></a>Node.js-js内置模块基本使用-文件读写操作</h3><p>文件基本读写会用即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);<span class="comment">//导入fs模块</span></span><br><span class="line"><span class="comment">//readFile读取文件</span></span><br><span class="line"><span class="comment">//参数1：文件路径</span></span><br><span class="line"><span class="comment">//参数2：选项 可选参数</span></span><br><span class="line"><span class="comment">//参数3：回调函数</span></span><br><span class="line"><span class="comment">//err:如果读取失败，保存的是错误信息</span></span><br><span class="line"><span class="comment">//data:读取的结果，读取成功的话才有</span></span><br><span class="line">fs.readFile(path,formdata,fn(err,data)&#123;</span><br><span class="line">            <span class="keyword">if</span>(err==<span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);<span class="comment">//如果没有错误err为null</span></span><br><span class="line">&#125;        </span><br><span class="line"> </span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//writeFile写文件</span></span><br><span class="line">  <span class="comment">//参数1：文件路径</span></span><br><span class="line">  <span class="comment">//参数2：写入的内容</span></span><br><span class="line">  <span class="comment">//参数3：选项 可选参数</span></span><br><span class="line">  <span class="comment">//参数4：回调函数</span></span><br><span class="line">  fs.writeFile(path,content,formdata,fn(err)&#123;</span><br><span class="line">               <span class="keyword">if</span>(err==<span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'写入成功'</span>);<span class="comment">//err为null,说明文件写入成功</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'写入失败'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">             &#125;)</span><br></pre></td></tr></table></figure><h3 id="终端命令-cd"><a href="#终端命令-cd" class="headerlink" title="终端命令 cd"></a>终端命令 cd</h3><ul><li>在终端中切换路径</li><li>可以用来切换路径</li><li><code>cd 路径</code> 切换到指定的目录</li><li><code>cd ../</code> 切换上一级目录</li><li><code>cd 文件夹</code> 切换到指定的文件夹</li><li>到在其他不同级的文件夹下开启终端，可能会引起路径问题</li><li><strong>在读取文件时，node.js的相对路径，相对的是终端中的路径，小黑窗所处的路径</strong></li></ul><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><ul><li><p>综上所述，引出在读取或者是写入文件时，采用绝对路径定位到这个文件上</p></li><li><p>方式</p><ul><li>方式一：右键你要读的文件 复制路径 进行拷贝路径<ul><li>此方法换到另一个电脑上，还需要更改，因此不方便</li></ul></li><li>方式二：结合两个<strong>全局变量</strong>，可以动态生成绝对路径 避免写死<ul><li>__dirname <strong>js文件所处的文件夹</strong>的绝对路径</li><li>__filename js文件的绝对路径</li></ul></li></ul></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">//动态获取文件的绝对路径</span></span><br><span class="line"><span class="keyword">const</span> filePath=__dirname+<span class="string">'/novel/01.txt'</span>;<span class="comment">//此处注意到后面的'./novel/01.txt'不可以这样写 或者不可以'\novel\01.txt',因为\是转义符，所以需要改成'\\novel\\01.txt'</span></span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line">fs.readFile(filePath,<span class="string">'utf-8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Path内置模块的基本使用"><a href="#Path内置模块的基本使用" class="headerlink" title="Path内置模块的基本使用"></a>Path内置模块的基本使用</h3><ul><li><p>综上所述，虽然读取文件变得动态，但是书写格式方面，还是让人不省心，于是就有了此模块的作用</p></li><li><p>专门用来处理路径的模块</p></li><li><p>方法：</p><ul><li>path.extname(‘info/novel.txt’);获取文件的扩展名 .txt</li><li>path.dirname(‘info/novel.txt’);获取文件夹的名字 info</li><li><strong>path.join(路径1，路径2，路径3……)；</strong>//把多个路径拼接到一起，保证格式正确,<strong>逗号分隔</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filePath=path.join(<span class="string">'info'</span>,<span class="string">'./novel'</span>,<span class="string">'01.txt'</span>)</span><br><span class="line"><span class="comment">//此时，生成一个绝对路径</span></span><br><span class="line">path.join(__dirname,<span class="string">'./novel/01.txt'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="path与js结合获取文件"><a href="#path与js结合获取文件" class="headerlink" title="path与js结合获取文件"></a>path与js结合获取文件</h3><ul><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入js包</span></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">//导入path包</span></span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> filePath=path.join(__dirname,<span class="string">'./novel/01.txt'</span>);</span><br><span class="line">fs.readFile(filePath,<span class="string">'utf-8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="http模块-创建服务器"><a href="#http模块-创建服务器" class="headerlink" title="http模块-创建服务器"></a>http模块-创建服务器</h3><ul><li><p>使用步骤：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">//调用createServer方法创建服务器对象</span></span><br><span class="line"><span class="keyword">var</span> server=http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//❀响应❀返回内容为中文时，会出现乱码效果，需要设置格式</span></span><br><span class="line">    <span class="comment">//content-type 内容类型</span></span><br><span class="line">    <span class="comment">//text/plain 是普通文本</span></span><br><span class="line">    <span class="comment">//charset=utf-8 编码格式</span></span><br><span class="line">    response.setHeader(<span class="string">'content-type'</span>,<span class="string">'text/plain;charset=utf-8'</span>);</span><br><span class="line">    <span class="comment">//返回内容</span></span><br><span class="line">    response.end(<span class="string">'欢迎访问服务器'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//开启服务器（监听端口） listen</span></span><br><span class="line"><span class="comment">//参数1 端口号</span></span><br><span class="line"><span class="comment">//参数2 监听地址省略的话就是本机 该处已省略</span></span><br><span class="line"><span class="comment">//参数3 开启之后的回调函数</span></span><br><span class="line">server.listen(<span class="number">1888</span>,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'服务器开启成功'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'服务器开启失败'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>让电脑成为服务器</p></li><li><p><code>http://192.168.156.91:1888</code></p></li><li><p>协议：ip地址:端口号</p></li><li><p>端口：</p><ul><li>电脑和外部通讯的一个通道</li><li>物理端口<ul><li>usb口</li><li>网线口</li><li>耳机口</li><li>hdmi(显示器，投影仪)</li><li>……</li></ul></li><li>虚拟端口：电脑中的软件和外部通讯的通道<ul><li>只要和外部通讯的软件，都会使用某一个虚拟端口</li><li>一个号位移 0开始递增</li><li>虚拟端口很多</li><li>但是前10000很多被用了</li><li>自己使用时用10000以后，靠后一般都可以使用 一些比较另类</li><li>6.8848 8888 4399 3000</li><li>端口一次只能被一个程序使用</li></ul></li></ul></li></ul><h3 id="http模块-服务器的交互流程"><a href="#http模块-服务器的交互流程" class="headerlink" title="http模块-服务器的交互流程"></a>http模块-服务器的交互流程</h3><ul><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> server=http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//request.url获取请求的地址</span></span><br><span class="line">    <span class="comment">//decodeURI对❀请求地址❀ url进行中文解码</span></span><br><span class="line">    <span class="comment">//console.log(decodeURI(request.url))；</span></span><br><span class="line">    <span class="comment">//response.end('笑');</span></span><br><span class="line">    response.setHeader(<span class="string">'content-type'</span>,<span class="string">'text/plain;charset=utf-8'</span>);</span><br><span class="line">    <span class="keyword">const</span> requestUrl=<span class="built_in">decodeURI</span>(request.url);</span><br><span class="line">    <span class="keyword">if</span>(requestUrl==<span class="string">'/hello'</span>)&#123;</span><br><span class="line">        response.end(<span class="string">'吃了没'</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(requestUrl==<span class="string">'/饿了么'</span>)&#123;</span><br><span class="line">        response.end(<span class="string">'知道了'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(requestUrl==<span class="string">'login'</span>)&#123;</span><br><span class="line">        response.end(<span class="string">'&lt;h1 style="background:orange;color:skyblue;"&gt;我在&lt;/h1&gt;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">1888</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'成功！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="http模块-根据不同的url响应html文件"><a href="#http模块-根据不同的url响应html文件" class="headerlink" title="http模块-根据不同的url响应html文件"></a>http模块-根据不同的url响应html文件</h3><ul><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导包 http</span></span><br><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">//导包 fs</span></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">//导包 path</span></span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">//创建服务器</span></span><br><span class="line"><span class="keyword">const</span> server=http.createServer((request,response)&#123;</span><br><span class="line"><span class="keyword">const</span> filePath=path.join(__dirname,<span class="string">'./web/index.html'</span>);</span><br><span class="line">fs.readFile(filePath,<span class="string">'utf-8'</span>,(err,data)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err==<span class="literal">null</span>)&#123;</span><br><span class="line">        response.end(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//开启监听</span></span><br><span class="line">server.listen(<span class="number">1888</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'成功'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'失败'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="http模块-根据不同的url响应不同的文件"><a href="#http模块-根据不同的url响应不同的文件" class="headerlink" title="http模块-根据不同的url响应不同的文件"></a>http模块-根据不同的url响应不同的文件</h3><ul><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">//创建一个叫静态资源服务器</span></span><br><span class="line">http.createServer(<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> requestUrl=<span class="built_in">decodeURI</span>(request.url);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">var</span> fullPath=path.join(__dirname,<span class="string">'./web'</span>+requestUrl);</span><br><span class="line">    <span class="comment">//fs.readFile(fullPath,'utf-8',(err,data)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//浏览器可以自动识别绝大多数的文件格式，不需要人为设置编码</span></span><br><span class="line">    fs.readFile(fullPath,(err,data)=&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(err==<span class="literal">null</span>)&#123;</span><br><span class="line">            response.end(data);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            response.setHeader(<span class="string">'content-type'</span>,<span class="string">'text/plain;charset=utf-8'</span>);</span><br><span class="line">            response.end(<span class="string">'&lt;h1&gt;404&lt;/h1&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="http模块-get和post请求"><a href="#http模块-get和post请求" class="headerlink" title="http模块-get和post请求"></a>http模块-get和post请求</h3><ul><li><p><code>request.method</code>获取请求的方法</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">//创建服务器</span></span><br><span class="line"><span class="keyword">const</span> server=http.createServer(<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.method==<span class="string">'GET'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(request.url==<span class="string">'/list'</span>)&#123;</span><br><span class="line">            <span class="comment">//list相关逻辑代码</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.url==<span class="string">'/search'</span>)&#123;</span><br><span class="line">            <span class="comment">//search相关逻辑代码</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        response.end(<span class="string">'为get请求'</span>)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.method==<span class="string">'POST'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(request.url==<span class="string">'/add'</span>)&#123;</span><br><span class="line">            <span class="comment">//add相关逻辑代码</span></span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        response.end(<span class="string">'为post请求'</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">8848</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'开启成功'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>###　Node.js-第三方模块（npm网站）</p><ul><li><p>步骤：一顿ctrl+c/ctrl+v</p><ul><li><p>官方网站（包管家搜索界面）<code>http://www.npmjs.com</code></p></li><li><p>找包 官方的包检索网站 npm</p></li><li><p>下包 模板的网页中有命令</p><ul><li><p>在终端中输入npm i szhmqd23_yu</p></li><li><p>当前文件夹中会出现如下图所示</p></li></ul><p><img src="C:%5CUsers%5C%E5%88%98%E6%99%93%E6%85%A7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1572008813226.png" alt="1572008813226"></p></li><li><p>导包 文档中也有</p></li><li><p>用包</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导包</span></span><br><span class="line"><span class="keyword">const</span> szhmqd23_yu = <span class="built_in">require</span>(<span class="string">'szhmqd23_yu'</span>);</span><br><span class="line"><span class="comment">// 用包</span></span><br><span class="line"><span class="comment">// const res=szhmqd23_yu.add(998,2);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res=szhmqd23_yu.mul(<span class="number">998</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(szhmqd23_yu.mul(1,2))</span></span><br><span class="line"><span class="comment">// console.log(szhmqd23_yu.sub(1,2))</span></span><br></pre></td></tr></table></figure></li><li><p>第三方插件使用步骤</p><ul><li>新建文件夹（不要写中文）</li><li>初始化(打开终端输<code>pm init -y</code>或<code>pm init 自行输入</code><ul><li>生成一个package.json文件</li><li>保存项目的信息，比如版本，名字，使用的第三方模块</li><li><code>npm init 自行输入每一项</code>(初期用的不多)</li></ul></li><li>去npm网站找包</li><li>根据提示下包<code>npm i 包名</code><ul><li>package.json中增加一个dependencies把下载的包名，记录进去，和版本信息</li><li>文件夹下多<ul><li>node_modules所有下载的第三方模块都会在里面</li><li>package-lock.json:模块名，版本号，在线地址等<ul><li>为了让我们第二次下载的时候速度更快</li></ul></li></ul></li></ul></li><li>根据提示导包</li><li>根据提示用包</li></ul></li><li><p>第二次下载</p><ul><li>保证package.json及package-lock.json中有之前下载的模块名</li><li>直接输入npm i 自动读取用到的模块并下载</li></ul></li></ul><h3 id="express模块基本使用"><a href="#express模块基本使用" class="headerlink" title="express模块基本使用"></a>express模块基本使用</h3><p>相比于原生http木块 开发速度更快的web开发框架</p><p>很多模板框架都是基于express</p><ul><li><p>使用步骤</p><ul><li><p>新建文件夹，非中文</p></li><li><p>初始化<code>npm init -y</code></p></li><li><p>找包</p></li><li><p>根据提示下包<code>npm i express</code></p></li><li><p>导入express</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导包 express</span></span><br><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">//创建服务器对象 http.createServer类似</span></span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line"><span class="comment">//如果请求的是/ (url为空)</span></span><br><span class="line">app.get(<span class="string">'/'</span>,(request,response)=&gt;&#123;</span><br><span class="line">    <span class="comment">//原生方法也支持</span></span><br><span class="line">    response.send(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//开启服务器</span></span><br><span class="line">app.listen(<span class="number">3000</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>根据提示用包</p><ul><li>http模块的方法都可以使用，更建议用express</li></ul></li></ul><h3 id="express-托管静态资源"><a href="#express-托管静态资源" class="headerlink" title="express-托管静态资源"></a>express-托管静态资源</h3><ul><li><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">//创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line"><span class="comment">//实现静态资源服务器的功能</span></span><br><span class="line">app.use(express.static(<span class="string">'./public'</span>));<span class="comment">//相当于原生中的根据不同的url地址访问不同的文件</span></span><br><span class="line"><span class="comment">//开启服务器</span></span><br><span class="line">app.listen(<span class="number">3000</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="express模块-get路由"><a href="#express模块-get路由" class="headerlink" title="express模块-get路由"></a>express模块-get路由</h3><ul><li>get请求时，url地址和后台函数（逻辑）的对应关系</li><li>接口调用：浏览器调用定义在服务器的函数</li><li>写接口：<ul><li>根据接口文档注册路由</li><li>实现逻辑</li><li>返回结果</li></ul></li></ul><h3 id="一条笑话接口"><a href="#一条笑话接口" class="headerlink" title="一条笑话接口"></a>一条笑话接口</h3><ul><li><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">//创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line"><span class="comment">//注册路由</span></span><br><span class="line">app.get(<span class="string">'/joke'</span>,(request,response)=&gt;&#123;</span><br><span class="line">    <span class="comment">//一条笑话</span></span><br><span class="line">    response.send(<span class="string">'我是一条笑话'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//开启服务器</span></span><br><span class="line">app.listen(<span class="number">8848</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'成功'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="随机笑话接口"><a href="#随机笑话接口" class="headerlink" title="随机笑话接口"></a>随机笑话接口</h3><ul><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line">app.get(<span class="string">'/randomJoke'</span>,(request,response)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> jokes=[<span class="string">'笑话1'</span>,<span class="string">'笑话2'</span>];</span><br><span class="line">    <span class="keyword">const</span> randomIndex=<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*jokes.length);</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="高级版随机笑话接口"><a href="#高级版随机笑话接口" class="headerlink" title="高级版随机笑话接口"></a>高级版随机笑话接口</h3><ul><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line"><span class="comment">//注册路由</span></span><br><span class="line">app.get(<span class="string">'/randomJokePro'</span>,(request,response)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> fullPath=path.join(__dirname,+<span class="string">'./data/jokes.json'</span>);</span><br><span class="line">    fs.readFile(fullPath,(err,data)=&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(err==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> jokesArr=<span class="built_in">JSON</span>.parse(data);</span><br><span class="line">            <span class="keyword">const</span> randomIndex=<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*jokesArr.length);</span><br><span class="line">            response.send(jokesArr[randomIndex]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            response.setHeader(<span class="string">'content-type'</span>,<span class="string">'text/plain;charset=utf-8'</span>);</span><br><span class="line">            response.send(<span class="string">'404 服务器崩溃'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="get请求参数获取"><a href="#get请求参数获取" class="headerlink" title="get请求参数获取"></a>get请求参数获取</h3><ul><li><p>通过<code>request.query</code>属性进行获取</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line">app.get(<span class="string">'/search'</span>,(request,response)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(request.query)；</span><br><span class="line">    <span class="built_in">console</span>.log(request.query.name);<span class="comment">//获取name属性</span></span><br><span class="line">    response.send(<span class="string">'/search'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="笑话接口带参数"><a href="#笑话接口带参数" class="headerlink" title="笑话接口带参数"></a>笑话接口带参数</h3><ul><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line">app.get(<span class="string">'/getSomeJoke'</span>,(request,response)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> num=request.query.num;</span><br><span class="line">    <span class="keyword">const</span> jokeArr=[];</span><br><span class="line">    <span class="keyword">const</span> fullPath=path.join(__dirname,<span class="string">'./data/jokes.json'</span>);</span><br><span class="line">    <span class="keyword">if</span>(num&lt;=<span class="number">490</span>)&#123;</span><br><span class="line">        fs.readFile(fullPath,(err,data)=&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(err==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> jokes=<span class="built_in">JSON</span>.parse(data);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> randomIndex=<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*jokes.length);</span><br><span class="line">           jokeArr.push(jokes[randomIndex]);</span><br><span class="line">    &#125;</span><br><span class="line">            response.send(&#123;</span><br><span class="line">                num,</span><br><span class="line">                msg:<span class="string">'获取成功'</span>,</span><br><span class="line">                jokes:jokeArr</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//读取失败</span></span><br><span class="line">            response.send(&#123;</span><br><span class="line">                msg:<span class="string">'文件读取失败'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        response.send(<span class="string">'没有那么多'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="post路由"><a href="#post路由" class="headerlink" title="post路由"></a>post路由</h3><ul><li><p>post请求，url和后台函数的对应关系</p></li><li><p>注册的方法和get类似</p></li><li><p>直接通过浏览器的url访问发送时get</p></li><li><p>可以通过postman发请求</p><ul><li>注意<ul><li>get<ul><li>参数写在param</li></ul></li><li>post<ul><li>参数写在body中</li><li>有文件上传选中form-data,没有文件上传选中x-form-urlencoded</li></ul></li></ul></li></ul></li><li><p>自己写ajax设置请求的type为post</p></li><li><p>默认注册的post路由中，无法获取到提交过来的参数</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line">app.post(<span class="string">'/add'</span>,(request,response)=&gt;&#123;</span><br><span class="line">    response.send(<span class="string">'我是post请求'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="post数据获取（普通文本）"><a href="#post数据获取（普通文本）" class="headerlink" title="post数据获取（普通文本）"></a>post数据获取（普通文本）</h3><ul><li><p><code>中间件</code>获取post提交的文本数据<code>request.body</code></p></li><li><p>中间件是一个特殊第三方模块</p></li><li><p>必须结合express才可以使用</p></li><li><p><code>http://www.npmjs.com/package/body-parser</code></p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser=<span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;));</span><br><span class="line">app.post(<span class="string">'/checkUsername'</span>,(request,response)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> username=request.body.name;</span><br><span class="line">    <span class="keyword">const</span> userArr=[<span class="string">'黑寡妇'</span>,<span class="string">'绿巨人'</span>,<span class="string">'金刚'</span>,<span class="string">'葫芦娃'</span>];</span><br><span class="line">    <span class="comment">//判断是否注册过</span></span><br><span class="line">  <span class="comment">//indexof判断数组中元素的索引，存在返回索引，不存在返回-1</span></span><br><span class="line">    <span class="keyword">if</span>(userArr.indexof(username)==<span class="number">-1</span>)&#123;</span><br><span class="line">        response.send(&#123;</span><br><span class="line">            msg:<span class="string">'恭喜你，可以注册'</span>,</span><br><span class="line">            code:<span class="number">200</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        response.send(&#123;</span><br><span class="line">            msg:<span class="string">'很遗憾，已被注册'</span>,</span><br><span class="line">            code:<span class="number">400</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//some传入一个回调函数</span></span><br><span class="line">    <span class="comment">//参数1：数组中的每一项</span></span><br><span class="line">    <span class="comment">//参数2：索引</span></span><br><span class="line">    <span class="comment">//内部返回一个布尔值，任意一个为true,</span></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="post数据获取（文件上传）"><a href="#post数据获取（文件上传）" class="headerlink" title="post数据获取（文件上传）"></a>post数据获取（文件上传）</h3><ul><li><p>需要中间件<code>request.files</code></p></li><li><p><code>http://npmjs.com/package/express-fileupload</code></p></li><li><p><code>request.files</code> 保存所有文件信息</p></li><li><p><code>request.files.xxx</code>获取key为xxx的文件信息</p></li><li><p><code>request.files.xxx.mv(路径，回调函数)把文件移动到某个地方</code></p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fileUpload=<span class="built_in">require</span>(<span class="string">'express-fileUpload'</span>);</span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line">app.use(fileUpload());</span><br><span class="line">app.post(<span class="string">'/upload'</span>,(request,response)=&gt;&#123;</span><br><span class="line">    <span class="comment">//icon属性的文件名</span></span><br><span class="line">    <span class="keyword">const</span> filename=request.files.icon.name;</span><br><span class="line">    <span class="keyword">const</span> filePath=path.join(__dirname,<span class="string">'./files'</span>,filename);</span><br><span class="line">    request.files.icon.mv(filePath,err=&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'上传成功'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    response.send(<span class="string">'/upload'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><ul><li>就是一个特殊的第三方插件</li><li>依赖于express</li><li>中间件是请求和响应之间额外注册的毁掉含糊</li><li>request和response是<code>共享</code>的</li><li>中间件中为request对象额外添加属性</li><li>在后续的回调函数中可以获取到</li><li>中间件可以增加任意个</li><li>next如果不调用，卡住，浏览器接收不到数据</li><li>请求—回调函数1（中间件）–回调函数2（中间件）–&gt;响应</li><li>执行的顺寻从上到下依次执行</li><li>编写的位置<code>路由的前面</code></li></ul><h3 id="node-js模块化-自己写第三方模块"><a href="#node-js模块化-自己写第三方模块" class="headerlink" title="node.js模块化-自己写第三方模块"></a>node.js模块化-自己写第三方模块</h3><ul><li><p><a href="http://commonjs.org" target="_blank" rel="noopener">http://commonjs.org</a></p></li><li><p>导入模块<code>require()</code></p></li><li><p>导出模块module.exports()</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自己写的第三方模块</span></span><br><span class="line"><span class="keyword">const</span> name=<span class="string">'niubi'</span>,</span><br><span class="line">      <span class="built_in">module</span>.exports=&#123;</span><br><span class="line">          name,</span><br><span class="line">          sayHi()&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">'nice to meet you'</span>)；</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用自己写的第三方模块</span></span><br><span class="line"><span class="keyword">const</span> useniubiModule=<span class="built_in">require</span>(<span class="string">'./niubi.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(useniubiModule);</span><br><span class="line">useniubiModule.sayHi();</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>导入模块require</li><li>自己的模块写路径</li><li><code>js可以省略</code></li><li>模块暴露module.exports</li><li>类似自调用函数底部window.xxx=值</li><li>暴露多个，用对象方式</li><li>重复module.exports赋值会把前面的覆盖掉</li><li>抽取模块不需要运行</li><li>导入的时候内部代码会自动解析</li><li>module是关键字，全局变量</li><li>要用哪个属性，就点哪个属性</li></ul></li></ul><h3 id="自己写的计算器模块"><a href="#自己写的计算器模块" class="headerlink" title="自己写的计算器模块"></a>自己写的计算器模块</h3><ul><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自己写的模块</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1-num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1*num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divi</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1/num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    add,</span><br><span class="line">    sub,</span><br><span class="line">    mul,</span><br><span class="line">    divi,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用自己写的第三方模块</span></span><br><span class="line"><span class="keyword">const</span> computer=<span class="built_in">require</span>(<span class="string">'./commputer'</span>);</span><br><span class="line"><span class="keyword">const</span> res=computer.add(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure></li></ul><h3 id="通过自己写中间件设置跨域"><a href="#通过自己写中间件设置跨域" class="headerlink" title="通过自己写中间件设置跨域"></a>通过自己写中间件设置跨域</h3><ul><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自己写模块实现设置允许跨域</span></span><br><span class="line"><span class="built_in">module</span>.exports=<span class="function">(<span class="params">request,response,next</span>)=&gt;</span>&#123;</span><br><span class="line">    response.header(<span class="string">'Access-Control-Allow-Origin'</span>,<span class="string">'*'</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用中间件设置允许跨域</span></span><br><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> myModule=<span class="built_in">require</span>(<span class="string">'./myModule'</span>);</span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line"></span><br><span class="line">app.use(myModule);</span><br></pre></td></tr></table></figure></li></ul><h3 id="常见文件夹名"><a href="#常见文件夹名" class="headerlink" title="常见文件夹名"></a>常见文件夹名</h3><ul><li>utils自己抽取功能模块</li><li>libs下载的第三方模块（自己手动下载的）</li><li>node_modules:npm i模块名 自己手动下载的文件夹 内部保存了第三方模块</li><li>static:静态资源 html css js</li><li>public公共文件（静态资源）</li><li>web页面（静态）</li></ul><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><ul><li><code>ajax</code>请求<code>不同源</code>的接口时候出现</li><li>浏览器为了保护我们帮我们做的一件事情</li><li>当<code>浏览器</code>打开页面，和调用的<code>接口</code>需要同源才可以调用</li></ul><h3 id="浏览器的同源"><a href="#浏览器的同源" class="headerlink" title="浏览器的同源"></a>浏览器的同源</h3><ul><li>url地址的组成：<a href="http://127.0.0.1:3000/list" target="_blank" rel="noopener">http://127.0.0.1:3000/list</a><ul><li>协议：http://</li><li>地址：127.0.0.1</li><li>端口：3000</li></ul></li><li>同源：<ul><li>浏览器打开的页面地址<code>http://127.0.0.1:5500/02-cross-origin/index.html</code></li><li>页面ajax调用接口请求的地址<code>http://127.0.0.1:3000/list</code></li><li>协议：地址，端口全部相同，称之为<code>同源</code><ul><li>如果页面的地址和接口地址同源，浏览器就不会做任何的限制</li><li>可以自由访问</li></ul></li><li>协议，地址，端口任何一个不相同，称之为<code>不同源</code><ul><li>浏览器是禁止访问的</li></ul></li><li>实际工作中，不可避免的页面地址和接口地址绝对同源<ul><li>常用的两种解决方案<ul><li>jsonp:曾经最多，现在越来越少，面试经常问</li><li>cors：目前用的最多的</li></ul></li></ul></li><li>往不同源的接口发送请求：跨域</li></ul></li></ul><h3 id="跨域方案-jsonp"><a href="#跨域方案-jsonp" class="headerlink" title="跨域方案-jsonp"></a>跨域方案-jsonp</h3><ul><li><p>民间的解决方案</p></li><li><p>实验一方式：</p><ul><li><p>前端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:,</span><br><span class="line">    type:<span class="string">'get'</span>,<span class="comment">//必须是get</span></span><br><span class="line">    dataType:<span class="string">'jsonp'</span>,<span class="comment">//需要设置</span></span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">backData</span>)</span>&#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>后端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.jsonp(&#123;<span class="attr">key</span>:value,<span class="attr">key1</span>:value1&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line">app.get(<span class="string">'/list'</span>,(request,response)=&gt;&#123;</span><br><span class="line">    response.jsonp(&#123;</span><br><span class="line">        msg:<span class="string">'jsonp测试'</span>,</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5C%E5%88%98%E6%99%93%E6%85%A7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1572269989348.png" alt="1572269989348"></p></li><li><p>jsonp原理：</p><ul><li>script标签的src属性可以发送请求，同时没有同源限制</li><li>和Ajax一点关系没有<ul><li>到netWork中选中xhr分类，什么都看不到</li></ul></li><li>本质是动态创建了一个script标签添加到页面的顶部<ul><li>src设置的：接口地址+发送的数据+callback=xxx</li></ul></li><li>请求成功之后会被自动移除</li><li>服务器返回：函数的调用，函数名({对象})</li><li>内容返回到浏览器会被解析为js,调用定义好的函数，传入参数jquery的jsonp</li></ul></li><li><p>自己模拟的jsonp实现过程</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">(backData)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(backData);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://192.168.156.91:3000/jsonpApi?callback=doSomething"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//函数的调用</span></span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>缺点：</p><ul><li>不支持post请求</li><li>数据大的话，搞不定，文件上传也搞不定</li></ul></li><li><p>优点：</p><ul><li>兼容性超级好</li></ul></li></ul><h3 id="跨域方案-CORS"><a href="#跨域方案-CORS" class="headerlink" title="跨域方案-CORS"></a>跨域方案-CORS</h3><ul><li><p>CORS：</p><ul><li>cross :跨</li><li>origin:域</li><li>resource:资源</li><li>sharing:共享</li></ul></li><li><p>html5中推出的新标准，低版本浏览器不支持ie</p></li><li><p>前端：什么事情也不用做</p></li><li><p>后端：设置允许跨域</p><ul><li>在响应数据之前设置允许header</li><li><code>response.header(&#39;Access-Control-Allow-Origin&#39;,&#39;*&#39;)</code></li></ul></li><li><p>CORS原理：</p><ul><li>浏览器能够识别(‘Access-Control-Allow-Origin’,’*’)这个header</li><li>请求发给服务器之后</li><li>服务器翻译的响应头中有一个允许标记</li><li>浏览器人为服务器运行跨域访问，没有了跨域错误</li></ul></li><li><p>缺点：</p><ul><li>兼容性较jsonp差</li><li>微软已经放弃了xp,ie5,ie6基本没人使用</li></ul></li><li><p>优点：</p><ul><li>get和post都支持</li><li>前端什么也不用干</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line">app.post(<span class="string">'/add'</span>,(request,response)=&gt;&#123;</span><br><span class="line">    response.header(<span class="string">'Access-Control-Allow-Origin'</span>,<span class="string">'*'</span>);</span><br><span class="line">    response.send(<span class="string">'/add'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="中间件设置跨域"><a href="#中间件设置跨域" class="headerlink" title="中间件设置跨域"></a>中间件设置跨域</h3><ul><li><p>请求和响应之间额外注册的一个回调函数</p></li><li><p>在这个回调函数中统一设置允许跨域的那个头</p></li><li><p>每次进行ajax请求接口，会先request,然后执行中间件的会调函数，最后执行response</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">request,response,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//设置允许跨域</span></span><br><span class="line">    response.header(<span class="string">'Acccess-Control-Allow-Origin'</span>,<span class="string">'*'</span>);</span><br><span class="line">    <span class="comment">//调用next</span></span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="补充vscode主题变色"><a href="#补充vscode主题变色" class="headerlink" title="-补充vscode主题变色"></a>-补充vscode主题变色</h3><ul><li>下载扩展Dark-Material</li></ul><h3 id="nodemon-自动重新运行"><a href="#nodemon-自动重新运行" class="headerlink" title="nodemon-自动重新运行"></a>nodemon-自动重新运行</h3><ul><li>node的一个全局模块</li><li>当做一个没有图像化界面的软件</li><li>安装之后可以自动检测文件修改，自动重新运行</li><li>任意位置执行 <code>npm i nodemon -g</code></li><li>安装完毕之后<ul><li>node xxx 换成nodemon xxx</li></ul></li></ul><h2 id="ES6-基本概念"><a href="#ES6-基本概念" class="headerlink" title="ES6-基本概念"></a>ES6-基本概念</h2><ul><li>2015年推出新的语法规范ECMAScript</li></ul><h3 id="ES6-let"><a href="#ES6-let" class="headerlink" title="ES6-let"></a>ES6-let</h3><ul><li><p>变量声明</p></li><li><p>与var比较：</p><ul><li>没有变量提升</li><li>有块级作用域</li><li>不能重复声明（但是可以重新赋值）</li><li>替代var</li><li>别再写var 用let</li></ul></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名=值</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本使用</span></span><br><span class="line"><span class="keyword">let</span> name=<span class="string">'jack'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);<span class="comment">//jack</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重新赋值</span></span><br><span class="line">name=<span class="string">'rose'</span>;<span class="comment">//可以的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//变量声明不能提升</span></span><br><span class="line"><span class="built_in">console</span>.log(name);<span class="comment">//报错</span></span><br><span class="line"><span class="keyword">let</span> name=<span class="string">'jack'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//块级作用域</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> skill=<span class="string">'跳舞'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(skill);<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不能重新声明</span></span><br><span class="line"><span class="keyword">let</span> skill=<span class="string">'不如跳舞'</span>;</span><br><span class="line"><span class="keyword">let</span> skill=<span class="string">'跳什么'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(skill);<span class="comment">//报错</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="ES6-const"><a href="#ES6-const" class="headerlink" title="ES6-const"></a>ES6-const</h3><ul><li><p>常量声明</p></li><li><p>与var比较：</p><ul><li>没有变量提升</li><li>有块级作用域</li><li>不能重复声明（一般不能重复赋值）</li><li>必须声明时赋值</li><li>能用const 不用let 能用let不用var</li><li>声明之后不能改</li></ul></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本使用</span></span><br><span class="line"><span class="keyword">const</span> friend=<span class="string">'乌索普'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(friend);<span class="comment">//乌索普</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//变量不能提升</span></span><br><span class="line"><span class="built_in">console</span>.log(friend);</span><br><span class="line"><span class="keyword">const</span> friend=<span class="string">'jack'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有块级作用域</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> friend=<span class="string">'jack'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(friend);<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不能重复声明</span></span><br><span class="line"><span class="keyword">const</span> vegetable=<span class="string">'西兰花'</span>;</span><br><span class="line"><span class="keyword">const</span> vegetable=<span class="string">'westblueflower'</span>;<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不能修改</span></span><br><span class="line"><span class="keyword">const</span> vegetable=<span class="string">'西兰花'</span>;</span><br><span class="line">vegetable=<span class="string">'westblueflower'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须声明时赋值</span></span><br><span class="line"><span class="keyword">const</span> vegetable;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="ES6-对象的属性和方法简化写法"><a href="#ES6-对象的属性和方法简化写法" class="headerlink" title="ES6-对象的属性和方法简化写法"></a>ES6-对象的属性和方法简化写法</h3><ul><li><p>更简单的属性赋值：</p></li><li><p>前提：<code>属性名和值的名字相同</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name=<span class="string">'jack'</span>;</span><br><span class="line"><span class="keyword">const</span> person=&#123;</span><br><span class="line">    <span class="comment">//属性名和值的名字相同</span></span><br><span class="line">    <span class="comment">//name:name 原来的写法</span></span><br><span class="line">    name,<span class="comment">//ES6写法</span></span><br><span class="line">    <span class="comment">//jump:function()&#123;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//ES6写法</span></span><br><span class="line">    jump()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ES-6-模板字符串"><a href="#ES-6-模板字符串" class="headerlink" title="ES-6-模板字符串"></a>ES-6-模板字符串</h3><ul><li><p>轻量级的模板引擎，原生支持，不用导包</p></li><li><p>定义的时候使用`</p></li><li><p>挖坑的语法${表达式}</p></li><li><p>坑中必须有东西</p></li><li><p>可以换行 简单模板生成直接使用 模板字符串即可</p></li><li><p>复杂的还是模板引擎</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> smoke=<span class="string">'黑烟'</span>;</span><br><span class="line"><span class="keyword">const</span> data=&#123;</span><br><span class="line">    name:<span class="string">'李白'</span>,</span><br><span class="line">    dynasty:<span class="string">'唐'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> temStr=<span class="string">`</span></span><br><span class="line"><span class="string">望庐山瀑布 <span class="subst">$&#123;data.name&#125;</span> 来自于&#123;data.dynasty&#125;</span></span><br><span class="line"><span class="string">日照香炉生<span class="subst">$&#123;smoke&#125;</span></span></span><br><span class="line"><span class="string">遥看瀑布挂前川</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(temStr);</span><br></pre></td></tr></table></figure></li><li><p>与模板引擎区别是：对象调用省略对象(分情况，有时候嵌套的内部也是对象还是需要对象.属性名)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123;$value&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="知识点一"><a href="#知识点一" class="headerlink" title="知识点一"></a>知识点一</h3><ul><li>输入node回车 按两次ctrl+c，退出</li><li>对象的属性和方法获取语法：还是对象.属性或者对象.方法()</li><li>模板字符串的使用</li></ul><h3 id="ES6-函数默认值"><a href="#ES6-函数默认值" class="headerlink" title="ES6-函数默认值"></a>ES6-函数默认值</h3><ul><li><p>早期函数不传递参数，参数有一个默认值是undefined</p></li><li><p>早期通过短路运算，实现默认值的设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name,skill</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    name=name||<span class="string">'路飞'</span>;</span><br><span class="line">    skill=skill||<span class="string">'橡胶果实'</span>;</span><br><span class="line">&#125;</span><br><span class="line">sayHi();</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>ES6中的默认值</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name=<span class="string">'路飞'</span>,skill=<span class="string">'橡胶果实'</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name,skill);</span><br><span class="line">&#125;</span><br><span class="line">sayHi();<span class="comment">//路飞 橡胶果实</span></span><br><span class="line">sayHi(<span class="string">'索隆'</span>,<span class="string">'迷路'</span>);<span class="comment">//索隆 迷路</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="ES6-对象解构"><a href="#ES6-对象解构" class="headerlink" title="ES6-对象解构"></a>ES6-对象解构</h3><ul><li><p>更方便的对象属性取值</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person=&#123;</span><br><span class="line">    name:<span class="string">'时间之灵'</span>,</span><br><span class="line">    desc:<span class="string">'美食'</span>,</span><br><span class="line">    spec:<span class="string">'食物好吃'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//之前获取方式</span></span><br><span class="line"><span class="keyword">const</span> name=person.name;</span><br><span class="line"><span class="keyword">const</span> desc=person.desc;</span><br><span class="line"><span class="keyword">const</span> spec=person.spec;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6简写</span></span><br><span class="line"><span class="comment">//快速获取对象的属性</span></span><br><span class="line"><span class="comment">//需要和对象的属性名相同</span></span><br><span class="line"><span class="keyword">const</span> &#123;name,desc,spec&#125;=person;</span><br><span class="line"><span class="comment">//没有返回undefined</span></span><br><span class="line"><span class="keyword">const</span> &#123;skill&#125;=person;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ES6-对象解构实际应用"><a href="#ES6-对象解构实际应用" class="headerlink" title="ES6-对象解构实际应用"></a>ES6-对象解构实际应用</h3><h4 id="结合函数用"><a href="#结合函数用" class="headerlink" title="结合函数用"></a>结合函数用</h4><ul><li><p>函数的参数进行结构</p></li><li><p>提示</p></li><li><p>实际调用时会更多的提示</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFoods</span>(<span class="params">food1,food2,food3,food4</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES6写法：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFoods</span>(<span class="params">&#123;food1,food2,food3,food4&#125;</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">getFoods(&#123;</span><br><span class="line">    food1:<span class="string">'西兰花炒蛋'</span>,</span><br><span class="line">    food2:<span class="string">'西红柿炒蛋'</span>,</span><br><span class="line">    food3:<span class="string">'猪肉炒蛋'</span>,</span><br><span class="line">    food4:<span class="string">'蛋炒西兰花'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数参数解构结合默认值"><a href="#函数参数解构结合默认值" class="headerlink" title="函数参数解构结合默认值"></a>函数参数解构结合默认值</h4><ul><li><p>结合默认值</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFoods</span>(<span class="params">&#123;food1=<span class="string">'西兰花炒蛋'</span>,food2=<span class="string">'蛋炒饭'</span>&#125;</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">getFoods(&#123;&#125;);<span class="comment">//不传使用默认值</span></span><br><span class="line">getFoods(&#123;</span><br><span class="line">    food2:<span class="string">'黄瓜炒鸡蛋'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="ES6-数组解构"><a href="#ES6-数组解构" class="headerlink" title="ES6-数组解构"></a>ES6-数组解构</h3><ul><li><p>获取顺序和数组元素对应关系一致</p></li><li><p>数组大部分时候都是通过下标获取某一个</p></li><li><p>数组的结果用的不多，了解即可</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cartoonArr=[<span class="string">'喜羊羊'</span>,<span class="string">'葫芦娃'</span>,<span class="string">'灰太狼'</span>,<span class="string">'天线宝宝'</span>];</span><br><span class="line"><span class="comment">//取值</span></span><br><span class="line"><span class="keyword">const</span> c1=cartoonArr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> c2=cartoonArr[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(c1,c2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6取值</span></span><br><span class="line"><span class="keyword">const</span> [c1,c2,c3,c4]=cartoonArr;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ES6-对象展开"><a href="#ES6-对象展开" class="headerlink" title="ES6-对象展开"></a>ES6-对象展开</h3><ul><li><p>结合对象使用</p></li><li><p><code>写在前面的同名的属性会被覆盖</code></p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person=&#123;</span><br><span class="line">    skill:<span class="string">'跳水'</span>,</span><br><span class="line">    hobby:<span class="string">'抗冻'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> student=&#123;</span><br><span class="line">    skill:<span class="string">'学习'</span>,</span><br><span class="line">    hobby:<span class="string">'学习使我快乐'</span>,</span><br><span class="line">    sleep:<span class="string">'呼噜噜'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> son=&#123;</span><br><span class="line">    <span class="comment">//写在前面的同名的属性会被覆盖</span></span><br><span class="line">    skill:<span class="string">'游泳'</span>,</span><br><span class="line">    ...person,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(son.skill);<span class="comment">//跳水</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="ES6-数组展开"><a href="#ES6-数组展开" class="headerlink" title="ES6-数组展开"></a>ES6-数组展开</h3><ul><li><p>结合数组使用</p></li><li><p><code>一直在后面追加</code></p></li><li><p><code>数组不会出现覆盖问题，索引依次靠后</code></p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vegetable=[<span class="string">'西兰花'</span>,<span class="string">'西红柿'</span>,<span class="string">'苦瓜'</span>,<span class="string">'黄瓜'</span>];</span><br><span class="line"><span class="keyword">const</span> meats=[<span class="string">'牛肉'</span>,<span class="string">'羊肉'</span>,<span class="string">'冷鲜肉'</span>];</span><br><span class="line"><span class="keyword">const</span> foods=[...vegetable,...meats];</span><br></pre></td></tr></table></figure></li></ul><h3 id="ES6-箭头函数"><a href="#ES6-箭头函数" class="headerlink" title="ES6-箭头函数"></a>ES6-箭头函数</h3><ul><li><p>箭头函数书写步骤：</p><ul><li>省略function 变为=&gt;</li><li>如果形参只有一个，可以省略小括号</li><li>如果函数体只有一行，可以省略大括号</li><li>如果函数体只有一行，并且有返回值<ul><li>省略大括号的同时，必须省略return</li></ul></li></ul></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数 无参数 无返回值的函数</span></span><br><span class="line"><span class="keyword">const</span> func1=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'函数'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES6写法:</span></span><br><span class="line"><span class="keyword">const</span> func1=<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'函数'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//有一个参数 无返回值的函数</span></span><br><span class="line"><span class="keyword">const</span> func2=<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name+<span class="string">'你好吗'</span>);</span><br><span class="line">&#125;</span><br><span class="line">func2(<span class="string">'刘晓慧'</span>);;</span><br><span class="line"><span class="comment">//ES6写法：</span></span><br><span class="line"><span class="keyword">const</span> func2=<span class="function"><span class="params">name</span>=&gt;</span><span class="built_in">console</span>.log(name+<span class="string">'你好吗'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//有一个参数 有一个返回值</span></span><br><span class="line"><span class="keyword">const</span> func3=<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name+<span class="string">'奥哈有'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES6写法：</span></span><br><span class="line"><span class="keyword">const</span> func3=<span class="function"><span class="params">name</span>=&gt;</span>name+<span class="string">'奥哈有'</span>;</span><br><span class="line"><span class="keyword">var</span> res=func3(<span class="string">'我是'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数有多个 函数体有多行的函数</span></span><br><span class="line"><span class="keyword">const</span> func4=<span class="function"><span class="keyword">function</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'孤独的天才'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(name+<span class="string">'是吗'</span>+age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6写法</span></span><br><span class="line"><span class="keyword">const</span> func4=<span class="function">(<span class="params">name,age</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'孤独的天才'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(name+<span class="string">'是吗'</span>+age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ES6-箭头函数中的this"><a href="#ES6-箭头函数中的this" class="headerlink" title="ES6-箭头函数中的this"></a>ES6-箭头函数中的this</h3><ul><li><p>箭头函数中的this，在创建时就确定了，是上下文（和他平级的环境中）的this</p></li><li><p>可以通过babel的工具把高级的js代码翻译成低版本的js,查看内部的代码实现的细节</p></li><li><p>babel传送门（babeljs.cn）</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person=&#123;</span><br><span class="line">    name:<span class="string">'海尔兄弟'</span>,</span><br><span class="line">    skill:<span class="string">'抗冻'</span>,</span><br><span class="line">    jump()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//调用者是谁this就是谁</span></span><br><span class="line">        <span class="keyword">const</span> _this=<span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">//window.setTimeout(function()&#123;</span></span><br><span class="line">          <span class="comment">//  console.log(this);//window</span></span><br><span class="line">          <span class="comment">//  console.log(_this);//老方法 _this的jump方法当前调用者是谁_this就是谁</span></span><br><span class="line">       <span class="comment">// &#125;)</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//是当前调用jump的调用者</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">person.jump();</span><br></pre></td></tr></table></figure></li></ul><h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><ul><li>多个终端区别：<ul><li>终端可以理解为是一个没有界面的软件</li><li>通过输入内容让他干什么事</li><li>cmd 微软 早期推出 功能最少 不太好用</li><li>git bash here 安装git之后 自带 功能强大 支持很多cmd没有命令 linux的命令也基本上都支持</li><li>power shell微软后续推出的一个终端，功能牛逼很多，但是还是比git bash here支持的命令少一些</li></ul></li></ul><h2 id="Mysql-数据库"><a href="#Mysql-数据库" class="headerlink" title="Mysql-数据库"></a>Mysql-数据库</h2><ul><li>分类<ul><li>关系型数据库<ul><li>类似于table表格的形式保存数据</li><li>使用sql的语句操纵数据</li><li>常见的有mysql,oracle,mssql……</li></ul></li><li>非关系型数据库<ul><li>类似于js对象的形式保存数据</li><li>操纵对象的形式操纵数据</li><li>常见的有：Mongodb,Redis……</li></ul></li></ul></li><li>数据库管理员：DBA</li><li>数据库服务器</li></ul><h3 id="数据库-基本使用"><a href="#数据库-基本使用" class="headerlink" title="数据库-基本使用"></a>数据库-基本使用</h3><ul><li>建库</li><li>建表</li><li>建字段</li></ul><h3 id="sql语句-增"><a href="#sql语句-增" class="headerlink" title="sql语句-增"></a>sql语句-增</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段<span class="number">1</span>，字段<span class="number">2</span>……) <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2</span>，……)</span><br></pre></td></tr></table></figure><h3 id="sql语句-删"><a href="#sql语句-删" class="headerlink" title="sql语句-删"></a>sql语句-删</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span> 删除一条</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">3</span> 删除一定范围</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 不跟条件全部删除</span><br><span class="line">必须给条件，否则全部删除</span><br></pre></td></tr></table></figure><h3 id="sql语句-改"><a href="#sql语句-改" class="headerlink" title="sql语句-改"></a>sql语句-改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段<span class="number">1</span>=值<span class="number">1</span>，字段<span class="number">2</span>=值<span class="number">2</span>…… <span class="keyword">where</span>条件</span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> username=<span class="string">'赵四'</span>,skill=<span class="string">'跳舞'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> username=<span class="string">'赵四'</span>,skill=<span class="string">'跳跳舞'</span> <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">3</span></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> username=<span class="string">'赵四'</span>,skill=<span class="string">'跳舞'</span></span><br><span class="line">条件不给 全部更改</span><br></pre></td></tr></table></figure><h3 id="sql语句-查"><a href="#sql语句-查" class="headerlink" title="sql语句-查"></a>sql语句-查</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line">//精确查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line">//范围查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">2</span></span><br><span class="line">//全部查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure><h3 id="mysql模块使用"><a href="#mysql模块使用" class="headerlink" title="mysql模块使用"></a>mysql模块使用</h3><ul><li><p><code>http://www.npmjs.com/package/mysql</code></p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">const</span> mysql=<span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="comment">//设置数据库的连接信息</span></span><br><span class="line"><span class="keyword">const</span> connection=mysql.createConnection(&#123;</span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    host:<span class="string">'localhost'</span>,</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    user:<span class="string">'root'</span>,</span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    password:<span class="string">'root'</span>,</span><br><span class="line">    <span class="comment">//库的名字</span></span><br><span class="line">    database:<span class="string">'db88'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//链接数据库</span></span><br><span class="line">connection.connect();</span><br><span class="line"><span class="comment">//参数1：执行的sql语句</span></span><br><span class="line"><span class="comment">//参数2 执行完毕的回调函数</span></span><br><span class="line">connection.query(<span class="string">'select * from user'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//错误信息 如果有的话</span></span><br><span class="line">    <span class="comment">//执行的结果</span></span><br><span class="line">    <span class="comment">//表示的字段信息 用的不多</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//关闭数据库连接</span></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure></li></ul><h3 id="mysql-ithm模块使用"><a href="#mysql-ithm模块使用" class="headerlink" title="mysql-ithm模块使用"></a>mysql-ithm模块使用</h3><ul><li><p><code>http://www.npmjs.com/package/mysql-ithm</code></p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入模块</span></span><br><span class="line"><span class="keyword">const</span> mysql=<span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">const</span> hm=<span class="built_in">require</span>(<span class="string">'mysql-ithm'</span>);</span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="comment">//如果数据库存在则连接，不存在则自动创建数据库</span></span><br><span class="line">hm.connect(&#123;</span><br><span class="line">    host:<span class="string">'localhost'</span>,</span><br><span class="line">    port:<span class="string">'3306'</span>,</span><br><span class="line">    user:<span class="string">'root'</span>,</span><br><span class="line">    password:<span class="string">'root'</span>,</span><br><span class="line">    database:<span class="string">'hm'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//创建Model(表格模型，负责增删改查)</span></span><br><span class="line"><span class="comment">//表格名字叫student</span></span><br><span class="line"><span class="keyword">let</span> studentModel = hm.model(<span class="string">'student'</span>,&#123;</span><br><span class="line">    <span class="comment">// 字段</span></span><br><span class="line">    name:<span class="built_in">String</span>,</span><br><span class="line">    age:<span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 技能</span></span><br><span class="line">    skill:<span class="built_in">String</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.调用API 添加数据</span></span><br><span class="line">studentModel.insert(&#123;<span class="attr">name</span>:<span class="string">'面向对象'</span>，age:<span class="number">18</span>,<span class="attr">skill</span>:<span class="string">'创建对象'</span>&#125;,(err,results)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);<span class="comment">//错误信息</span></span><br><span class="line">    <span class="built_in">console</span>.log(results)<span class="comment">//结果</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//数据查询</span></span><br><span class="line">studentModel.find(<span class="function">(<span class="params">err,results</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//数据修改</span></span><br><span class="line">studentModel.update(&#123;<span class="attr">name</span>:<span class="string">'李四'</span>&#125;,(err,results)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//数据删除</span></span><br><span class="line">studentModel.delete(<span class="function">(<span class="params">err,results</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>小知识：截图神器：传送门 <a href="http://www.snipaste.com" target="_blank" rel="noopener">http://www.snipaste.com</a></p><ul><li>取色：F1截取 按c取色 按shift切换颜色格式</li><li>改粗细 滚轮 1,2</li><li>还原截图：f3</li><li>订图：开始普及</li></ul></blockquote></li></ul><h2 id="chrome允许跨域"><a href="#chrome允许跨域" class="headerlink" title="chrome允许跨域"></a>chrome允许跨域</h2><p>详情请参考网址：<a href="https://www.cnblogs.com/laden666666/p/5544572.html" target="_blank" rel="noopener">https://www.cnblogs.com/laden666666/p/5544572.html</a></p><h2 id="英雄管理项目"><a href="#英雄管理项目" class="headerlink" title="英雄管理项目"></a>英雄管理项目</h2><h3 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h3><ul><li>开发方式：<ul><li>后端：<ul><li>照着接口文档</li><li>写接口，接收数据，接收文件，增删改查数据库，翻译结果</li></ul></li><li>前端：<ul><li>写静态</li><li>照着接口文档</li><li>调接口</li></ul></li></ul></li></ul><h3 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h3><ul><li>基地址：<a href="http://127.0.0.1:3000" target="_blank" rel="noopener">http://127.0.0.1:3000</a></li><li>状态码：<ul><li>200 请求成功</li><li>401 用户名已存在或用户名错误</li><li>402 密码错误或验证码错误</li><li>500 服务器内部错误</li><li>302 服务器重定向</li></ul></li></ul><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p>步骤:</p><blockquote><p>1.新建文件夹：heroManage</p><p>2.在文件夹中打开终端 <code>npm init -y</code></p><p>3.创建index.js</p><p>4.下包 <code>npm i express</code>  <code>npm i mysql-ithm mysql</code></p><p>5.c+v express的基本结构</p><p>6.c+v 今天要写的路由</p><p>7.为了后续观察数据，此处英雄列表采用随机数据生成，后面一一介绍</p><p>8.创建两个表，分别是hero和user两张表</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">//1.导入模块</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">const</span> hm = <span class="built_in">require</span>(<span class="string">'mysql-ithm'</span>);</span><br><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> fileUpload = <span class="built_in">require</span>(<span class="string">'express-fileupload'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> svgCaptcha = <span class="built_in">require</span>(<span class="string">'svg-captcha'</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'./web'</span>));</span><br><span class="line">app.use(express.static(<span class="string">'./uploads'</span>));</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(fileUpload());</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    secret: <span class="string">'keyboard cat'</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">  &#125;))</span><br><span class="line">app.use(<span class="string">'/hero/*'</span>,(req,res,next)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.session.userInfo)</span><br><span class="line">    &#123;</span><br><span class="line">        res.send(&#123;</span><br><span class="line">            code:<span class="number">500</span>,</span><br><span class="line">            msg:<span class="string">'没有凭证'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//2.连接数据库</span></span><br><span class="line"><span class="comment">//如果数据库存在则连接，不存在则会自动创建数据库</span></span><br><span class="line">hm.connect(&#123;</span><br><span class="line">    host: <span class="string">'localhost'</span>,<span class="comment">//数据库地址</span></span><br><span class="line">    port: <span class="string">'3306'</span>,</span><br><span class="line">    user: <span class="string">'root'</span>,<span class="comment">//用户名，没有可不填</span></span><br><span class="line">    password: <span class="string">'root'</span>,<span class="comment">//密码，没有可不填</span></span><br><span class="line">    database: <span class="string">'herolast'</span><span class="comment">//数据库名称</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.创建Model(表格模型：负责增删改查)</span></span><br><span class="line"><span class="comment">//如果table表格存在则连接，不存在则自动创建</span></span><br><span class="line"><span class="keyword">let</span> heroModel = hm.model(<span class="string">'hero'</span>, &#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    skill: <span class="built_in">String</span>,</span><br><span class="line">    icon: <span class="built_in">String</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> userModel = hm.model(<span class="string">'user'</span>, &#123;</span><br><span class="line">    username: <span class="built_in">String</span>,</span><br><span class="line">    password: <span class="built_in">String</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> captchaText=<span class="string">''</span>;</span><br><span class="line">app.get(<span class="string">'/user/captcha'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> captcha = svgCaptcha.create();</span><br><span class="line">    <span class="comment">// req.session.captcha = captcha.text;</span></span><br><span class="line">    captchaText=captcha.text;</span><br><span class="line">    <span class="built_in">console</span>.log(captchaText);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    res.type(<span class="string">'svg'</span>);</span><br><span class="line">    res.status(<span class="number">200</span>).send(captcha.data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="英雄列表"><a href="#英雄列表" class="headerlink" title="英雄列表"></a>英雄列表</h3><table><thead><tr><th align="left">接口名称</th><th align="center">接口类型</th><th>接口参数</th><th>返回数据</th></tr></thead><tbody><tr><td align="left">/hero/list</td><td align="center">get</td><td>无</td><td>{hero:[英雄列表]}</td></tr></tbody></table><ul><li><p>查询所有数据 heroModel.find()，查询完毕之后返回的是数组</p></li><li><p>通过判断查询过来的数据，进行渲染到页面上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/hero/list'</span>, (req, res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    heroModel.find(<span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(results);</span></span><br><span class="line">        <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">            <span class="keyword">if</span> (results.length == <span class="number">0</span>) &#123;</span><br><span class="line">                res.send(&#123;</span><br><span class="line">                    msg: <span class="string">'目前没有什么消息，等待更新'</span>,</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.send(&#123;</span><br><span class="line">                    code: <span class="number">200</span>,</span><br><span class="line">                    hero: results,</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                code: <span class="number">500</span>,</span><br><span class="line">                msg: <span class="string">'服务器内部错误'</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// res.send('/hero/lis');</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="查询英雄详情"><a href="#查询英雄详情" class="headerlink" title="查询英雄详情"></a>查询英雄详情</h3><ul><li>点击详情按钮进行显示获取该英雄的详细信息</li></ul><table><thead><tr><th align="left">接口名称</th><th align="center">接口类型</th><th>接口参数</th><th>返回数据</th></tr></thead><tbody><tr><td align="left">/hero/info</td><td align="center"></td><td>无</td><td>{hero:[英雄列表]}</td></tr></tbody></table><ul><li>通过点击编辑按钮，进行跳转到编辑页面，为了获取指定英雄的详细信息，进行设置<code>url传递参数?id=id值</code></li><li>接口中获取get传递的参数，通过<code>req.query.id</code>进行获取传递的参数</li><li>前端：进入编辑页面，因为后面的编辑接口还需要传递当前修改的英雄信息的id,所以还需要把id存在一个隐藏域里，作为参数进行上传，以免报错</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定英雄详情</span></span><br><span class="line">app.get(<span class="string">'/hero/info'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> id = req.query.id;</span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">    heroModel.find(<span class="string">`id=<span class="subst">$&#123;id&#125;</span>`</span>, (err, results) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!err) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (results.length != <span class="number">0</span>) &#123;</span><br><span class="line">                res.send(&#123;</span><br><span class="line">                    code: <span class="number">200</span>,</span><br><span class="line">                    data: results[<span class="number">0</span>],</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.send(&#123;</span><br><span class="line">                    msg: <span class="string">'你这输入的是啥，完全不懂！'</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                code: <span class="number">500</span>,</span><br><span class="line">                msg: <span class="string">'不是我的错'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="新增英雄"><a href="#新增英雄" class="headerlink" title="新增英雄"></a>新增英雄</h3><p>步骤：</p><blockquote><p>1.因为涉及到数据主动提交及文件的上传，需要进行下包</p><p>2.终端输入<code>npm i body-parser express-fileupload</code></p><p>3.对应代码进行c+v</p><p>4.因为涉及到文件的上传，所以需要定义一个文件夹用来存储你上传的文件<code>uploads</code></p><p>5.数据库更新heroModel.insert()</p></blockquote><table><thead><tr><th align="left">接口名称</th><th align="center">接口类型</th><th>接口参数</th><th>返回数据</th></tr></thead><tbody><tr><td align="left">/hero/add</td><td align="center">post</td><td>formdata</td><td>{code:200,msg:’新增成功’}</td></tr></tbody></table><ul><li><p>post获取数据</p><ul><li>文本通过req.body.username</li><li>文件通过req.files.icon.name</li></ul></li><li><p>前端：注意调用接口的时候，设置<code>processData:false,contentType:false</code></p></li><li><p>前端：注意上传的表单的name属性和接口接收的参数的名称一致，以免造成错误</p></li><li><p>文件上传成功后进行移动<code>req.files.icon.mv(path.join(__dirname,icon),(err))</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增英雄</span></span><br><span class="line">app.post(<span class="string">'/hero/add'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> name = req.body.name;</span><br><span class="line">    <span class="keyword">const</span> skill = req.body.skill;</span><br><span class="line">    <span class="built_in">console</span>.log(req.files);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> icon = req.files.icon.name;</span><br><span class="line">    <span class="built_in">console</span>.log(icon);</span><br><span class="line"></span><br><span class="line">    req.files.icon.mv(path.join(__dirname, <span class="string">'./uploads'</span>, icon), err =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'上传成功！'</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    heroModel.insert(&#123; name, skill, icon &#125;, (err, results) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                code: <span class="number">200</span>,</span><br><span class="line">                msg: <span class="string">'新增成功！'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                code: <span class="number">500</span>,</span><br><span class="line">                msg: <span class="string">'不是我的错'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="英雄删除"><a href="#英雄删除" class="headerlink" title="英雄删除"></a>英雄删除</h3><table><thead><tr><th align="left">接口名称</th><th align="center">接口类型</th><th>接口参数</th><th>返回数据</th></tr></thead><tbody><tr><td align="left">/hero/delete</td><td align="center">post</td><td>id</td><td>{code:200,msg:’删除成功’}</td></tr></tbody></table><ul><li><p>传递的参数id,在一开始渲染英雄列表的时候，作为自定义属性放在td父元素身上</p></li><li><p>前端：点击删除按钮，采用事件委托注册点击事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除英雄</span></span><br><span class="line">app.post(<span class="string">'/hero/delete'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> id = req.body.id;</span><br><span class="line">    heroModel.delete(<span class="string">`id=<span class="subst">$&#123;id&#125;</span>`</span>, (err, results) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                code: <span class="number">200</span>,</span><br><span class="line">                msg: <span class="string">'这就删了'</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                code: <span class="number">500</span>,</span><br><span class="line">                msg: <span class="string">'不是我的错'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="编辑英雄"><a href="#编辑英雄" class="headerlink" title="编辑英雄"></a>编辑英雄</h3><table><thead><tr><th align="left">接口名称</th><th align="center">接口类型</th><th>接口参数</th><th>返回数据</th></tr></thead><tbody><tr><td align="left">/hero/update</td><td align="center">post</td><td>formdata</td><td>{code:200,msg:’编辑成功’}</td></tr></tbody></table><ul><li>此处和添加差不多</li><li>更新数据库heroModel.update(<code>id=${id}</code>,{name……},(err,results))</li><li>前端：注意调用接口时设置<code>contentType:false,processData:false</code></li><li>前端：注意上传的表单的name属性和接口接收的参数名称保持一致，以免产生错误</li><li>前端：点击编辑按钮，采用事件委托进行注册</li><li>在接口中自己添加了，当用户不更改文件的时候，仍然为一开始的文件，在内部做了一个判断，进行实现逻辑<ul><li>因为用户不更改文件，也就意味着<code>document.querySelector(&#39;fileInput&#39;).files[0]</code>不存在，所以当点击上传的时候，后端接收req.files.icon.name也就不存在，所以就会导致服务器内部出错，所以做出了处理</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编辑英雄</span></span><br><span class="line">app.post(<span class="string">'/hero/update'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 直接图片上传，如果不改则会报错 因为默认打开编辑页面 文件域是没有东西的</span></span><br><span class="line">    <span class="comment">// 设置不改有默认值 </span></span><br><span class="line">    <span class="comment">// 只要修改就没问题</span></span><br><span class="line">    <span class="keyword">const</span> name = req.body.name;</span><br><span class="line">    <span class="keyword">const</span> skill = req.body.skill;</span><br><span class="line">    <span class="keyword">const</span> id = req.body.id;</span><br><span class="line">    <span class="keyword">if</span> (req.files) &#123;</span><br><span class="line">        <span class="keyword">const</span> icon = req.files.icon.name;</span><br><span class="line">        req.files.icon.mv(path.join(__dirname, <span class="string">'./uploads'</span>, icon), err =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'上传成功！'</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// icon='http://localhost:3000/'+icon;</span></span><br><span class="line">        heroModel.update(<span class="string">`id=<span class="subst">$&#123;id&#125;</span>`</span>, &#123; name, skill, icon &#125;, (err, results) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                res.send(&#123;</span><br><span class="line">                    code: <span class="number">200</span>,</span><br><span class="line">                    msg: <span class="string">'说改就改'</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.send(&#123;</span><br><span class="line">                    code: <span class="number">500</span>,</span><br><span class="line">                    msg: <span class="string">'不是我的错'</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// icon='http://localhost:3000/'+icon;</span></span><br><span class="line">        heroModel.update(<span class="string">`id=<span class="subst">$&#123;id&#125;</span>`</span>, &#123; name, skill &#125;, (err, results) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                res.send(&#123;</span><br><span class="line">                    code: <span class="number">200</span>,</span><br><span class="line">                    msg: <span class="string">'说改就改'</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.send(&#123;</span><br><span class="line">                    code: <span class="number">500</span>,</span><br><span class="line">                    msg: <span class="string">'不是我的错'</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h3><table><thead><tr><th align="left">接口名称</th><th align="center">接口类型</th><th>接口参数</th><th>返回数据</th></tr></thead><tbody><tr><td align="left">/user/register</td><td align="center">post</td><td>{username,password}</td><td>{code:200,msg:’注册成功’}</td></tr></tbody></table><ul><li>注册时候需要考虑：<ul><li>是否已被注册</li><li>没有被注册就存储到数据库</li><li>通过提交的username作为条件，进入数据库查找，如果results的长度不为0，说明之前注册过</li></ul></li><li>前端：判断非空，两次输入的密码不一致，密码上传之前，可以采用加密方式进行上传<code>password=md5(password,&#39;lxh&#39;)</code>，后面具体讲</li><li>后端：要进行非空判断，以免高级用户采用非法手段进行破坏</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户注册</span></span><br><span class="line">app.post(<span class="string">'/user/register'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// res.send('/user'); </span></span><br><span class="line">    <span class="keyword">const</span> username = req.body.username;</span><br><span class="line">    <span class="keyword">const</span> password = req.body.password;</span><br><span class="line">    <span class="keyword">if</span> (username == <span class="string">''</span> || password == <span class="string">''</span>) &#123;</span><br><span class="line">        res.send(&#123;</span><br><span class="line">            msg: <span class="string">'干啥呢你！'</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    userModel.find(<span class="string">`username="<span class="subst">$&#123;username&#125;</span>"`</span>, (err, results) =&gt; &#123;</span><br><span class="line">        <span class="comment">// console.log(results);</span></span><br><span class="line">        <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">            <span class="keyword">if</span> (results.length != <span class="number">0</span>) &#123;</span><br><span class="line">                res.send(&#123;</span><br><span class="line">                    code: <span class="number">401</span>,</span><br><span class="line">                    msg: <span class="string">'该用户名，已经被注册过了，重新注册吧！'</span></span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               userModel.insert(&#123;username,password&#125;,(err,results)=&gt;&#123;</span><br><span class="line">                   <span class="keyword">if</span>(!err)</span><br><span class="line">                   &#123;</span><br><span class="line">                    res.send(&#123;</span><br><span class="line">                        code:<span class="number">200</span>,</span><br><span class="line">                        msg:<span class="string">'恭喜你，注册成功！'</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                       res.send(&#123;</span><br><span class="line">                           code:<span class="number">500</span>,</span><br><span class="line">                           msg:<span class="string">'不是我的问题'</span></span><br><span class="line">                       &#125;)</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                code: <span class="number">500</span>,</span><br><span class="line">                msg: <span class="string">'不是我的错'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h3><table><thead><tr><th align="left">接口名称</th><th align="center">接口类型</th><th>接口参数</th><th>返回数据</th></tr></thead><tbody><tr><td align="left">/user/login</td><td align="center">post</td><td>{username,password,captcha}</td><td>{code:200,msg:’登录成功’}</td></tr></tbody></table><ul><li>此处涉及到随机验证码的使用，后面详细介绍</li><li>验证码可以允许忽略大小写，采用str.toUpperCase()|str.toLowerCase()</li><li>前端：非空判断，上传密码参数之前也是通过加密转换<code>password=md5(password,&#39;lxh&#39;)</code></li><li>后端：非空判断，验证码输入是否正确，通过查询条件为username,password,进行查询条件，如果results的长度不为0，说明输入密码和用户名都正确，可以登录</li><li>当登陆成功，设置会话机制<code>req.session.userInfo=results[0]</code>，进行记录用户登录成功，并设置中间件，判断在进行调用<code>/hero/*</code>相关接口时，是否存在此会话机制，然后允许接下来操作</li><li>前端：验证码是设置的img的src属性进行调用接口</li><li>前端：实现点击图片切换验证码，会存在缓存问题，解决：设置不同的请求地址<code>/user/captcha?id=${Date.now()}</code></li></ul><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><table><thead><tr><th align="left">接口名称</th><th align="center">接口类型</th><th>接口参数</th><th>返回数据</th></tr></thead><tbody><tr><td align="left">/user/logout</td><td align="center">get</td><td>无</td><td>{code:200,msg:’退出成功’}</td></tr></tbody></table><ul><li><p>点击退出，删除用户的登录状态</p></li><li><p>前端不用干任何事情</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//  用户退出</span></span><br><span class="line">app.get(<span class="string">'/user/logout'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    req.session.userInfo=<span class="literal">undefined</span>;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        code:<span class="number">200</span>,</span><br><span class="line">        msg:<span class="string">'退出成功！'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>面试可能会问到的问题：</p><ul><li>localStorage和sessionStorage的区别：<ul><li>前者关闭浏览器还在</li><li>后者关闭浏览器消失</li><li>只能存字符串，如果要存复杂类型可以结合json.stringify</li></ul></li><li>localStorage和sessionStorage和cookie和session的区别：<ul><li>cookie保存位置是浏览 自动保存 自动携带 容量小4kb</li><li>session保存的位置是服务器 浏览器用cookie存了一个 标记 钥匙</li><li>服务器根据cookie携带而来的标记获取详细信息</li><li>session消耗服务器的性能我之前的项目用的是token</li><li>我和你说说token吧</li><li>.……</li><li>axios中可以用拦截器统一设置token</li><li>在vue中用导航守卫统一判断是否有token</li><li>我们聊一聊vue吧</li></ul></li></ul></li></ul><h3 id="整合静态资源服务器"><a href="#整合静态资源服务器" class="headerlink" title="整合静态资源服务器"></a>整合静态资源服务器</h3><ul><li>添加代码<code>app.use(express.static(&#39;./web&#39;))</code>,其中web文件存放的是所有前端静态资源，为了列表渲染的时候，可以看到之前的随机生成的网页的图片，需要设置代码<code>appp.use(express.static(&#39;./uploads&#39;))</code></li><li>调用接口的时候，无需输入完整的接口地址，eg:<code>/hero/list</code>即可调用接口成功</li></ul><h3 id="Mockjs-模拟数据生成"><a href="#Mockjs-模拟数据生成" class="headerlink" title="Mockjs-模拟数据生成"></a>Mockjs-模拟数据生成</h3><p>1.Mockjs的js库，可以生成随机的测试数据</p><p>2.网址：<code>http://mockjs.com</code></p><p>3.输入<code>npm install mockjs</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">const</span> name=Mock.Random.cname;</span><br><span class="line">    <span class="keyword">const</span> skill=Mock.Random.cparagraph(<span class="number">3</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">const</span> icon=Mock.Random.image(<span class="string">'200x200'</span>,Mock.Random.color(),name);</span><br><span class="line">    heroModel.insert(&#123;name,skill,icon&#125;,(err,results)=&gt;&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><p>1.网址：<code>http://npmjs.com/package/svg-captcha</code></p><p>2.下包：<code>npm i svg-captcha</code></p><p>3.导包</p><p>4.用包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> svgCaptcha = <span class="built_in">require</span>(<span class="string">'svg-captcha'</span>);</span><br><span class="line"> <span class="comment">//必须是get请求</span></span><br><span class="line">app.get(<span class="string">'/captcha'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> captcha = svgCaptcha.create();</span><br><span class="line">    req.session.captcha = captcha.text;</span><br><span class="line">    </span><br><span class="line">    res.type(<span class="string">'svg'</span>);</span><br><span class="line">    res.status(<span class="number">200</span>).send(captcha.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>后端：将验证码captcha.text通过全局变量captchaText保存起来方便后续使用</p><h3 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h3><ul><li>通过某些算法，把某个值计算出一个新的结果</li><li>这个新的结果，无算反算回去</li><li>对称加密，非对称加密ASE……</li><li>md5:最初设计摘要算法，从一个数据中算出一些特征值，计算结果无法反算</li><li>网址：<code>http://www.github.com/blueimp/javaScript-MD5</code></li><li>md5加密可以解出来，所以额外增加一个值，加盐<code>md5(加密的值,盐（额外的值）)</code></li><li>黑客网址：<code>https://www.sec-wiki.com/skill/2</code></li></ul><h3 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h3><h4 id="cookie-甜饼，曲奇"><a href="#cookie-甜饼，曲奇" class="headerlink" title="cookie(甜饼，曲奇)"></a>cookie(甜饼，曲奇)</h4><ul><li><p>http是无状态的</p></li><li><p>cookie的作用：解决http不会记录客户端（用户信息）这个缺点</p></li><li><p>注意：</p></li><li><blockquote><p>1.cookie是由服务器设置Set-Cookie</p><p>2.浏览器保存</p><p>3.浏览器会偷偷的携带到服务器Cookie</p><p>4.容量4kb大数据存不了</p></blockquote></li></ul><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><blockquote><p>1.session保存的位置是服务器</p><p>2.格式是：key:value</p><p>3.浏览器中保存了一个cookie(标记，钥匙)</p><p>4.浏览器再次请求服务器时，会携带标记去服务器，服务器就可以根据标记获取对应的详细信息</p><p>5.session理论上来说，可以存很多东西</p></blockquote><h4 id="token"><a href="#token" class="headerlink" title="token"></a>token</h4><ul><li>cookie和session会占用服务器内存，性能消耗</li><li>cookie和session必须依赖于浏览器</li><li>应用程序也需要保存状态，但是不支持cookie session</li><li>token是由服务器生成，基于某种加密算法生成</li><li>在计算时会用到用户的一些信息，不同的用户算出来的值不同</li><li>计算完毕之后，服务器直接返回给浏览器，什么也不存</li><li>好处：<ul><li>网站可以用</li><li>app可以用</li><li>服务器不需要存东西</li></ul></li></ul><h3 id="登录状态维持-session的使用"><a href="#登录状态维持-session的使用" class="headerlink" title="登录状态维持(session的使用)"></a>登录状态维持(session的使用)</h3><ul><li><p>下包：<code>npm i express-session</code></p></li><li><p>导包</p></li><li><p>用包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  secret: <span class="string">'keyboard cat'</span>,</span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">  cookie: &#123; <span class="attr">secure</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">//保存信息</span></span><br><span class="line">req.session.userInfo=result[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><ul><li>fs.readFile()异步</li><li>hmModel.find(‘’,(err,result)=&gt;{})异步</li></ul><h3 id="echarts基本使用"><a href="#echarts基本使用" class="headerlink" title="-echarts基本使用"></a>-echarts基本使用</h3><ul><li><p>数据可视化 数据编程图表</p></li><li><p>网址<code>https://www.echartsjs.com/zh/index.html</code></p></li></ul><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><blockquote><p>1.home end 行头 行尾</p><p>2.shift+home或end 选中一行</p><p>3.ctrl+左右 识别词组跳跃</p><p>4.vscode中快捷键</p><p>​    ctrl+enter:光标换行，文字不换行</p><p>​    ctrl+shift+enter 光标去上一行，文字不动</p><p>5.vscode相关快捷键的使用:<code>http://go.microsoft.com/fwlink/?linkid=832145</code></p></blockquote><h3 id="补充typora主题"><a href="#补充typora主题" class="headerlink" title="补充typora主题"></a>补充typora主题</h3><p>vue主题：</p><p>打开文件，选中偏好设置，点击获取主题进行下载，然后解压，把文件拷贝到打开主题文件夹中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Node-js&quot;&gt;&lt;a href=&quot;#Node-js&quot; class=&quot;headerlink&quot; title=&quot;Node.js&quot;&gt;&lt;/a&gt;Node.js&lt;/h2&gt;&lt;p&gt;通俗理解为就是可以脱离浏览器，运行js代码的一个环境&lt;/p&gt;
&lt;h3 id=&quot;Node-js基本概念
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Node-JS" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/Node-JS/"/>
    
    
      <category term="Node-JS" scheme="http://yoursite.com/tags/Node-JS/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="http://yoursite.com/2019/12/04/Ajax/"/>
    <id>http://yoursite.com/2019/12/04/Ajax/</id>
    <published>2019-12-04T09:47:05.000Z</published>
    <updated>2019-12-07T09:05:51.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="上网过程"><a href="#上网过程" class="headerlink" title="上网过程"></a>上网过程</h2><p>1.打开浏览器</p><p>2.地址栏，输入网址</p><p>3.回车</p><p>4.最终，看到页面</p><p><img src="C:%5CUsers%5C%E5%88%98%E6%99%93%E6%85%A7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571047321929.png" alt="1571047321929"></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><ul><li>客户端：client 一般指浏览器</li><li>服务端：server 电脑 （存储网页，响应客户端）</li><li>请求 : request</li><li>响应：response</li><li>资源：source</li></ul><h2 id="搭建Web服务器"><a href="#搭建Web服务器" class="headerlink" title="搭建Web服务器"></a>搭建Web服务器</h2><p>用vs打开ajax文件，右击app.js,在终端打开，输入命令node app.js</p><p>注意：</p><p>​    1.服务不能重复开启，即不能多次执行</p><p>​    2.ctrl+~快速打开和关闭终端</p><p>​    3.关闭终端面板，不代表关闭服务器</p><p>将文件放到ajax/public文件夹内</p><p>通过ip或者域名访问自己的服务器<a href="http://192.168.156.65:4000/index.html" target="_blank" rel="noopener">http://192.168.156.65:4000/index.html</a></p><p>通过回环地址或者localhost访问</p><h2 id="Ajax初始"><a href="#Ajax初始" class="headerlink" title="Ajax初始"></a>Ajax初始</h2><p>使用Ajax不会刷新页面</p><ul><li>接口介绍<ul><li>网址</li><li>接口文档</li></ul></li></ul><p>ajax通过执行一段js代码来发送和接收响应结果</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type:<span class="string">'请求方式'</span>,<span class="comment">//GET【默认】 POST</span></span><br><span class="line">    url:<span class="string">'接口地址'</span>,<span class="comment">//接口或者完整的文件路径【必填】</span></span><br><span class="line">    data:<span class="string">'请求参数'</span>,</span><br><span class="line">    dataType:<span class="string">'响应数据格式'</span>,<span class="comment">//默认text</span></span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//result 表示服务器返回的结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="data请求参数写法"><a href="#data请求参数写法" class="headerlink" title="data请求参数写法"></a>data请求参数写法</h3><ul><li><p>字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:<span class="string">'参数=值&amp;参数=值……'</span></span><br></pre></td></tr></table></figure></li><li><p>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    参数：值,</span><br><span class="line">    参数：值</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="ajax方法详解"><a href="#ajax方法详解" class="headerlink" title="ajax方法详解"></a>ajax方法详解</h2><ul><li><p>type:表示请求的方式或方法</p><ul><li>常见的两种请求方式<ul><li>GET:获取，向服务器请求资源，不会改变服务器的数据【地址栏】</li><li>POST:获取+提交数据，可能会修改服务器上的数据</li></ul></li></ul></li><li><p>data:请求参数（接口文档的请求参数）</p><ul><li>写法<ul><li>对象：{name:name,content:content}</li><li>字符串：‘name=name&amp;content=content’</li></ul></li><li>字符串形式，GET请求时候，接口和请求参数？隔开</li></ul></li><li><p>dataType:服务器响应的数据格式，自动将服务器响应的数据处理成js数据</p><ul><li>json:将原来的json字符串转换成对象</li><li>text</li><li>xml</li><li>jsonp,script,html</li></ul></li><li><p>beforeSend:发生ajax请求之前，执行的操作</p><ul><li><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    beforeSend:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>complete:ajax请求结束之后，执行的操作</p><ul><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    complete:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="进度条插件NProgress"><a href="#进度条插件NProgress" class="headerlink" title="进度条插件NProgress"></a>进度条插件NProgress</h2><p>引入NProgress.js和NProgress.css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beforeSend:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    NProgress.start();</span><br><span class="line">&#125;</span><br><span class="line">complete:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    NProgress.done();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原生ajax请求"><a href="#原生ajax请求" class="headerlink" title="原生ajax请求"></a>原生ajax请求</h2><p>基本语法：</p><p>GET:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.实例化 XMLHttpRequest对象</span></span><br><span class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">//2.调用open方法，设置请求方式和url</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>,<span class="string">'/common/time'</span>);</span><br><span class="line"><span class="comment">//3.调用send方法，发生请求</span></span><br><span class="line">xhr.send();</span><br><span class="line"><span class="comment">//4.请求响应过程结束，接收服务器响应的结果</span></span><br><span class="line">xhr.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.response);</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText);<span class="comment">//接收文本类型结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果有请求参数：</span></span><br><span class="line"><span class="comment">//请求参数拼接到url后面即可</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>,<span class="string">'/common/checkUser?username=lisi'</span>);</span><br></pre></td></tr></table></figure><p>POST:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建xhr对象</span></span><br><span class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">//2.调用open方法，设置请求方式和url</span></span><br><span class="line">xhr.open(<span class="string">'POST'</span>,<span class="string">'/message/addMsg'</span>);</span><br><span class="line"><span class="comment">//3.设置请求头，固定</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line"><span class="comment">//4.调用send，发送请求</span></span><br><span class="line">xhr.send(<span class="string">'name="张三"&amp;content="今天真好"'</span>);<span class="comment">//必须用字符串</span></span><br><span class="line"><span class="comment">//5.设置onload事件，接收服务器响应的结果</span></span><br><span class="line">xhr.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GET和POST区别：</p><ul><li>GET:请求一般用于获取服务器上的资源，这种请求不会改变服务器数据</li><li>POST：一般用于提交数据给服务器，这种请求有可能会改变服务器上的资源</li><li>请求参数位置不同</li><li>POST请求多了一行代码</li></ul><h2 id="三级联动"><a href="#三级联动" class="headerlink" title="三级联动"></a>三级联动</h2><p>获取省市县</p><p>接口中的请求参数id,和文件名一个意思</p><p>id=0,表示获取所有省</p><p>id=105,表示获取河北省下属的市</p><p>id=105001,表示获取石家庄下属的县</p><h2 id="浏览器问题"><a href="#浏览器问题" class="headerlink" title="浏览器问题"></a>浏览器问题</h2><h3 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h3><p>onreadystatechange事件配合readyState,完成获取响应结果的任务，代替onload事件，只不过使用onreadystatechange事件需要添加判断</p><p>onload事件属于xhr对象新增的一个属性，ie678不支持，所以采用onreadystatechange</p><ul><li>onreadystatechange事件：<ul><li>会触发多次</li><li>触发时机：<ul><li>当readyState属性值（ajax状态）发生改变（0–&gt;1,1—&gt;2……）的时候，会触发事件</li><li>接收数据量发生变化，也会触发</li></ul></li></ul></li><li>readyState属性：<ul><li>表示ajax请求到哪个阶段，表示ajax执行状态，值分别为0,1,2,3,4，共计5个值<ul><li>0   unsent xhr未创建 未调用open()</li><li>1 opened open方法调用 建立连接</li><li>2 headers_received send()方法调用 已经获取状态行和响应头</li><li>3 loading 响应体下载中 并不表示完成</li><li>4 done 响应体下载完成 完全接收</li></ul></li></ul></li></ul><h3 id="ie缓存问题"><a href="#ie缓存问题" class="headerlink" title="ie缓存问题"></a>ie缓存问题</h3><p>产生原因：两次或多次请求ajax(GET方式)，url地址一样导致访问缓存，获取数据相同</p><p>解决办法：每次请求的url不一致</p><h2 id="其他API"><a href="#其他API" class="headerlink" title="其他API"></a>其他API</h2><h3 id="创建xhr对象的兼容写法"><a href="#创建xhr对象的兼容写法" class="headerlink" title="创建xhr对象的兼容写法"></a>创建xhr对象的兼容写法</h3><p>var xhr=new XMLHttpRequest();//不兼容ie67</p><p>var xhr=new ActiveXObject(‘Microsoft.XMLHTTP’);</p><p>兼容代码：var xhr=window.XMLHttpRequest?new XMLHttpRequest():new ActiveXObject(‘Microsoft.XMLHTTP’);</p><h3 id="responseType属性"><a href="#responseType属性" class="headerlink" title="responseType属性"></a>responseType属性</h3><p>不支持ie678</p><p>类似$.ajax中的dataType,指定该属性会把JSON格式的数据转成js数据（对象、数组）</p><h3 id="API小结"><a href="#API小结" class="headerlink" title="API小结"></a>API小结</h3><p>XHR1.0版本</p><p>​    open</p><p>​    send</p><p>​    onreadystatechange</p><p>​    readyState</p><p>​    responseText</p><p>XHR2.0版本</p><p>​    onload  相当于readyState=4</p><p>​    responseType </p><p>​    response</p><p>​    onprogress 正在接收结果 readyState=3</p><p>​    onloadstart beforeSend</p><p>​    onloadend complete</p><h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><p>异步：同一时间，有多个操作同时执行。耗时操作，不会影响后续代码执行，不会阻塞后续代码执行。eg:定时器，ajax请求默认</p><p>同步：同一时间，只能做一个操作。耗时操作，会影响后续代码执行，会阻塞后续代码执行</p><p>xhr.open(type,url,true)//true默认异步</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>回调函数是处理异步的结果的最佳方案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*type:请求方式</span></span><br><span class="line"><span class="comment">data:请求接口地址</span></span><br><span class="line"><span class="comment">data:请求参数</span></span><br><span class="line"><span class="comment">callback:用于处理服务器响应结果的回调函数</span></span><br><span class="line"><span class="comment">function ajax(type,url,data,callback)&#123;</span></span><br><span class="line"><span class="comment">type=type==undefined?'GET':type;</span></span><br><span class="line"><span class="comment">data=data==undefined?'':data;</span></span><br><span class="line"><span class="comment">var xhr=new XMLHttpRequest();</span></span><br><span class="line"><span class="comment">var params='';</span></span><br><span class="line"><span class="comment">    if(type==='GET')&#123;</span></span><br><span class="line"><span class="comment">    url+=url+'?'+data;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    xhr.open(type,url);</span></span><br><span class="line"><span class="comment">    if(type==='POST')&#123;</span></span><br><span class="line"><span class="comment">    xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded');</span></span><br><span class="line"><span class="comment">    params=data;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    xhr.send(params);</span></span><br><span class="line"><span class="comment">    xhr.onload=function()&#123;</span></span><br><span class="line"><span class="comment">    callback&amp;&amp;callback(this.response);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h2><p>使用步骤：</p><p>有form标签：（注意此时form内部的表单控件，需要上传的需要设置name属性，否则接收失败）</p><ul><li><p>找到form表单，找表单的DOM对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fm=<span class="built_in">document</span>.getElementById(<span class="string">'fm'</span>);<span class="comment">//form对象</span></span><br></pre></td></tr></table></figure></li><li><p>实例化FormData对象，并传递表单即可，得到对象包含所有表单信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formdata=<span class="keyword">new</span> FormData(fm);</span><br></pre></td></tr></table></figure></li><li><p>接收到的数据应该发送到服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'POST'</span>,<span class="string">'/common/fd'</span>);</span><br><span class="line"><span class="comment">//xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded');//不写</span></span><br><span class="line">xhr.send(formdata);</span><br><span class="line">xhr.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>没有form表单：</p><ul><li><p>需要自己手动添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formdata=<span class="keyword">new</span> FormData();</span><br><span class="line">formdata.append(<span class="string">'user'</span>,<span class="built_in">document</span>.getElementById(<span class="string">'user'</span>).value);</span><br></pre></td></tr></table></figure></li></ul><p><strong>请求头设置</strong></p><ul><li>提交数据时纯文本，没有文件上传，需要设置请求头</li><li>使用FormData时候，不需要自己设置请求头</li></ul><p><strong>注意事项</strong></p><ul><li>不能让表单提交【input:submit input:image button等都会自动提交】<ul><li>设置按钮为input中type为button</li><li>js代码中，通过事件对象阻止表单提交默认行为</li></ul></li><li>表单中各项必须有name属性，因为FormData收集表单数据时候，就是根据name属性获取的</li></ul><h2 id="获取文件对象"><a href="#获取文件对象" class="headerlink" title="获取文件对象"></a>获取文件对象</h2><p>语法:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'file'</span> <span class="attr">id</span>=<span class="string">'pic'</span> <span class="attr">multiple</span> <span class="attr">accept</span>=<span class="string">'image/*'</span>&gt;</span><span class="comment">&lt;!--multiple表示可以多选，accept设置选择文件的类型，可以写为image/* .jpg,.png,.gif image/png--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">value</span>=<span class="string">'获取文件对象'</span> <span class="attr">id</span>=<span class="string">'btn'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'#btn'</span>).onlclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pic=<span class="built_in">document</span>.getElementById(<span class="string">'pic'</span>);<span class="comment">//也是获取DOM对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> fileobj=pic.files[<span class="number">0</span>];<span class="comment">//找到文件对象</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ajax综合案例"><a href="#ajax综合案例" class="headerlink" title="ajax综合案例"></a>ajax综合案例</h2><p>知识点：</p><ul><li><p>获取地址栏参数部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.search.replace(<span class="regexp">/\D/g</span>,<span class="string">''</span>)<span class="comment">//获取参数的值</span></span><br></pre></td></tr></table></figure></li><li><p>为文件对象创建一个临时url,url用于访问该图像</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fileobj=<span class="keyword">this</span>.file[<span class="number">0</span>];<span class="comment">//DOM对象获取文件对象</span></span><br><span class="line"><span class="keyword">var</span> url=URL.createObjectURL(fileobj);<span class="comment">//URL是js内置对象</span></span><br></pre></td></tr></table></figure></li><li><p>调用接口传递表单信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type:<span class="string">'POST'</span>,</span><br><span class="line">    url:<span class="string">'/memeber/add'</span>,</span><br><span class="line">    data:formdata,</span><br><span class="line">    dataType:<span class="string">'json'</span>,</span><br><span class="line">    contentType:<span class="literal">false</span>,<span class="comment">//表示不设置请求头Content-Type</span></span><br><span class="line">    processData:<span class="literal">false</span>,<span class="comment">//表示不需要将formdata转成字符串</span></span><br><span class="line">    </span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        location.href=<span class="string">'index.html'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>注册事件必须使用事件委托</p></li><li><p>超链接跳转属于GET请求，传递参数，需要在url后面拼接’detail.html?id=12’</p></li></ul><h2 id="jQuery中的ajax补充"><a href="#jQuery中的ajax补充" class="headerlink" title="jQuery中的ajax补充"></a>jQuery中的ajax补充</h2><ul><li><p>$.ajax()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type:<span class="string">'请求方式'</span>,</span><br><span class="line">    url:<span class="string">'接口地址'</span>,</span><br><span class="line">    data:<span class="string">'请求参数'</span>,</span><br><span class="line">    dataType:<span class="string">'响应数据格式'</span>,</span><br><span class="line">    contentType:application/x-www-form-urlencoded(默认)，<span class="comment">//设置请求头</span></span><br><span class="line">    processData:<span class="string">'是否设置处理请求参数'</span>,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//res就是服务器返回的结果</span></span><br><span class="line">&#125;,</span><br><span class="line">    beforeSend:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">        complete:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>$.get([url],[data],[fn],[dataType])</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>('接口地址','请求参数','请求成功后的回调函数','服务器返回数据的类型')</span><br></pre></td></tr></table></figure></li><li><p>$.post([url],[data],[fn],[dataType])</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">'接口地址'</span>,<span class="string">'请求参数'</span>,<span class="string">'请求成功后的回调函数'</span>,<span class="string">'服务器返回的数据类型'</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="封装库axios-别人封装的ajax-（了解）"><a href="#封装库axios-别人封装的ajax-（了解）" class="headerlink" title="封装库axios(别人封装的ajax)（了解）"></a>封装库axios(别人封装的ajax)（了解）</h2><ul><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/common/time'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="template模板引擎"><a href="#template模板引擎" class="headerlink" title="template模板引擎"></a>template模板引擎</h2><ul><li><p>字符串拼接，降低性能，使用模板引擎，使html和js分离</p></li><li><p>渲染页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./assets/template-web.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!--引入模板引擎js文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/html"</span> <span class="attr">id</span>=<span class="string">'test'</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"></span><span class="template-variable">&#123;&#123;<span class="builtin-name">if</span> age&gt;18&#125;&#125;</span></span></span><br><span class="line">欢迎来玩~</span><br><span class="line"><span class="handlebars"><span class="xml"></span><span class="template-variable">&#123;&#123;<span class="builtin-name">else</span>&#125;&#125;</span></span></span><br><span class="line">禁止未成年人进入</span><br><span class="line"><span class="handlebars"><span class="xml"></span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">if</span></span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;heros[0]&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;heros[1]&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;heros[2]&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"></span><br><span class="line">第二种</span><br><span class="line"><span class="handlebars"><span class="xml"></span><span class="template-variable">&#123;&#123;<span class="builtin-name">each</span> heroes&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;$index&#125;&#125;</span><span class="xml">--</span><span class="template-variable">&#123;&#123;$value&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"></span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> data=&#123;</span></span><br><span class="line"><span class="actionscript">        title:<span class="string">'模板引擎练习'</span>,</span></span><br><span class="line">        age:20,</span><br><span class="line"><span class="actionscript">        heroes:[<span class="string">'曹操'</span>,<span class="string">'刘备'</span>,<span class="string">'李逵'</span>,<span class="string">'张飞'</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> str=template(<span class="string">'test'</span>,data);<span class="comment">//数据必须是js对象格式</span></span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h1&gt;&lt;h2 id=&quot;上网过程&quot;&gt;&lt;a href=&quot;#上网过程&quot; class=&quot;headerlink&quot; title=&quot;上网过程&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Ajax" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="http://yoursite.com/2019/12/04/JavaScript/"/>
    <id>http://yoursite.com/2019/12/04/JavaScript/</id>
    <published>2019-12-04T09:46:51.000Z</published>
    <updated>2019-12-07T09:05:51.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js介绍"><a href="#js介绍" class="headerlink" title="js介绍"></a>js介绍</h2><ul><li>脚本编程语言</li><li>作用：与用户进行交流互动</li></ul><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><ul><li><p>行内式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onclick=<span class="string">'alert('</span>哈哈<span class="string">');'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>内嵌式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;    </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>外链式</p><script src="demo.js"></script></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>ctr+/  单行注释</li><li>shift+alt+/ 多行注释</li></ul><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><ul><li>输入：<ul><li>prompt()</li></ul></li><li>输出：<ul><li>alert();用<code>+</code>进行连接</li><li>confirm()</li><li>console.log(),其中console.log(a,b);多个输出用<code>逗号</code>隔开<ul><li>转义字符 console.log(‘我说：&#39;我是’’)；</li><li>单双引号嵌套</li><li>es6解决 `${num}`</li></ul></li><li>document.write();可以识别html标签(页面上显示输出)</li></ul></li></ul><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><ul><li>var a;</li></ul><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><ul><li><p>var a=10;</p></li><li><p>var a;</p><p>a=10;</p></li><li><p>var a=10;</p><p>a=20;</p></li><li><p>var a=10;</p><p>a=a+10;</p></li></ul><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><ul><li><p>使用范围是：字母，数字，下划线，$</p></li><li><p>不能以数字开头</p></li><li><p>不能以关键字命名</p></li><li><p>区分大小写</p></li><li><p>驼峰式命名</p></li><li><p>没有定义的变量名不能直接使用</p></li></ul><h3 id="交换值"><a href="#交换值" class="headerlink" title="交换值"></a>交换值</h3><ul><li>取第三方变量</li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li><p>声明多个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a,b,c;</span><br></pre></td></tr></table></figure></li><li><p>声明多个变量且赋值</p><p>var a=10,b=20;</p></li><li><p>声明变量，赋值为另一个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b=a;</span><br></pre></td></tr></table></figure></li></ul><h3 id="五种简单的数据类型"><a href="#五种简单的数据类型" class="headerlink" title="五种简单的数据类型"></a>五种简单的数据类型</h3><h4 id="number"><a href="#number" class="headerlink" title="number"></a>number</h4><ul><li>数字</li><li>NaN 不是某个数</li></ul><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><ul><li><pre><code class="js"><span class="keyword">var</span> str=<span class="string">'abc'</span>;&lt;!--￼<span class="number">4</span>--&gt;</code></pre></li><li><p>对于字符串与字符串进行比较的时候，注意并不是转换为数字类型，而是转换为Ascii码</p></li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ul><li><p>while循环 注意退出条件</p></li><li><p>for循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>do-while循环，至少执行一次</p></li><li><p>break和continue</p><ul><li>break直接跳出循环</li><li>continue 结束当前循环 执行下一次循环</li></ul></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>有长度，有顺序的数据集合</p></li><li><p>声明</p><ul><li>字面量 var arr=[] 空数组 类型是object</li><li>构造函数 var arr=new Array()<ul><li>注意var arr=new Array(90)其中90表示数组的长度</li></ul></li></ul></li><li><p>存值</p><ul><li>存值 arr[0]=94 通过索引进行存值，下标从0开始</li><li>var arr=[10,20,40,null,undefined]</li></ul></li><li><p>取值：</p><ul><li><p>通过下标进行取数据</p></li><li><p>遍历：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>清空数组：arr.length</p></li><li><p>小娜案例</p><ul><li>Math.random()0-1随机数</li><li>Math.floor()向下取整</li><li>var date=new Date()</li><li>date.getfullYear()</li><li>date.getMonth()</li><li>date.getDate()</li><li>date.getHours()</li><li>date.getMinutes()</li><li>date.getSeconds()</li></ul></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>声明函数</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tell_story</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数表达式</span></span><br><span class="line"><span class="keyword">var</span> fn_1=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;；</span><br><span class="line"><span class="comment">//匿名函数 不能单独使用</span></span><br></pre></td></tr></table></figure><ul><li><p>调用函数</p></li><li><pre><code class="js">tell_story();&lt;!--￼<span class="number">8</span>--&gt;</code></pre></li></ul><ul><li><p>作用域</p><ul><li>全局作用域：在script内部声明的变量 包括函数function作用域</li><li>局部作用域：函数内部</li></ul></li><li><p>预解析：把你声明的变量和函数function fn(){}提前到当前作用域最顶端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);<span class="comment">//undefined</span></span><br><span class="line">    <span class="keyword">var</span> num=<span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//20</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);<span class="comment">//10</span></span><br><span class="line">    num=<span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li><p>声明对象</p><ul><li>字面量 var obj={};</li><li>构造函数 var obj=new Object();</li></ul></li><li><p>添加属性</p><ul><li><p>点方式：</p><ul><li>obj.name=’狗蛋’</li><li>obj.sayName=function(){}</li></ul></li><li><p>在声明对象时设置</p><p>var obj={</p><p>name:’张三’,</p><p>age:18,</p><p>say:function(){</p><p>},</p><p>}    </p></li><li><p>键值对</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj[<span class="string">'height'</span>]=<span class="number">20</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>获取属性和遍历属性</p><ul><li><p>点方式 obj.name obj.say()</p></li><li><p>键值对方式 obj[‘name’] 注意括号内部是字符串 obj[‘say’]（）</p></li><li><p>遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,obj[key]);<span class="comment">//必须是键值对方式获取</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="小娜"><a href="#小娜" class="headerlink" title="小娜"></a>小娜</h3><ul><li>arr.concat()；</li></ul><h3 id="Math拓展"><a href="#Math拓展" class="headerlink" title="Math拓展"></a>Math拓展</h3><ul><li>Math.random()输出0-1的随机数</li><li>Math.floor()浮点数向下取整</li></ul><h3 id="数组的拼接"><a href="#数组的拼接" class="headerlink" title="数组的拼接"></a>数组的拼接</h3><ul><li>arr.concat([3,5]),注意此与push的区别，push返回的是数组的长度，它返回的是新的拼接的数组，需要接收</li></ul><h3 id="简单类型和复杂类型"><a href="#简单类型和复杂类型" class="headerlink" title="简单类型和复杂类型"></a>简单类型和复杂类型</h3><ul><li><p>简单类型传递值</p></li><li><p>复杂类型传递地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a==b)；<span class="comment">//true</span></span><br><span class="line"><span class="keyword">var</span> b=&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> c=&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(b==c);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line">fn(num);</span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    num=<span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    a:<span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line">fn(obj.a);</span><br><span class="line"><span class="built_in">console</span>.log(obj.a);<span class="comment">//20</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obj</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    obj.a=<span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><ul><li>Math.random()；随机数，获取[0,1)的随机数</li><li>Math.floor();向下取整</li><li>Math.ceil()；向上取整</li><li>Math.round()；将浮点数四舍五入</li><li>Math.abs();绝对值</li><li>Math.max();可以传入多个参数，获取这些数的最大值</li></ul><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><ul><li><p>特定格式 输入一个字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-09-15'</span>);</span><br><span class="line"><span class="keyword">var</span> month=date.getMonth()+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(month)；</span><br></pre></td></tr></table></figure></li><li><p>获取毫秒数 时间戳</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.valueof());</span><br><span class="line"><span class="built_in">console</span>.log(date.getTime())；</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>*date);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.now());</span><br></pre></td></tr></table></figure></li><li><p>绝对的唯一的数值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random()*date.valueof();</span><br></pre></td></tr></table></figure></li></ul><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><ul><li><p>push 把一个元素或多个元素 从数组的后面</p><ul><li>参数：传入一个或者多个数据</li><li>返回值：新的数组的长度</li></ul></li><li><p>pop 删除数组的最后一个元素</p><ul><li>参数：无</li><li>返回值：被删除的元素</li></ul></li><li><p>unshift 在数组前面添加一个或者多个元素</p><ul><li>参数：一个或者多个数据</li><li>返回值：新数组的长度</li></ul></li><li><p>shift:删除一个数组的前面的第一个元素</p><ul><li>参数：无</li><li>返回值：被删除的元素</li></ul></li><li><p>splice 替换（增删改）</p><ul><li><p>增加</p><ul><li>参数 <ul><li>第一个参数：元素的开始下标</li><li>第二个参数：移除元素的个数</li><li>第三个元素：添加的元素</li></ul></li><li>返回值：返回空数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">arr.splice(<span class="number">3</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">8</span>);<span class="comment">//在索引为3的位置上，不移除元素，添加7,8数据</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p><ul><li><p>参数</p><ul><li>第一个参数：元素开始下标</li><li>第二个参数：元素删除的个数</li></ul></li><li><p>返回值：返回删除数据组成的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">arr.splice(<span class="number">3</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>改正</p><ul><li><p>参数</p><ul><li>第一个参数：元素开始下标</li><li>第二个参数：修改元素的个数</li><li>第三个参数：修改之后的元素</li></ul></li><li><p>返回值：被删除的元素组成的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">arr.splice(<span class="number">3</span>,<span class="number">1</span>,<span class="string">'a'</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>与字符串进行互转</p><ul><li><p>数组转换字符串join</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> str=arr.join(<span class="string">'|'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//1|2|3|4</span></span><br></pre></td></tr></table></figure></li><li><p>字符串转换数组split</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'1-2-3-4-5'</span>;</span><br><span class="line"><span class="keyword">var</span> arr=str.split(<span class="string">'-'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查找元素</p><ul><li><p>indexOf 查找指定数据的索引</p><ul><li><p>参数：传入一个数据元素</p></li><li><p>返回值：返回索引，如果数组中没有此元素，返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> res=arr.indexOf(<span class="number">1</span>);<span class="comment">//返回0</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>findIndex 查找满足条件的第一个元素的索引 </p><ul><li><p>参数：传入一个函数</p></li><li><p>返回值：返回索引 如果没有此元素，返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> res=arr.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">10</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>遍历</p><ul><li><p>for循环</p></li><li><p>forEach循环</p><ul><li><p>参数：传入回调函数</p><ul><li>第一个参数：每个元素</li><li>第二个参数：索引</li><li>第三个参数：当前循环的数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>伪数组不能使用数组的方法</p></li><li><p>filter筛选</p><ul><li><p>参数：传入回调函数</p><ul><li>第一个参数：每个元素</li><li>第二个参数：索引</li><li>第三个参数：当前循环的数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">10</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>拼接和截取 f返回的是新数组 不会对原数组进行操作</p><ul><li><p>concat 拼接</p><ul><li><p>参数：传入一个或者多个数据</p></li><li><p>返回值：新的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr=arr.concat([<span class="number">4</span>,<span class="number">5</span>],[<span class="number">7</span>,<span class="number">8</span>]);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>slice 截取</p><ul><li><p>参数：</p><ul><li>第一个参数：开始截取的下标 包括</li><li>第二个参数：结束截取的下标 不包括</li></ul></li><li><p>返回值：返回新的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.slice(<span class="number">1</span>,<span class="number">3</span>);<span class="comment">//从1索引开始截取到索引3，其中不包括3</span></span><br><span class="line">arr.slice(<span class="number">1</span>);<span class="comment">//从索引1开始截取截取到最后</span></span><br><span class="line">arr.slice();<span class="comment">//从头截取到尾</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>复制</p><ul><li><p>forEach</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">    new_arr.push(item);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>slice</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new_arr=arr.slice();</span><br></pre></td></tr></table></figure></li><li><p>filter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.indexOf(item)!=<span class="number">-1</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>concat</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new_arr=arr.concat();</span><br></pre></td></tr></table></figure></li><li><p>不是复制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> new_arr=arr;<span class="comment">//错误</span></span><br><span class="line"><span class="built_in">console</span>.log(new_arr==arr);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Object复制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:<span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1=&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    obj1[key]=obj[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="String-1"><a href="#String-1" class="headerlink" title="String"></a>String</h3><ul><li>不可变性：新组成的字符串，它会放在内存上的空间，但是原来的字符串不会被覆盖，而是处于游离状态</li><li>如何提升前端性能</li><li>查找：<ul><li>indexOf()<ul><li>参数：传入字符串</li><li>返回值：索引 如果在字符串上 就返回查找字符串所在的索引，没有返回-1</li></ul></li><li>lastIndexof() 从后往前查找 但是返回正常的索引<ul><li>参数：传入字符串 </li><li>返回值：索引 如果在字符串上 就返回查找字符串所在的索引 没有返回就-1</li></ul></li><li>charAt()<ul><li>参数：索引值</li><li>返回值:输出索引位置的字符</li></ul></li><li>charCodeAt()<ul><li>参数：索引值</li><li>返回值：输出索引位置的字符的ASCII码</li></ul></li></ul></li><li>字符串转数组split</li><li>字符串拼接与截取<ul><li>concat</li><li>+</li><li>slice()与下面的区别，参数可以是负值（负值与字符串长度相加）</li><li>substring(2，5)从索引2开始截取到索引5，不包括5</li><li>substr(2,2);从索引2开始截取，总共截取两个</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;js介绍&quot;&gt;&lt;a href=&quot;#js介绍&quot; class=&quot;headerlink&quot; title=&quot;js介绍&quot;&gt;&lt;/a&gt;js介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;脚本编程语言&lt;/li&gt;
&lt;li&gt;作用：与用户进行交流互动&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;引入方式&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>动画、响应式、flex</title>
    <link href="http://yoursite.com/2019/12/04/%E5%8A%A8%E7%94%BB%E3%80%81%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E4%B8%8Eflex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2019/12/04/%E5%8A%A8%E7%94%BB%E3%80%81%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E4%B8%8Eflex%E5%B8%83%E5%B1%80/</id>
    <published>2019-12-04T09:46:34.000Z</published>
    <updated>2019-12-07T09:05:51.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h2><h3 id="位移translate"><a href="#位移translate" class="headerlink" title="位移translate"></a>位移translate</h3><ul><li><p>与定位区别：</p><ul><li>定位会脱标，可能影响其他盒子的位置</li><li>定位会使行内元素转换为行内块元素</li></ul></li><li><p>使用：</p><ul><li>transform:translateX(),translateY() translate()</li><li>transform:translate(50px,50px)</li><li>transform:translate(100%,50%);相对于盒子自身宽高</li><li>正值相对于x,y轴正方向进行移动</li></ul></li><li><p>重点：居中方案</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">&#125;</span><br><span class="line">基础班：</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:-盒子本身宽度的一半;</span><br><span class="line">    <span class="attribute">margin-top</span>:-盒子本身高度的一半;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    //前提是盒子要设置宽度（手动），否则无效</span><br><span class="line">    <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span><br><span class="line">    <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">    <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">    <span class="selector-tag">bottom</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">    <span class="selector-tag">right</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">    <span class="selector-tag">margin</span><span class="selector-pseudo">:auto</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="旋转rotate"><a href="#旋转rotate" class="headerlink" title="旋转rotate"></a>旋转rotate</h3><ul><li>使用：<ul><li>transform:rotate(45deg);正值顺时针</li></ul></li><li>小知识：<ul><li>伪元素：字体图标或者手动制作小图标使用 <strong>行内元素</strong><ul><li>只能用在双标签上</li><li>伪元素后面不能紧跟伪类 正确写法：div:hover::after</li></ul></li><li>百分比：<ul><li>定位：相对于父级元素</li><li>背景大小：相对于当前元素</li><li>位移：相对于自身宽高‘</li><li>宽高：相对于父级元素</li></ul></li></ul></li></ul><h3 id="转换中心"><a href="#转换中心" class="headerlink" title="转换中心"></a>转换中心</h3><ul><li><p>使用：</p><p>transform-origin:200px 200px;</p><p>transform-origin:0 100%;</p><p>transform-origin:left bottom;</p><p>transform-origin:0; 第二格参数默认为50%</p></li></ul><h3 id="缩放scale"><a href="#缩放scale" class="headerlink" title="缩放scale"></a>缩放scale</h3><ul><li><p>使用：</p><p>transform:scale(2，0.5)；//长宽方向使用一个缩放比</p></li><li><p><strong>注意：</strong></p><ul><li>后面所有属性都不会影响其他盒子的位置（tranform特点）</li><li>缩放，使下面的文字，css属性，子元素都会跟着缩放</li></ul></li></ul><h3 id="tranform简写"><a href="#tranform简写" class="headerlink" title="tranform简写"></a>tranform简写</h3><ul><li>使用：<ul><li>transform:translate() rotate() scale() 一般情况下，移动写在旋转的前面，反之可能会改变初始轴的方向</li></ul></li></ul><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul><li><p>使用：</p><ul><li>定义动画：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> dong_hua&#123;</span><br><span class="line">    <span class="selector-tag">from</span>&#123;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span>&#123;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>定义动画序列：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> dong_hua&#123;</span><br><span class="line">    0%&#123;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">    50%&#123;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">    100%&#123;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用动画</p><p>​    animation:animation-name animation-duration;</p></li></ul><ul><li><p>注意：变化一定是基于上一个状态的，注意层叠出现</p></li><li><p>属性：</p><ul><li>animation-name:dong_hua 动画名称</li><li>animation-duration:1s; 执行时间</li><li>animation-timing-function:linear;速度变化,其中有个拆分步骤steps(n)</li><li>animation-delay:1s ; 动画延迟</li><li>animation-iteration-count:infinite; 循环次数</li><li>animation-diretion:alternate; 循环方向</li><li>animation-fill-mode:forwards/backwards/both;动画等待结束状态</li><li>animation-paly-state:paused/running;动画播放状态 </li></ul></li></ul><h2 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h2><h3 id="景深"><a href="#景深" class="headerlink" title="景深"></a>景深</h3><ul><li>perspective:500px;近大远小</li><li>一般加在body上</li><li>值越小，变化越剧烈</li></ul><h3 id="位移translate3d"><a href="#位移translate3d" class="headerlink" title="位移translate3d"></a>位移translate3d</h3><ul><li>使用：与2d基本相同</li><li>注意：z轴移动</li></ul><h3 id="旋转rotate3d"><a href="#旋转rotate3d" class="headerlink" title="旋转rotate3d"></a>旋转rotate3d</h3><ul><li><p>使用：与2d基本相同</p></li><li><p>左手定律</p></li><li><p>注意：z轴方向屏幕垂直向外</p></li><li><p>自定义轴向</p><p>transform:rotate3d(1,1,0,45deg)</p></li></ul><h3 id="缩放scale3d"><a href="#缩放scale3d" class="headerlink" title="缩放scale3d"></a>缩放scale3d</h3><ul><li>使用：基本与2d相同</li><li>注意：z轴无效果</li></ul><h3 id="transform简写"><a href="#transform简写" class="headerlink" title="transform简写"></a>transform简写</h3><ul><li>与2d基本相同</li></ul><h3 id="开启3D转换"><a href="#开启3D转换" class="headerlink" title="开启3D转换"></a>开启3D转换</h3><ul><li>给做3d转换的元素的亲生父亲开启空间：tansform-style:preserve-3d</li></ul><h2 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h2><ul><li>百分比布局+二倍图</li></ul><h3 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h3><ul><li><p>设置</p><meta name='viewport' content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no"></li></ul><h3 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h3><ul><li><p>使用：</p><p>background-size:100%;当前盒子宽度</p><p>background-size:contain/cover;</p></li></ul><h3 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h3><h3 id="css3盒子"><a href="#css3盒子" class="headerlink" title="css3盒子"></a>css3盒子</h3><ul><li>box-sizing:border-box</li><li>应用场景：<ul><li>左固定，右侧拉伸</li><li>左右固定，中间拉伸</li></ul></li></ul><h3 id="margin的使用"><a href="#margin的使用" class="headerlink" title="margin的使用"></a>margin的使用</h3><ul><li>只要没有给盒子宽度，设置外边距不会撑宽盒子，只会往内挤</li></ul><h3 id="设置定位"><a href="#设置定位" class="headerlink" title="设置定位"></a>设置定位</h3><ul><li>设置定位的盒子，宽度百分比100%会失效（转换为行内块元素）</li><li>使用定位，不设置偏移量将会按照原来位置进行脱标</li></ul><h3 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//必须是n+2,不能顺序颠倒，其中n从0开始</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:nth-child(n+2)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><ul><li>伸缩布局，弹性布局，伸缩盒布局，弹性盒布局</li><li>等比</li><li>display:flex;</li><li>vertical-align,clear,float失效</li></ul><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><ul><li>flex-direction:row/column主轴方向设置</li><li>justify-content:flex-start/flex-end/center/space-round/space-between控制子元素在主轴上排布方式</li><li>flex-wrap:wrap/nowrap;是否换行；默认不换行，当子元素设置宽度，会进行合理压缩</li><li>flex-flow:flex-direction/flex-wrap</li><li>align-items:flex-start/flex-end/center/stretch;控制子元素侧轴对齐方式（其中子元素只有一行）</li><li>align-content:flex-start/flex-end/center/space-round/space-between/stretch控制子元素侧轴对齐方式（其中子元素为多行）</li></ul><h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><ul><li>flex:设置百分比或者份数</li><li>align-self:控制单独子元素侧轴上对齐方式<ul><li>注意：<ul><li>默认值是auto,当父元素设置align-items或者align-content,会继承父元素值，当父元素没有设置，值为stretch</li></ul></li></ul></li><li>order设置子元素的排列，值越小，越靠前</li></ul><h2 id="rem布局"><a href="#rem布局" class="headerlink" title="rem布局"></a>rem布局</h2><ul><li><p>等比变化</p></li><li><p>1em=父亲字体大小</p></li><li><p>1rem=html字体大小</p></li><li><p>媒体查询</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and|not|only (min-width:<span class="number">750px</span>)&#123;</span><br><span class="line">    //宽度在width&gt;=750px;</span><br><span class="line">    <span class="selector-tag">css-code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>档位划分</p></li><li><p>rem+媒体查询</p></li><li><p>rem布局+flex布局+媒体查询（flexible.js）其中css用less</p></li><li><p>lesss相关语法：</p><ul><li><p>定义变量</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@color:green;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>嵌套</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line"></span><br><span class="line">    .son&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运算</p><ul><li>单位：    <ul><li>两个不同单位，选择前面的单位</li><li>使用同一个单位，单位就是这个单位</li></ul></li></ul></li></ul><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><h3 id="版心"><a href="#版心" class="headerlink" title="版心"></a>版心</h3><ul><li>0-768px xs</li><li>768-992px sm</li><li>992-1200px md</li><li>1200–无穷大 lg</li></ul><h3 id="Bootstrap布局"><a href="#Bootstrap布局" class="headerlink" title="Bootstrap布局"></a>Bootstrap布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 要求 当前网页 使用 IE浏览器 最高版本的内核 来渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视口的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap 的文件引入 已经有初始化文件 Normalize.css--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"./bootstrap-3.3.2-dist/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--解决ie9以下浏览器对html5新增标签的不识别，并导致CSS不起作用的问题--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--解决ie9以下浏览器对 css3 Media Query  的不识别 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 条件注释:小于IE9的版本 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>布局容器和预制类名</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="container"&gt;//有15px内边距</span><br><span class="line">&lt;div class="btn btn-default"&gt;&lt;/div&gt;</span><br><span class="line">&lt;a class="text-muted"&gt;&lt;/a&gt;</span><br><span class="line">&lt;span class="glyphicon glyphicon-home"&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><ul><li>总共12份</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="col-md-3"&gt;&lt;/div&gt;//有内边距15px</span><br><span class="line">&lt;div class="row"&gt;&lt;/div&gt;//去掉父元素container的15px内边距</span><br><span class="line">   &lt;div class="col-md-pull-offset-2"&gt;&lt;/div&gt;//偏移</span><br><span class="line">&lt;div class="col-md-push-offset-2"&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><p>row没有设置宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.row</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>:-<span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="响应式工具"><a href="#响应式工具" class="headerlink" title="响应式工具"></a>响应式工具</h3><ul><li><p>只在某模式下进行显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"visible-md"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>只在某个模式下进行隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hidden-lg"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置图片大小，随着屏幕的变化而变化，当屏幕大于图片时，按照图片的大小进行显示；当屏幕小于图片时，按照屏幕大小进行显示 min-width:100%;</p></li><li><p>向上分配：选低档位</p></li><li><p>向下分配：媒体查询</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2D转换&quot;&gt;&lt;a href=&quot;#2D转换&quot; class=&quot;headerlink&quot; title=&quot;2D转换&quot;&gt;&lt;/a&gt;2D转换&lt;/h2&gt;&lt;h3 id=&quot;位移translate&quot;&gt;&lt;a href=&quot;#位移translate&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="动画、响应式、flex" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E5%8A%A8%E7%94%BB%E3%80%81%E5%93%8D%E5%BA%94%E5%BC%8F%E3%80%81flex/"/>
    
    
      <category term="动画、响应式、flex" scheme="http://yoursite.com/tags/%E5%8A%A8%E7%94%BB%E3%80%81%E5%93%8D%E5%BA%94%E5%BC%8F%E3%80%81flex/"/>
    
  </entry>
  
  <entry>
    <title>移动端项目(类似今日头条)</title>
    <link href="http://yoursite.com/2019/11/30/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/11/30/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE/</id>
    <published>2019-11-30T20:33:18.000Z</published>
    <updated>2019-12-07T09:05:51.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="☆☆-项目初始化"><a href="#☆☆-项目初始化" class="headerlink" title="☆☆  项目初始化"></a>☆☆  项目初始化</h2><h3 id="1-使用Vue-cli初始化项目"><a href="#1-使用Vue-cli初始化项目" class="headerlink" title="1. 使用Vue cli初始化项目"></a>1. 使用<code>Vue cli</code>初始化项目</h3><p>在命令行中输入一下命令创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create zuoritoutiao-mobile</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/asdjkq23" alt=""></p><blockquote><p>​    default：默认勾选 babel、eslint，回车之后直接进入装包</p><p>manually：自定义勾选特性配置，选择完毕之后，才会进入装包</p><p>选择第2种：手动选择特性，支持更多自定义选项</p></blockquote><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/d31w3q" alt=""></p><blockquote><p>​    分别选择：</p><p>Babel：es6 转 es5</p><p>Router：路由</p><p>Vuex：容器</p><p>CSS Pre-processors：CSS预处理器</p><p>Linter / Formatter：代码格式校验</p></blockquote><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/dqw1eq32we" alt=""></p><blockquote><p>​    是否使用 history 路由模式，这里输入 n 不使用</p></blockquote><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/asd123wq" alt=""></p><blockquote><p>​    选择 CSS 预处理器，这里选择 Less</p></blockquote><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/dqw2e1q3we" alt=""></p><blockquote><p>选择校验工具，这里选择 ESLint + <a href="https://standardjs.com/" target="_blank" rel="noopener">Standard config</a></p></blockquote><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/asdqwe213q" alt=""></p><blockquote><p>选择在什么时机下触发代码格式校验：</p><ul><li>Lint on save：每当保存文件的时候</li><li>Lint and fix on commit：每当执行 <code>git commit</code> 提交的时候</li></ul><p>这里建议两个都选上，更严谨。</p></blockquote><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/asdq1w1e" alt=""></p><blockquote><p>Babel、ESLint 等工具会有一些额外的配置文件，这里的意思是问你将这些工具相关的配置文件写到哪里：</p><ul><li>In dedicated config files：分别保存到单独的配置文件</li><li>In package.json：保存到 package.json 文件中</li></ul><p>这里讲义选择第1个，保存到单独的配置文件，这样方便我们做自定义配置。</p></blockquote><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/asdqw321e" alt=""></p><blockquote><p>这里是问你是否需要将刚才选择的一系列配置保存起来，然后它可以帮你记住上面的一系列选择，以便下次直接重用。</p><p>这里根据自己需要输入 y 或者 n，我这里输入 n 不需要</p></blockquote><blockquote><p>​    安装结束，命令提示你项目创建成功，按照命令行的提示在终端中分别输入：</p><ul><li><code>cd 你的项目</code></li><li><code>npm run serve</code></li></ul></blockquote><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/sdq3as4d" alt=""></p><h3 id="2-目录结构"><a href="#2-目录结构" class="headerlink" title="2. 目录结构"></a>2. 目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── babel.config.js    babel配置文件</span><br><span class="line">├── package-lock.json    npm相关文件</span><br><span class="line">├── package.json    npm相关文件</span><br><span class="line">├── postcss.config.js    postcss配置文件</span><br><span class="line">├── public    静态资源托管目录</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   └── index.html</span><br><span class="line">├── README.md    项目说明文件</span><br><span class="line">└── src    源码</span><br><span class="line">    ├── App.vue    根组件</span><br><span class="line">    ├── assets    资源目录</span><br><span class="line">    ├── components    组件目录</span><br><span class="line">    ├── main.js    入口文件</span><br><span class="line">    ├── router.js    路由模块</span><br><span class="line">    ├── store.js    vuex容器模块</span><br><span class="line">    └── views  视图组件目录</span><br></pre></td></tr></table></figure><h3 id="3-加入-Git-版本管理"><a href="#3-加入-Git-版本管理" class="headerlink" title="3. 加入 Git 版本管理"></a>3. 加入 Git 版本管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><h3 id="4-调整目录结构"><a href="#4-调整目录结构" class="headerlink" title="4. 调整目录结构"></a>4. 调整目录结构</h3><blockquote><p>默认生成的目录结构不满足我们的开发需求，所以这里需要做一些自定义改动。</p><p>这里主要就是下面的两个工作：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">├── babel.config.js    babel配置文件</span><br><span class="line">├── package-lock.json    npm相关文件</span><br><span class="line">├── package.json    npm相关文件</span><br><span class="line">├── postcss.config.js    postcss配置文件</span><br><span class="line">├── public    静态资源托管目录</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   └── index.html</span><br><span class="line">├── README.md    项目说明文件</span><br><span class="line">└── src    源码</span><br><span class="line">    ├── api    请求接口封装模块</span><br><span class="line">    ├── App.vue    根组件</span><br><span class="line">    ├── assets    资源目录</span><br><span class="line">    ├── components    组件目录</span><br><span class="line">    ├── main.js    入口文件</span><br><span class="line">    ├── router    路由模块</span><br><span class="line">    ├── store     Vuex容器模块</span><br><span class="line">    ├── styles 样式目录</span><br><span class="line">    ├── utils  工具模块目录</span><br><span class="line">    └── views  视图组件目录</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/ZXC132WD" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/asdq3w21e" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/zq12w3dq" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/zxsdq13" alt=""></p><p>提交一次git远程仓库 项目初始化</p><h3 id="5-导入-Vant"><a href="#5-导入-Vant" class="headerlink" title="5. 导入 Vant"></a>5. 导入 Vant</h3><blockquote><p>​    参考：</p><ul><li><a href="https://youzan.github.io/vant/#/zh-CN/quickstart" target="_blank" rel="noopener">https://youzan.github.io/vant/#/zh-CN/quickstart</a></li></ul></blockquote><blockquote><p>封装注册使用: </p><p>​        在 <code>main.js</code> 中写一堆注册组件的代码不利于阅读和维护，建议将注册 Vant 组件的代码单独封装到一个独立的模块中。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">创建 `utils/register-vant.js`</span><br><span class="line">import Vue from <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  Button,</span><br><span class="line">  Cell,</span><br><span class="line">  CellGroup</span><br><span class="line">&#125; from <span class="string">'vant'</span></span><br><span class="line"></span><br><span class="line">Vue</span><br><span class="line">  .use(Button)</span><br><span class="line">  .use(Cell)</span><br><span class="line">  .use(CellGroup)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在 `main.js` 中加载执行注册模块</span><br><span class="line">import <span class="string">'./utils/register-vant.js'</span></span><br></pre></td></tr></table></figure><p>​    之后所有 Vant 组件的注册就都写到上面的模块中，而组件的使用该怎么使用还是怎么使用。</p><h3 id="6-配置-REM-适配"><a href="#6-配置-REM-适配" class="headerlink" title="6. 配置 REM 适配"></a>6. 配置 REM 适配</h3><p>Vant 中的样式默认使用<code>px</code>作为单位，如果需要使用<code>rem</code>单位，推荐使用以下两个工具：</p><ul><li><a href="https://github.com/cuth/postcss-pxtorem" target="_blank" rel="noopener">postcss-pxtorem</a> 是一款 postcss 插件，用于将单位转化为 rem</li><li><a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">lib-flexible</a> 用于设置 rem 基准值</li></ul><ol><li><p>使用 <a href="https://github.com/cuth/postcss-pxtorem" target="_blank" rel="noopener">postcss-pxtorem</a> 将 px 转为 rem</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-pxtorem -D</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>然后在项目根目录中创建 <code>postcss.config.js</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    <span class="string">'postcss-pxtorem'</span>: &#123;</span><br><span class="line">      rootValue: 37.5,</span><br><span class="line">      propList: [<span class="string">'*'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新启动服务</p></li><li><p>使用 <a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">amfe-flexible</a> 动态设置 REM基准值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i amfe-flexible</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">然后在 `main.js` 中加载执行该模块</span><br><span class="line">import <span class="string">'amfe-flexible'</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="7-配置封装-axios-请求函数"><a href="#7-配置封装-axios-请求函数" class="headerlink" title="7. 配置封装 axios 请求函数"></a>7. 配置封装 axios 请求函数</h3><p>这里我们直接把 axios 封装为一个请求模块，在需要的时候直接加载使用。</p><ol><li><p>安装 axios</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure></li><li><p>创建 <code>src/utils/request.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装 axios 请求模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// axios.create 方法：复制一个 axios</span></span><br><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'http://ttapi.research.itcast.cn/'</span> <span class="comment">// 基础路径</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">request.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">request.interceptors.response.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Any status code that lie within the range of 2xx cause this function to trigger</span></span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Any status codes that falls outside the range of 2xx cause this function to trigger</span></span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></table></figure></li><li><p>如何使用</p><ul><li>方式一：我们可以把 request 挂载到 Vue.prototype 原型对象中，然后在组件中通过 this 直接访问<ul><li>简单粗暴</li></ul></li><li>方式二：我们把每一个请求都封装成一个一个的独立功能函数，在需要的时候加载调用即可</li></ul><p>该项目中我们会采用方式二，更推荐。</p></li></ol><h3 id="8-处理后端返回数据超出-JS-安全整数范围问题"><a href="#8-处理后端返回数据超出-JS-安全整数范围问题" class="headerlink" title="8. 处理后端返回数据超出 JS 安全整数范围问题"></a>8. 处理后端返回数据超出 JS 安全整数范围问题</h3><p>该项目所使用的后端接口数据中包含超出 JavaScript 安全整数范围的数字，所以也需要像之前的 PC 端项目一样使用 <a href="https://github.com/sidorares/json-bigint" target="_blank" rel="noopener">json-bigint</a> 将后端返回数据处理一下才能正确使用。</p><ol><li><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i json-bigint</span><br></pre></td></tr></table></figure></li><li><p>在 <code>utils/request.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装 axios 请求模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">+ <span class="keyword">import</span> jsonBig <span class="keyword">from</span> <span class="string">'json-bigint'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// axios.create 方法：复制一个 axios</span></span><br><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'http://ttapi.research.itcast.cn/'</span> <span class="comment">// 基础路径</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置处理后端返回数据中超出 js 安全整数范围问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ request.defaults.transformResponse = [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">+  <span class="keyword">try</span> &#123;</span><br><span class="line">+    <span class="keyword">return</span> jsonBig.parse(data)</span><br><span class="line">+  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">+    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">+  &#125;</span><br><span class="line">+ &#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">request.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">request.interceptors.response.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Any status code that lie within the range of 2xx cause this function to trigger</span></span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Any status codes that falls outside the range of 2xx cause this function to trigger</span></span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></table></figure></li></ol><h2 id="☆☆-登陆页面"><a href="#☆☆-登陆页面" class="headerlink" title="☆☆  登陆页面"></a>☆☆  登陆页面</h2><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/asd2q1w56" alt=""></p><p>流程：</p><ul><li>创建登录组件并配置路由</li><li>布局</li><li>完成登录功能</li></ul><h3 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h3><h4 id="创建登录组件并配置路由"><a href="#创建登录组件并配置路由" class="headerlink" title="创建登录组件并配置路由"></a>创建登录组件并配置路由</h4><p>创建 <code>views/login/index.vue</code> 并写入以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">    登录组件</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'LoginPage'</span>,</span></span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;&#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 <code>router/index.js</code> 中配置路由表：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'@/views/login'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    component: Login</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h4 id="创建页面结构"><a href="#创建页面结构" class="headerlink" title="创建页面结构"></a>创建页面结构</h4><p>这里主要使用到三个 Vant 组件：</p><ul><li><a href="https://youzan.github.io/vant/#/zh-CN/nav-bar" target="_blank" rel="noopener">NavBar 导航栏</a></li><li><a href="https://youzan.github.io/vant/#/zh-CN/field" target="_blank" rel="noopener">Field 输入框</a></li><li><a href="https://youzan.github.io/vant/#/zh-CN/button" target="_blank" rel="noopener">Button 按钮</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;login&quot;&gt;</span><br><span class="line">    &lt;!-- 导航 --&gt;</span><br><span class="line">    &lt;van-nav-bar title=&quot;登陆&quot; /&gt;</span><br><span class="line">    &lt;!-- 输入框 --&gt;</span><br><span class="line">    &lt;van-cell-group&gt;</span><br><span class="line">      &lt;van-field label=&quot;手机号&quot; placeholder=&quot;请输入用户名&quot;/&gt;</span><br><span class="line">      &lt;van-field type=&quot;password&quot; label=&quot;验证码&quot; placeholder=&quot;请输入验证码&quot; required /&gt;</span><br><span class="line">      &lt;!-- 登陆按钮 --&gt;</span><br><span class="line">      &lt;van-button type=&quot;info&quot;&gt;登陆&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-cell-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;LoginPage&apos;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">  watch: &#123;&#125;,</span><br><span class="line">  created () &#123;&#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="样式调整"><a href="#样式调整" class="headerlink" title="样式调整"></a>样式调整</h4><p>创建 <code>styles/index.less</code> 并写入以下内容(所有页面导航都需要这个样式)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 把全局公共样式写到这里</span><br><span class="line"></span><br><span class="line">.van-nav-bar &#123;</span><br><span class="line">  background-color: #3196fa;</span><br><span class="line">  .van-nav-bar__title &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>main.js</code> 中加载使其生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. . .</span><br><span class="line">import <span class="string">'./styles/index.less'</span></span><br></pre></td></tr></table></figure><p>添加局部样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.login</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.login-btn-box</span> &#123;</span></span><br><span class="line">    padding: 20px;</span><br><span class="line"><span class="css">    <span class="selector-class">.van-button</span> &#123;</span></span><br><span class="line">      width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-实现基本登录功能"><a href="#2-实现基本登录功能" class="headerlink" title="2 .实现基本登录功能"></a>2 .实现基本登录功能</h3><p>实现流程：</p><ul><li>获取表单数据（根据接口要求使用 v-model 绑定）</li><li>注册点击登录的事件</li><li>表单验证</li><li>发请求提交</li><li>根据请求结果做下一步处理</li></ul><h4 id="根据接口要求绑定获取表单数据"><a href="#根据接口要求绑定获取表单数据" class="headerlink" title="根据接口要求绑定获取表单数据"></a>根据接口要求绑定获取表单数据</h4><p>在登录页面组件的实例选项 data 中添加 <code>user</code> 数据字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">data () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">      mobile: &apos;&apos;,</span><br><span class="line">      code: &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在表单中使用 <code>v-model</code> 绑定对应数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- van-cell-group 仅仅是提供了一个上下外边框，能看到包裹的区域 --&gt;</span><br><span class="line">&lt;van-cell-group&gt;</span><br><span class="line">  &lt;van-field</span><br><span class="line">    v-model=&quot;user.mobile&quot;</span><br><span class="line">    required</span><br><span class="line">    clearable</span><br><span class="line">    label=&quot;手机号&quot;</span><br><span class="line">    placeholder=&quot;请输入手机号&quot;</span><br><span class="line">  /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;van-field</span><br><span class="line">    v-model=&quot;user.code&quot;</span><br><span class="line">    type=&quot;password&quot;</span><br><span class="line">    label=&quot;验证码&quot;</span><br><span class="line">    placeholder=&quot;请输入验证码&quot;</span><br><span class="line">    required</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/van-cell-group&gt;</span><br></pre></td></tr></table></figure><p>最后在浏览器使用 VueDevtools 调试工具查看是否绑定成功。</p><h4 id="请求提交"><a href="#请求提交" class="headerlink" title="请求提交"></a>请求提交</h4><p>给登录按钮注册点击事件处理函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;van-button type=&quot;info&quot; @click=&quot;onLogin&quot;&gt;登录&lt;/van-button&gt;</span><br></pre></td></tr></table></figure><p>登录处理函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">async onLogin () &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const res = await request(&#123;</span><br><span class="line">      method: &apos;POST&apos;,</span><br><span class="line">      url: &apos;/app/v1_0/authorizations&apos;,</span><br><span class="line">      data: this.user</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(&apos;登录成功&apos;, res)</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    console.log(&apos;登录失败&apos;, err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-登录中提示"><a href="#3-登录中提示" class="headerlink" title="3.登录中提示"></a>3.登录中提示</h3><h4 id="Vant-中内置了轻提示组件："><a href="#Vant-中内置了轻提示组件：" class="headerlink" title="Vant 中内置了轻提示组件："></a>Vant 中内置了轻提示组件：</h4><p><a href="https://youzan.github.io/vant/#/zh-CN/toast" target="_blank" rel="noopener">轻提示</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单文字提示</span></span><br><span class="line"><span class="keyword">this</span>.$toast(<span class="string">'提示内容'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// loading 转圈圈提示</span></span><br><span class="line"><span class="keyword">this</span>.$toast.loading(&#123;</span><br><span class="line">  duration: <span class="number">0</span>, <span class="comment">// 持续展示 toast</span></span><br><span class="line">  message: <span class="string">'加载中...'</span>,</span><br><span class="line">  forbidClick: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功提示</span></span><br><span class="line"><span class="keyword">this</span>.$toast.success(<span class="string">'成功文案'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 失败提示</span></span><br><span class="line"><span class="keyword">this</span>.$toast.fail(<span class="string">'失败文案'</span>)</span><br></pre></td></tr></table></figure><h4 id="文字提示："><a href="#文字提示：" class="headerlink" title="文字提示："></a>文字提示：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$toast(<span class="string">'提示内容'</span>)</span><br></pre></td></tr></table></figure><h4 id="加载提示（永远不会关闭）："><a href="#加载提示（永远不会关闭）：" class="headerlink" title="加载提示（永远不会关闭）："></a>加载提示（永远不会关闭）：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$toast.loading(&#123;</span><br><span class="line">  mask: <span class="literal">true</span>,</span><br><span class="line">  message: <span class="string">'加载中...'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="成功-失败提示："><a href="#成功-失败提示：" class="headerlink" title="成功/失败提示："></a>成功/失败提示：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$toast.success(<span class="string">'提示内容'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$toast.fail(<span class="string">'提示内容'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据文档提示，我们可以看到这两个方法也支持自定义方式</span></span><br><span class="line"><span class="keyword">this</span>.$toast.success(&#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="可以手动控制关闭的-loading："><a href="#可以手动控制关闭的-loading：" class="headerlink" title="可以手动控制关闭的 loading："></a>可以手动控制关闭的 loading：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启</span></span><br><span class="line"><span class="keyword">const</span> toast = <span class="keyword">this</span>.$toast.loading(&#123;</span><br><span class="line">  duration: <span class="number">0</span>,       <span class="comment">// 持续展示 toast</span></span><br><span class="line">  forbidClick: <span class="literal">true</span>, <span class="comment">// 禁用背景点击</span></span><br><span class="line">  loadingType: <span class="string">'spinner'</span>,</span><br><span class="line">  message: <span class="string">'倒计时 3 秒'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束 loading</span></span><br><span class="line"><span class="comment">// 如果后面有 success、fail 之类的提示，就不需要手动关闭 loading 了</span></span><br><span class="line">toast.clear()</span><br></pre></td></tr></table></figure><h3 id="4-封装-api-请求模块"><a href="#4-封装-api-请求模块" class="headerlink" title="4. 封装 api 请求模块"></a>4. 封装 api 请求模块</h3><h4 id="创建-src-api-user-js"><a href="#创建-src-api-user-js" class="headerlink" title="创建 src/api/user.js"></a>创建 <code>src/api/user.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户相关的请求模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    url: <span class="string">'/app/v1_0/authorizations'</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="然后在登录页面中加载调用"><a href="#然后在登录页面中加载调用" class="headerlink" title="然后在登录页面中加载调用"></a>然后在登录页面中加载调用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">+ import &#123; login &#125; from &apos;@/api/user&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;LoginPage&apos;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user: &#123;</span><br><span class="line">        mobile: &apos;13911111111&apos;,</span><br><span class="line">        code: &apos;246810&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;&#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async onLogin () &#123;</span><br><span class="line">      // const loginToast = this.$toast.loading(&#123;</span><br><span class="line">      this.$toast.loading(&#123;</span><br><span class="line">        duration: 0, // 持续时间，0表示持续展示不停止</span><br><span class="line">        forbidClick: true, // 是否禁止背景点击</span><br><span class="line">        message: &apos;登录中...&apos; // 提示消息</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">+        const res = await login(this.user)</span><br><span class="line">        console.log(&apos;登录成功&apos;, res)</span><br><span class="line">        // 提示 success 或者 fail 的时候，会先把其它的 toast 先清除</span><br><span class="line">        this.$toast.success(&apos;登录成功&apos;)</span><br><span class="line">      &#125; catch (err) &#123;</span><br><span class="line">        console.log(&apos;登录失败&apos;, err)</span><br><span class="line">        this.$toast.fail(&apos;登录失败，手机号或验证码错误&apos;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 停止 loading，它会把当前页面中所有的 toast 都给清除</span><br><span class="line">      // loginToast.clear()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后项目中所有的请求就都不要直接在组件中去直接发了，而是都采用上面的方式封装之后进行使用，这是一个建议的做法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;☆☆-项目初始化&quot;&gt;&lt;a href=&quot;#☆☆-项目初始化&quot; class=&quot;headerlink&quot; title=&quot;☆☆  项目初始化&quot;&gt;&lt;/a&gt;☆☆  项目初始化&lt;/h2&gt;&lt;h3 id=&quot;1-使用Vue-cli初始化项目&quot;&gt;&lt;a href=&quot;#1-使用Vue-cli
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="移动端项目" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>常见问题</title>
    <link href="http://yoursite.com/2019/11/30/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/11/30/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id>
    <published>2019-11-30T11:47:53.000Z</published>
    <updated>2019-12-07T09:05:51.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="☆-创建vue项目的时候怎么选择是用yarn还是npm"><a href="#☆-创建vue项目的时候怎么选择是用yarn还是npm" class="headerlink" title="☆ 创建vue项目的时候怎么选择是用yarn还是npm?"></a>☆ 创建vue项目的时候怎么选择是用yarn还是npm?</h2><blockquote><p>VueCLI 创建项目的时候会自动帮我们装包。</p><ul><li>如果你的机器只有 npm，那么它就使用 npm 安装</li><li>如果你的机器只有 yarn，那么它就使用 yarn 安装</li><li>如果你机器同时存在 npm 和 yarn，它就会问你使用哪个</li></ul><p>你的下载包的镜像地址看起来比较慢，是否使用淘宝的npm镜像源下载第三方包？</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vue create hello</span><br><span class="line">?  Your connection to the default yarn registry seems to be slow.</span><br><span class="line">   Use https://registry.npm.taobao.org <span class="keyword">for</span> faster installation? (Y/n)</span><br></pre></td></tr></table></figure><p>建议选择是，使用淘宝的包下载地址。</p><p>如果你机器同时存在 npm 和 yarn，它就会问你使用哪个：</p><ul><li>npm</li><li>yarn</li></ul><p>不管你选择的哪个，它会自动把你的这个选择该记录起来，之后不再提示你，不给你重新选择的机会了。</p><p>它会把配置记录到操作系统的用户目录下的 .vuerc 文件中。</p><p>选择删除，就可以重新提示了</p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/zjchqiuw" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/asdqho132" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/a3d213w2" alt=""></p><p>rc开头的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm ~/.vuerc</span><br><span class="line"></span><br><span class="line">sudo rm ~/.vuerc</span><br></pre></td></tr></table></figure><h2 id="☆-将“使用VSCode打开”添加至右键菜单"><a href="#☆-将“使用VSCode打开”添加至右键菜单" class="headerlink" title="☆ 将“使用VSCode打开”添加至右键菜单"></a>☆ 将“使用VSCode打开”添加至右键菜单</h2><blockquote><p><code>Windows</code>上面安装<code>Visual Studio Code</code>编辑器后,常常会因为安装的时候忘记勾选等原因,没有将<code>Open with Code</code>(右键快捷方式)”添加到鼠标右键菜单里,所以需要我们手动将<code>VSCode</code>添加至鼠标右键菜单之中</p></blockquote><p>最终功能如下：</p><ul><li>右键<code>文件夹</code>，可以使用<code>vscode</code>打开</li><li>右键<code>单文件</code>，可以使用<code>vscode</code>打开</li><li>右键<code>空白处</code>，可以使用<code>vscode</code>打开</li></ul><p>解决:</p><p>​     1.新建一个名为 <code>1.reg</code> 的文件，找一个记事本或者sublime打开，文件名无所谓，但是一定需要带上 <code>.reg</code> 后缀。</p><ol start="2"><li><p>查看你自己的电脑的vscode安装目录，最简单的方法就是右键桌面的vscode，查看属性就知道了。以我的安装地址为例：C:\Program Files\Microsoft VS Code\Code.exe， 单反斜杠最好都换成双反斜杠<br>复制以下内容到 1.reg 文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\VSCode]</span><br><span class="line">@=<span class="string">"Open with Code"</span></span><br><span class="line"><span class="string">"Icon"</span>=<span class="string">"C:\\Program Files\\Microsoft VS Code\\Code.exe"</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\VSCode\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">"\"C:\\Program Files\\Microsoft VS Code\\Code.exe\" \"%1\""</span></span><br><span class="line"></span><br><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode]</span><br><span class="line">@=<span class="string">"Open with Code"</span></span><br><span class="line"><span class="string">"Icon"</span>=<span class="string">"C:\\Program Files\\Microsoft VS Code\\Code.exe"</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">"\"C:\\Program Files\\Microsoft VS Code\\Code.exe\" \"%V\""</span></span><br><span class="line"></span><br><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode]</span><br><span class="line">@=<span class="string">"Open with Code"</span></span><br><span class="line"><span class="string">"Icon"</span>=<span class="string">"C:\\Program Files\\Microsoft VS Code\\Code.exe"</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">"\"C:\\Program Files\\Microsoft VS Code\\Code.exe\" \"%V\""</span></span><br></pre></td></tr></table></figure></li></ol><p>将: <code>C:\\Program Files\\Microsoft VS Code\\Code.exe\</code>换成你<code>VS Code</code>所在的目录的全称</p><p>列如:<code>D:\QD\Microsoft VS Code</code></p><p>双击这个文件，之后都选 “是”。</p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/qdw3e21q3we" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;☆-创建vue项目的时候怎么选择是用yarn还是npm&quot;&gt;&lt;a href=&quot;#☆-创建vue项目的时候怎么选择是用yarn还是npm&quot; class=&quot;headerlink&quot; title=&quot;☆ 创建vue项目的时候怎么选择是用yarn还是npm?&quot;&gt;&lt;/a&gt;☆ 创建
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="常见问题" scheme="http://yoursite.com/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>异步编程--Promise与Async</title>
    <link href="http://yoursite.com/2019/11/28/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B--Promise%E4%B8%8EAsync/"/>
    <id>http://yoursite.com/2019/11/28/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B--Promise%E4%B8%8EAsync/</id>
    <published>2019-11-28T19:50:14.000Z</published>
    <updated>2019-12-07T09:05:51.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是异步编程"><a href="#1-什么是异步编程" class="headerlink" title="1. 什么是异步编程"></a>1. 什么是异步编程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">"Button"</span>&gt;展示异步操作&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var Button = document.getElementById('Button');</span></span><br><span class="line"><span class="regexp">        console.log(Button);</span></span><br><span class="line"><span class="regexp">        Button.onclick = function () &#123;</span></span><br><span class="line"><span class="regexp">            console.log('展示异步操作--a');</span></span><br><span class="line"><span class="regexp">            </span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        console.log('展示异步操作--b');</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><p>​                                                                                        ↓↓</p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/3234" alt=""></p><blockquote><p>如上图所示,代码会先执行 ‘展示异步操作–b’ 然后点击按钮后悔再执行 ‘展示异步操作–a’</p><p>简单的理解就是: </p><p>​        同步是指：当程序1调用程序2时，程序1停下不动，直到程序2完成回到程序1来，程序1才继续执行下去。<br>​        异步是指：当程序1调用程序2时，程序1径自继续自己的下一个动作，不受程序2的的影响。 </p><p>​        异步函数的特点就是不等待</p></blockquote><h2 id="2-在JavaScript中常见的异步代码是什么"><a href="#2-在JavaScript中常见的异步代码是什么" class="headerlink" title="2. 在JavaScript中常见的异步代码是什么"></a>2. 在JavaScript中常见的异步代码是什么</h2><blockquote><p>​    浏览器中的定时器</p><p>​    Ajax请求</p><p>​    node.js的文件操作</p><p>​    网络操作</p></blockquote><p>定时器:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定时器</span></span><br><span class="line">    <span class="comment">// 在 JavaScript 中，记住一件事儿：所有的异步回调函数执行一定在普通代码执行之后</span></span><br><span class="line">    <span class="comment">// 把该任务先分配下去</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'b'</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 输出 c</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>请求:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建请求对象</span></span><br><span class="line">    <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加请求回调函数</span></span><br><span class="line">    <span class="comment">// 请求成功，就会自动执行该回调函数</span></span><br><span class="line">    oReq.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">      <span class="comment">// 获取输出响应结果</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置请求方法和请求路径</span></span><br><span class="line">    oReq.open(<span class="string">"GET"</span>, <span class="string">"http://jsonplaceholder.typicode.com/posts"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发出请求</span></span><br><span class="line">    oReq.send();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsonplaceholder为免费的在线请求接口</span></span><br><span class="line"><span class="comment">// 输出结果 1 3 2</span></span><br></pre></td></tr></table></figure><h2 id="3-异步控制"><a href="#3-异步控制" class="headerlink" title="3. 异步控制"></a>3. 异步控制</h2><p>异步并行: 输出结果 不确定</p><p>异步串行: 输出结果 1-5-2-3-4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script src=<span class="string">"request.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步并行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步的</span></span><br><span class="line">    request(<span class="string">'http://jsonplaceholder.typicode.com/posts'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'posts 的响应结果'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步的</span></span><br><span class="line">    request(<span class="string">'http://jsonplaceholder.typicode.com/comments'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'comments 的响应结果'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步的</span></span><br><span class="line">    request(<span class="string">'http://jsonplaceholder.typicode.com/users'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'users 的响应结果'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步串行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    request(<span class="string">'http://jsonplaceholder.typicode.com/posts'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'2 posts 的响应结果'</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 请求下一个</span></span><br><span class="line">      request(<span class="string">'http://jsonplaceholder.typicode.com/users'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'3 users 的响应结果'</span>)</span><br><span class="line"></span><br><span class="line">         request(<span class="string">'http://jsonplaceholder.typicode.com/comments'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'4 comments 的响应结果'</span>)</span><br><span class="line">         &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-回调地狱-异步函数会出现的问题"><a href="#4-回调地狱-异步函数会出现的问题" class="headerlink" title="4. 回调地狱(异步函数会出现的问题)"></a>4. 回调地狱(异步函数会出现的问题)</h2><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1" alt=""></p><p>异步串行就会出现上述问题</p><p>不影响功能,只是不利于阅读和维护</p><h2 id="5-Promise-解决回调地狱"><a href="#5-Promise-解决回调地狱" class="headerlink" title="5. Promise(解决回调地狱)"></a>5. <code>Promise</code>(解决回调地狱)</h2><blockquote><p>​    为了更好的学习 Promise，建议参考 <a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/promise</a> </p></blockquote><p>我们一直使用axios,其实就是<code>封装</code>的<code>Promise</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">method: <span class="string">'xxx'</span>,</span><br><span class="line">url:<span class="string">''</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用axios解决回调地狱问题的时候</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script src=<span class="string">"node_modules/axios/dist/axios.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一切的一切都是：Promise</span></span><br><span class="line"><span class="comment">// 正确的使用</span></span><br><span class="line">    axios(&#123;</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      url: <span class="string">'http://jsonplaceholder.typicode.com/posts'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'2 posts 的响应结果'</span>)</span><br><span class="line">      <span class="keyword">return</span> axios(&#123;</span><br><span class="line">        method: <span class="string">'GET'</span>,</span><br><span class="line">        url: <span class="string">'http://jsonplaceholder.typicode.com/users'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'3 users 的响应结果'</span>)</span><br><span class="line">      <span class="keyword">return</span> axios(&#123;</span><br><span class="line">        method: <span class="string">'GET'</span>,</span><br><span class="line">        url: <span class="string">'http://jsonplaceholder.typicode.com/comments'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'4 comments 的响应结果'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">// 不好的使用</span></span><br><span class="line">    axios(&#123;</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      url: <span class="string">'http://jsonplaceholder.typicode.com/posts'</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'2 posts 的响应结果'</span>)</span><br><span class="line">      axios(&#123;</span><br><span class="line">        method: <span class="string">'GET'</span>,</span><br><span class="line">        url: <span class="string">'http://jsonplaceholder.typicode.com/users'</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'3 users 的响应结果'</span>)</span><br><span class="line">        axios(&#123;</span><br><span class="line">          method: <span class="string">'GET'</span>,</span><br><span class="line">          url: <span class="string">'http://jsonplaceholder.typicode.com/comments'</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'4 comments 的响应结果'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="5-1-基本概念"><a href="#5-1-基本概念" class="headerlink" title="5.1. 基本概念"></a>5.1. 基本概念</h3><blockquote><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。 它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了 Promise 对象。 </p><p>所谓 Promise ，简单说就是一个容器，里面保存着异步操作。从语法上说，Promise 是一个对象，从 它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p><p>有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此 外， Promise 对象提供统一的接口，使得控制异步操作更加容易。 </p><p> Promise 也有一些缺点。首先，无法取消 Promise ，一旦新建它就会立即执行，无法中途取消。其 次，如果不设置回调函数， Promise 内部抛出的错误，不会反应到外部。第三，当处于 pending 状态 时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）</p></blockquote><h3 id="5-2-基本用法"><a href="#5-2-基本用法" class="headerlink" title="5.2. 基本用法"></a>5.2. 基本用法</h3><p> ES6 规定， Promise 对象是一个构造函数，用来生成 Promise 实例。<br> 下面代码创造了一个 Promise 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;  </span><br><span class="line"><span class="comment">// ... some code</span></span><br><span class="line"> <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;   </span><br><span class="line"> resolve(value);  </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> reject(error);  </span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject 。它们是两个 函数，由 JavaScript 引擎提供，不用自己部署。 </p><p>resolve 函数的作用是，将 Promise 对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去； reject 函数的作用 是，将 Promise 对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时 调用，并将异步操作报出的错误，作为参数传递出去。</p><p>Promise 实例生成以后，可以用 then 方法分别指定 resolved 状态和 rejected 状态的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="comment">// success </span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line"><span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>then 方法可以接受两个回调函数作为参数。第一个回调函数是 Promise 对象的状态变为 resolved 时 调用，第二个回调函数是 Promise 对象的状态变为 rejected 时调用。其中，第二个函数是可选的，不 一定要提供。这两个函数都接受 Promise 对象传出的值作为参数。<br>下面是一个 Promise 对象的简单例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, ms, <span class="string">'done'</span>);</span><br><span class="line">   &#125;); </span><br><span class="line">&#125;</span><br><span class="line">timeout(<span class="number">100</span>).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(value); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中， timeout 方法返回一个 Promise 实例，表示一段时间以后才会发生的结果。过了指定的 时间（ ms 参数）以后， Promise 实例的状态变为 resolved ，就会触发 then 方法绑定的回调函数。 </p><h3 id="5-3-then-方法"><a href="#5-3-then-方法" class="headerlink" title="5.3. then 方法"></a>5.3. then 方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 将一个异步代码包装到 Promise 中</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1、定义一个函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">(url)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 2、在函数中 return 出一个 Promise 对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3、在 Promise 容器中执行异步操作</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4、异步操作</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//    成功：resolve</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//    失败：reject</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建请求对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 添加请求回调函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 请求成功，就会自动执行该回调函数</span></span></span><br><span class="line"><span class="actionscript">        oReq.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 获取输出响应结果</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(this.responseText);</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// 当请求成功了，也就是异步执行结束了，callback 被调用了</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 我调用的时候，给 callback 传递了一个参数</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// callback(this.responseText)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// 如果没有数据</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// resolve()</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// 如果有数据</span></span></span><br><span class="line"><span class="actionscript">          resolve(<span class="keyword">this</span>.responseText)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// 只有这里才能拿到正确的响应结果 responseText</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// return this.responseText</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        oReq.addEventListener(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(err)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 失败 reject</span></span></span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 设置请求方法和请求路径</span></span></span><br><span class="line"><span class="actionscript">        oReq.open(<span class="string">"GET"</span>, url);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 发出请求</span></span></span><br><span class="line">        oReq.send();</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 执行获取结果</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// p.then(成功, 失败)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// Promise 都是通过 .then 方法来获取成功或者失败的结果</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// request('http://jsonplaceholder.typicode.com/posts')</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   .then(data =&gt; &#123; // 参数1：resolve</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//     console.log('成功了', data)</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   &#125;, err =&gt; &#123; // 参数2：reject</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//     console.log('失败了', err)</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   &#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// then 方法之后可以继续 then</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 原因是 then 方法执行完以后会返回一个新的 Promise 对象</span></span></span><br><span class="line"><span class="actionscript">    request(<span class="string">'http://jsonplaceholder.typicode.com/posts'</span>)</span></span><br><span class="line"><span class="javascript">      .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// return new Promise((resolve) =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//  resolve()</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// &#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 如果是普通数据，那么它会把该数据包装为那个返回的 Promise 的 resolve 结果</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// return new Promise((resolve) =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//   resolve('hello')</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// return 'hello'</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 因为每个 then 始终返回 promise 对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 所以我才可以在后面继续 .then</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 每一个后续的 .then 都是在给上一个 then 中返回的 Promise 对象注册：resolve、reject</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 如果你返回的数据就是一个 Promise 对象，那它就不做任何处理了</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">            resolve(<span class="string">'hello'</span>)</span></span><br><span class="line">          &#125;, 2000)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">2</span>, data)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// return new Promise((resolve) =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//   setTimeout(() =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     resolve('hello')</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//   &#125;, 1000)</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// &#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// ptimeout(1000) 返回一个 promise 对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// const p = ptimeout(1000)</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// return p</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> ptimeout(<span class="number">1000</span>)</span></span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span></span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">4</span>)</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">ptimeout</span><span class="params">(time)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">          resolve()</span><br><span class="line">        &#125;, time)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// Async 函数，简化了 Promise 的结果获取而已</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-使用-Promise-的方式封装异步操作"><a href="#5-4-使用-Promise-的方式封装异步操作" class="headerlink" title="5.4. 使用 Promise 的方式封装异步操作"></a>5.4. 使用 Promise 的方式封装异步操作</h3><p>操作步骤:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、定义一个函数 </span><br><span class="line">2、在函数中返回一个 Promise 对象 </span><br><span class="line">3、在 Promise 容器中执行异步操作 </span><br><span class="line">4、成功：resolve；失败 reject；</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 2、在函数中 return 出一个 Promise 对象</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 3、在 Promise 容器中执行异步操作</span></span><br><span class="line">        <span class="comment">// 4、异步操作</span></span><br><span class="line">        <span class="comment">//    成功：resolve</span></span><br><span class="line">        <span class="comment">//    失败：reject</span></span><br><span class="line">        <span class="comment">// 创建请求对象</span></span><br><span class="line">        <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加请求回调函数</span></span><br><span class="line">        <span class="comment">// 请求成功，就会自动执行该回调函数</span></span><br><span class="line">        oReq.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 获取输出响应结果</span></span><br><span class="line">          <span class="comment">// console.log(this.responseText);</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 当请求成功了，也就是异步执行结束了，callback 被调用了</span></span><br><span class="line">          <span class="comment">// 我调用的时候，给 callback 传递了一个参数</span></span><br><span class="line">          <span class="comment">// callback(this.responseText)</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 如果没有数据</span></span><br><span class="line">          <span class="comment">// resolve()</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 如果有数据</span></span><br><span class="line">          resolve(<span class="keyword">this</span>.responseText)</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 只有这里才能拿到正确的响应结果 responseText</span></span><br><span class="line">          <span class="comment">// return this.responseText</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        oReq.addEventListener(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 失败 reject</span></span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置请求方法和请求路径</span></span><br><span class="line">        oReq.open(<span class="string">"GET"</span>, url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发出请求</span></span><br><span class="line">        oReq.send();</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">request(<span class="string">'请求路径'</span>)  </span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 其它逻辑</span></span><br><span class="line">       &#125;, err =&gt; &#123;</span><br><span class="line">       <span class="comment">// 处理异常</span></span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p>尤其是当你想要控制多个异步代码的时候，这个时候才能真正发挥 Promise 的价值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">request(<span class="string">'请求路径'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br><span class="line"><span class="keyword">return</span> promise 包装了定时器</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 定时器时间到了</span></span><br><span class="line"><span class="keyword">return</span> promise 对象 (异步操作)</span><br><span class="line">&#125;)</span><br><span class="line">then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;)</span><br></pre></td></tr></table></figure><h3 id="5-5-异常处理"><a href="#5-5-异常处理" class="headerlink" title="5.5. 异常处理"></a>5.5. 异常处理</h3><p>处理promise 中的异常有两种方式:</p><ul><li>then 方法的第二个参数</li><li>或者.catch 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 失败 then 方法的第2个参数来接收处理异常</span></span><br><span class="line">  <span class="comment">// request('dbsjabdjsabjdsa')</span></span><br><span class="line">  <span class="comment">//   .then(data =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     console.log('请求成功', data)</span></span><br><span class="line">  <span class="comment">//   &#125;, err =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     console.log('请求失败', err)</span></span><br><span class="line">  <span class="comment">//   &#125;)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 .catch 方法接收处理异常</span></span><br><span class="line">  <span class="comment">// request('dbsjabdjsabjdsa')</span></span><br><span class="line">  <span class="comment">//   .then(data =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     console.log('请求成功', data)</span></span><br><span class="line">  <span class="comment">//   &#125;)</span></span><br><span class="line">  <span class="comment">//   .catch(err =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     console.log('请求失败', err)</span></span><br><span class="line">  <span class="comment">//   &#125;)</span></span><br><span class="line"></span><br><span class="line">  request(<span class="string">'http://jsonplaceholder.typicode.com/posts'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'请求成功'</span>, data)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'请求失败'</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line">    .finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'无论成功或是失败都会执行'</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="6-Async函数解决回调地狱"><a href="#6-Async函数解决回调地狱" class="headerlink" title="6. Async函数解决回调地狱)"></a>6. <code>Async</code>函数解决回调地狱)</h2><blockquote><p>​    为了更好的学习 Async 函数，建议参考  <a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/async</a> </p></blockquote><p> ES2017 标准引入了 async 函数，使得异步操作变得更加方便。 </p><h3 id="6-1-基本用法"><a href="#6-1-基本用法" class="headerlink" title="6.1. 基本用法"></a>6.1. 基本用法</h3><p>我们可以使用 Async-await 来简化获取 Promise 的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 等待</span></span><br><span class="line"><span class="keyword">const</span> 成员 = <span class="keyword">await</span> prmose 对象</span><br><span class="line"><span class="comment">// 继续往后执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-任何函数都可以使用async"><a href="#6-2-任何函数都可以使用async" class="headerlink" title="6.2. 任何函数都可以使用async"></a>6.2. 任何函数都可以使用async</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">具名函数</span><br><span class="line">async <span class="keyword">function</span> <span class="function"><span class="title">main</span></span> () &#123;&#125;</span><br><span class="line">匿名函数</span><br><span class="line">async <span class="function"><span class="title">function</span></span> () &#123;&#125;</span><br><span class="line">箭头函数</span><br><span class="line">async () =&gt; &#123;&#125;</span><br><span class="line">对象成员函数简写</span><br><span class="line">async <span class="function"><span class="title">hello</span></span> () &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-返回值-Promise"><a href="#6-3-返回值-Promise" class="headerlink" title="6.3. 返回值 Promise"></a>6.3. 返回值 Promise</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// function main() &#123;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   return 123</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log(main())</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// async 函数始终返回 Promise</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// async 函数的返回值</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 如果是普通数据，则直接把它包装到 promise 对象中</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 数据就是 resolve 的结果</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="number">123</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 如果你返回的直接就是一个 promise 对象，则不作任何处理</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// return new Promise((resolve) =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//   setTimeout(() =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//     resolve(123)</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//   &#125;, 2000)</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// &#125;)</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 通过 then 方法来获取 async 函数的返回值</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// const ret = main()</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// ret.then(data =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   console.log(data)</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 获取在另一个 async 中使用 await 来获取</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main2</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> data = <span class="keyword">await</span> main()</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    main2()</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-4-异常处理"><a href="#6-4-异常处理" class="headerlink" title="6.4. 异常处理"></a>6.4. 异常处理</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 还是使用 .catch 来处理异常</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// const data = await request('dsanlksas')</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//   .catch(err =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//     console.log('请求失败了')</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//   &#125;)</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// console.log(data)</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="number">1</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 更推荐使用 try-catch 来捕获异常</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// try 捕获不到它的异常</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// request('dsabjdsdsa').then(data =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//   console.log(data)</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// JSON.parse('dnsakdnsa')</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> data = <span class="keyword">await</span> request(<span class="string">'http://jsonplaceholder.typicode.com/posts'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> data2 = <span class="keyword">await</span> request(<span class="string">'dnsandlksa'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">catch</span> (err) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'请求失败了'</span>, err)</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="number">5</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">(url)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 2、在函数中 return 出一个 Promise 对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3、在 Promise 容器中执行异步操作</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4、异步操作</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//    成功：resolve</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//    失败：reject</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建请求对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 添加请求回调函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 请求成功，就会自动执行该回调函数</span></span></span><br><span class="line"><span class="actionscript">        oReq.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 获取输出响应结果</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(this.responseText);</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// 当请求成功了，也就是异步执行结束了，callback 被调用了</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 我调用的时候，给 callback 传递了一个参数</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// callback(this.responseText)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// 如果没有数据</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// resolve()</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// 如果有数据</span></span></span><br><span class="line"><span class="actionscript">          resolve(<span class="keyword">this</span>.responseText)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// 只有这里才能拿到正确的响应结果 responseText</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// return this.responseText</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        oReq.addEventListener(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(err)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 失败 reject</span></span></span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 设置请求方法和请求路径</span></span></span><br><span class="line"><span class="actionscript">        oReq.open(<span class="string">"GET"</span>, url);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 发出请求</span></span></span><br><span class="line">        oReq.send();</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-什么是异步编程&quot;&gt;&lt;a href=&quot;#1-什么是异步编程&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是异步编程&quot;&gt;&lt;/a&gt;1. 什么是异步编程&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="异步编程、Promise、Async函数" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E3%80%81Promise%E3%80%81Async%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>搭建使用 Hexo 结合 GitHub Pages 搭建静态网 站</title>
    <link href="http://yoursite.com/2019/11/27/PersonageHexo/"/>
    <id>http://yoursite.com/2019/11/27/PersonageHexo/</id>
    <published>2019-11-27T20:42:57.000Z</published>
    <updated>2019-12-07T09:05:51.408Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>​    Hexo官网: <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/index.html</a> </p><p>​    安装依赖:node.js    git<br>​    新建一个文件</p></blockquote><h2 id="1-安装-Hexo"><a href="#1-安装-Hexo" class="headerlink" title="1. 安装 Hexo"></a>1. 安装 Hexo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo --version    (确认是否安装成功)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E7%A1%AE%E8%AE%A4%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F" alt=""></p><p>​            成功样式</p><h2 id="2-生成自己的网站"><a href="#2-生成自己的网站" class="headerlink" title="2. 生成自己的网站"></a>2. 生成自己的网站</h2><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init 网站项目目录名称</span><br><span class="line">hexo init my-blog(举例)</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E7%9B%AE%E5%BD%95" alt=""></p><h2 id="3-本地预览"><a href="#3-本地预览" class="headerlink" title="3. 本地预览"></a>3. 本地预览</h2><blockquote><p>在你的网站目录下执行该命令，它会启动一个本地 http 服务，用于预览 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>​     部署</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>​     本地预览</p></blockquote><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88" alt=""></p><p>注意: 查看完本地的这个之后直接关闭就可以了</p><h2 id="4-目录结构"><a href="#4-目录结构" class="headerlink" title="4. 目录结构"></a>4. 目录结构</h2><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E7%9B%AE%E5%BD%95" alt=""></p><ul><li>node_modules 第三方包</li><li>scaﬀolds 文章模板</li><li>source 源代码，markdown</li><li>themes 主题目录</li></ul><h2 id="5-写文章"><a href="#5-写文章" class="headerlink" title="5. 写文章"></a>5. 写文章</h2><p>在项目的<code>source/_posts</code>中创建 Markdown 文件并写入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--title: 文章标题</span><br><span class="line">--</span><br><span class="line">Markdown内容...</span><br></pre></td></tr></table></figure><p>只需要创建文件写就可以了，不需要做任何操作。</p><p>更多内容请参考： <a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/writing</a> 。</p><h2 id="6-如何部署-一步都不能错"><a href="#6-如何部署-一步都不能错" class="headerlink" title="6. 如何部署(一步都不能错)"></a>6. 如何部署(一步都不能错)</h2><p>步骤3执行完 =&gt;  执行命令:hexo generate</p><p> 生成静态文件。</p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E6%96%87%E4%BB%B6" alt=""></p><p>这个就是要部署的一个文件</p><p>然后GIT推送到GitHub仓库</p><p>启动GitHub page 方式</p><p>这种方式麻烦(不适用)!!!!!!!!!!!!!!!!!!</p><p>以上方法适合本地测试使用!!!!!!!!!!!!!</p><h2 id="7-自动发布-远程仓库-正式安装"><a href="#7-自动发布-远程仓库-正式安装" class="headerlink" title="7. 自动发布(远程仓库-正式安装)"></a>7. 自动发布(远程仓库-正式安装)</h2><h3 id="7-1-准备"><a href="#7-1-准备" class="headerlink" title="7.1 准备"></a>7.1 准备</h3><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init my-blogs创建文件夹</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>​ 在GitHub上创建远程仓库,下图所示:</p></blockquote><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E4%BB%93%E8%BF%9C%E7%A8%8B%E5%BA%93" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E6%9C%AC%E5%9C%B0%E4%BF%AE%E6%94%B9" alt=""></p><p>​    提交到远程仓库</p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E4%BB%93%E5%BA%93" alt=""></p><h3 id="7-2-在远程仓库部署"><a href="#7-2-在远程仓库部署" class="headerlink" title="7.2 在远程仓库部署"></a>7.2 在远程仓库部署</h3><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E9%83%A8%E7%BD%B2" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/2" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E9%98%BF%E8%90%A8%E5%BE%B7" alt=""></p><p>​                                                                                        滑到最下边</p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E5%AE%89%E6%85%B0" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E9%98%BF%E6%96%AF%E9%A1%BF" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/123" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ACCESS_TOKEN</span><br><span class="line"></span><br><span class="line"><span class="comment">// Name 为该字段 复制即可</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/123%E7%88%B1%E6%88%91%E7%9A%84" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/2374" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">name: GitHub Actions Build and Deploy Demo </span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master </span><br><span class="line">jobs:</span><br><span class="line">  build-and-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions/checkout@master</span><br><span class="line">        </span><br><span class="line">      - name: Build and Deploy</span><br><span class="line">        uses: JamesIves/github-pages-deploy-action@master</span><br><span class="line">        env:</span><br><span class="line">          ACCESS_TOKEN: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span><br><span class="line">          BRANCH: gh-pages</span><br><span class="line">          FOLDER: public</span><br><span class="line">          BUILD_SCRIPT: npm install &amp;&amp; npm run build</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 复制该字段到Edit 里面</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E5%87%A0%E5%8D%81%E5%9D%97" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E4%BD%BF%E7%94%A8" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/1231%E4%BD%8D" alt=""></p><p>​                                                                                    打开上面网址,查看是否能打开</p><h2 id="8-更换主题-点击此处获取连接"><a href="#8-更换主题-点击此处获取连接" class="headerlink" title="8. 更换主题(点击此处获取连接)"></a>8. <a href="https://hexo.io/themes/" target="_blank" rel="noopener">更换主题(点击此处获取连接)</a></h2><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/12312" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/12334%E6%89%8B%E6%89%93" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/23454352" alt=""></p><p>​                                                                                        文件名改成git clone 后缀的名字</p><p>​                                                                            解压成这样到这个文件放到my-blogs/themes 文件夹下</p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/123%E8%AF%B7%E9%97%AE" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E9%A9%B1%E8%9A%8A%E5%99%A8" alt=""></p><h2 id="9-直接推送到远程仓库-具体怎么修改内容参考主题文档-这个时候可以直接打开你的页面了"><a href="#9-直接推送到远程仓库-具体怎么修改内容参考主题文档-这个时候可以直接打开你的页面了" class="headerlink" title="9. 直接推送到远程仓库,具体怎么修改内容参考主题文档(这个时候可以直接打开你的页面了)"></a>9. 直接推送到远程仓库,具体怎么修改内容参考主题文档(这个时候可以直接打开你的页面了)</h2><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/1231242" alt=""></p><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/12312434121" alt=""></p><h2 id="10-以后每次修改直好接提交到远程仓库-GitHub会自动发布"><a href="#10-以后每次修改直好接提交到远程仓库-GitHub会自动发布" class="headerlink" title="10. 以后每次修改直好接提交到远程仓库,GitHub会自动发布"></a>10. 以后每次修改直好接提交到远程仓库,GitHub会自动发布</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;​    Hexo官网: &lt;a href=&quot;https://hexo.io/zh-cn/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/zh-cn/docs/index
      
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hello Wor</title>
    <link href="http://yoursite.com/2019/11/27/hello-world/"/>
    <id>http://yoursite.com/2019/11/27/hello-world/</id>
    <published>2019-11-27T17:05:38.000Z</published>
    <updated>2019-12-07T09:05:51.412Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-本博客学习内容与工具使用仅供参考"><a href="#1-本博客学习内容与工具使用仅供参考" class="headerlink" title="1. 本博客学习内容与工具使用仅供参考"></a>1. 本博客学习内容与工具使用仅供参考</h3><h3 id="2-本主题使用的是-叶罗阁的主题"><a href="#2-本主题使用的是-叶罗阁的主题" class="headerlink" title="2. 本主题使用的是 叶罗阁的主题"></a>2. 本主题使用的是 <a href="https://yelog.org/" target="_blank" rel="noopener">叶罗阁</a>的主题</h3><h3 id="3-支持文章搜索"><a href="#3-支持文章搜索" class="headerlink" title="3. 支持文章搜索"></a>3. 支持文章搜索</h3><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/%E7%88%B1%E4%BB%95%E8%BE%BE" alt=""></p><h3 id="4-支持标签搜索"><a href="#4-支持标签搜索" class="headerlink" title="4. 支持标签搜索"></a>4. 支持标签搜索</h3><p><img src="https://raw.githubusercontent.com/fangshiqian/mtup/master/mtup/zx34dq65wd" alt=""></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-本博客学习内容与工具使用仅供参考&quot;&gt;&lt;a href=&quot;#1-本博客学习内容与工具使用仅供参考&quot; class=&quot;headerlink&quot; title=&quot;1. 本博客学习内容与工具使用仅供参考&quot;&gt;&lt;/a&gt;1. 本博客学习内容与工具使用仅供参考&lt;/h3&gt;&lt;h3 id=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>工具</title>
    <link href="http://yoursite.com/2019/11/23/tool/"/>
    <id>http://yoursite.com/2019/11/23/tool/</id>
    <published>2019-11-23T15:13:47.000Z</published>
    <updated>2019-12-07T09:05:51.412Z</updated>
    
    <content type="html"><![CDATA[<p>ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>常用网址</title>
    <link href="http://yoursite.com/2019/10/27/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80/"/>
    <id>http://yoursite.com/2019/10/27/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80/</id>
    <published>2019-10-27T17:05:38.000Z</published>
    <updated>2019-12-07T09:05:51.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些常用的网址"><a href="#一些常用的网址" class="headerlink" title="一些常用的网址"></a>一些常用的网址</h2><h3 id="1-swipe-开源、免费、强大的触摸滑动插件"><a href="#1-swipe-开源、免费、强大的触摸滑动插件" class="headerlink" title="1. swipe( 开源、免费、强大的触摸滑动插件 ) "></a>1.<a href="https://www.swiper.com.cn/" target="_blank" rel="noopener"> swipe( 开源、免费、强大的触摸滑动插件 ) </a></h3><h3 id="2-Bypass-（分流抢票抢火车票）"><a href="#2-Bypass-（分流抢票抢火车票）" class="headerlink" title="2. Bypass-（分流抢票抢火车票）"></a>2.<a href="https://www.bypass.cn/" target="_blank" rel="noopener"> Bypass-（分流抢票抢火车票）</a></h3><h3 id="3-w3school"><a href="#3-w3school" class="headerlink" title="3. w3school "></a>3.<a href="https://www.w3school.com.cn/index.html" target="_blank" rel="noopener"> w3school </a></h3><h3 id="4-Vue"><a href="#4-Vue" class="headerlink" title="4. Vue "></a>4.<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener"> Vue </a></h3><h3 id="5-菜鸟工具-正则表达式在线测试、在线二维码生成器等实用工具"><a href="#5-菜鸟工具-正则表达式在线测试、在线二维码生成器等实用工具" class="headerlink" title="5. 菜鸟工具(正则表达式在线测试、在线二维码生成器等实用工具) "></a>5.<a href="https://c.runoob.com/" target="_blank" rel="noopener"> 菜鸟工具(正则表达式在线测试、在线二维码生成器等实用工具) </a></h3><h3 id="6-Web-开发技术"><a href="#6-Web-开发技术" class="headerlink" title="6. Web 开发技术 "></a>6.<a href="https://developer.mozilla.org/zh-CN/docs/Web" target="_blank" rel="noopener"> Web 开发技术 </a></h3><h3 id="7-Iconfont-阿里巴巴矢量图标库"><a href="#7-Iconfont-阿里巴巴矢量图标库" class="headerlink" title="7. Iconfont-阿里巴巴矢量图标库 "></a>7.<a href="https://www.iconfont.cn/" target="_blank" rel="noopener"> Iconfont-阿里巴巴矢量图标库 </a></h3><h3 id="8-Bootstrap-HTML、CSS-和-JS-框架"><a href="#8-Bootstrap-HTML、CSS-和-JS-框架" class="headerlink" title="8. Bootstrap(HTML、CSS 和 JS 框架) "></a>8.<a href="https://v3.bootcss.com/" target="_blank" rel="noopener"> Bootstrap(HTML、CSS 和 JS 框架) </a></h3><h3 id="9-Babel-es6语法转到低版本的语法查看的网址"><a href="#9-Babel-es6语法转到低版本的语法查看的网址" class="headerlink" title="9. Babel(es6语法转到低版本的语法查看的网址) "></a>9.<a href="https://www.babeljs.cn/" target="_blank" rel="noopener"> Babel(es6语法转到低版本的语法查看的网址) </a></h3><h3 id="10-Express-基于-Node-js-平台，快速、开放、极简的-Web-开发框架"><a href="#10-Express-基于-Node-js-平台，快速、开放、极简的-Web-开发框架" class="headerlink" title="10. Express(基于 Node.js 平台，快速、开放、极简的 Web 开发框架) "></a>10.<a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener"> Express(基于 Node.js 平台，快速、开放、极简的 Web 开发框架) </a></h3><h3 id="11-element"><a href="#11-element" class="headerlink" title="11. element "></a>11.<a href="https://element.eleme.cn/#/zh-CN/component/installation" target="_blank" rel="noopener"> element </a></h3><h3 id="12-淘宝-NPM-镜像"><a href="#12-淘宝-NPM-镜像" class="headerlink" title="12. 淘宝 NPM 镜像 "></a>12.<a href="https://npm.taobao.org/" target="_blank" rel="noopener"> 淘宝 NPM 镜像 </a></h3><h3 id="13-vue-element-admin-后台框架"><a href="#13-vue-element-admin-后台框架" class="headerlink" title="13. vue-element-admin(后台框架) "></a>13.<a href="https://panjiachen.github.io/vue-element-admin-site/zh/" target="_blank" rel="noopener"> vue-element-admin(后台框架) </a></h3><h3 id="14-经典模块化前端框架"><a href="#14-经典模块化前端框架" class="headerlink" title="14. 经典模块化前端框架 "></a>14.<a href="https://www.layui.com/" target="_blank" rel="noopener"> 经典模块化前端框架 </a></h3><h3 id="15-纯JavaScript图表库"><a href="#15-纯JavaScript图表库" class="headerlink" title="15. 纯JavaScript图表库 "></a>15.<a href="https://echarts.apache.org/zh/index.html" target="_blank" rel="noopener"> 纯JavaScript图表库 </a></h3><h3 id="16-提问的智慧-一篇文章"><a href="#16-提问的智慧-一篇文章" class="headerlink" title="16. 提问的智慧(一篇文章) "></a>16.<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener"> 提问的智慧(一篇文章) </a></h3><h3 id="16-Hexo主题与文档"><a href="#16-Hexo主题与文档" class="headerlink" title="16.Hexo主题与文档 "></a>16.<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题与文档 </a></h3><h3 id="17-jQuery插件库"><a href="#17-jQuery插件库" class="headerlink" title="17. jQuery插件库 "></a>17. <a href="https://www.jq22.com/" target="_blank" rel="noopener">jQuery插件库 </a></h3><h3 id="18-favicon-制作图"><a href="#18-favicon-制作图" class="headerlink" title="18. favicon 制作图 "></a>18. <a href="http://www.bitbug.net/" target="_blank" rel="noopener">favicon 制作图 </a></h3><h3 id="19-Vant组件库-移动端vue开发框架"><a href="#19-Vant组件库-移动端vue开发框架" class="headerlink" title="19. Vant组件库 (移动端vue开发框架) "></a>19. <a href="https://youzan.github.io/vant/#/zh-CN/intro" target="_blank" rel="noopener">Vant组件库 (移动端vue开发框架) </a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一些常用的网址&quot;&gt;&lt;a href=&quot;#一些常用的网址&quot; class=&quot;headerlink&quot; title=&quot;一些常用的网址&quot;&gt;&lt;/a&gt;一些常用的网址&lt;/h2&gt;&lt;h3 id=&quot;1-swipe-开源、免费、强大的触摸滑动插件&quot;&gt;&lt;a href=&quot;#1-swipe-开源
      
    
    </summary>
    
    
      <category term="常用网址" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80/"/>
    
    
      <category term="常用网址" scheme="http://yoursite.com/tags/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>WebAPI</title>
    <link href="http://yoursite.com/2019/02/04/WebAPI/"/>
    <id>http://yoursite.com/2019/02/04/WebAPI/</id>
    <published>2019-02-04T13:34:50.000Z</published>
    <updated>2019-12-07T09:05:51.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebAPI"><a href="#WebAPI" class="headerlink" title="WebAPI"></a>WebAPI</h2><ul><li>节点：标签、文本、属性</li></ul><h3 id="获取节点DOM"><a href="#获取节点DOM" class="headerlink" title="获取节点DOM"></a>获取节点DOM</h3><ul><li><p>ById</p><ul><li><p>参数：id的字符串</p></li><li><p>返回值：DOM节点 也是对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'id字符串'</span>);</span><br><span class="line"><span class="comment">//获取body</span></span><br><span class="line"><span class="built_in">document</span>.body</span><br></pre></td></tr></table></figure></li></ul></li><li><p>ByTagName </p><ul><li><p>参数：标签名的1字符串</p></li><li><p>返回值：伪数组 没有forEach方法 可以遍历 可以使用for循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>ByClassName </p><ul><li><p>参数：类名的字符串</p></li><li><p>返回值 伪数组 没有forEach方法 可以遍历 可以使用for循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">'.box'</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>querySelector</p><ul><li><p>参数：css选择器</p></li><li><p>返回值：返回节点对象 （第一个被选中）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box=<span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>querySelectorAll</p><ul><li><p>参数：css选择器</p></li><li><p>返回值 伪数组 可以使用forEach循环 遍历 for循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lis=<span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="注册事件on-事件类型"><a href="#注册事件on-事件类型" class="headerlink" title="注册事件on+事件类型"></a>注册事件on+事件类型</h3><ul><li><p>注册点击click事件</p><ul><li>事件源</li><li>点击行为</li><li>响应</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'1'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册focus和blur事件</p><ul><li><p>focus 获取焦点</p></li><li><p>blur 失去焦点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">txt.onfocus=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">txt.onblur=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>鼠标按下mousedown</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.onmousedown=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>鼠标移动mousemove</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.onmousemove=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>鼠标弹起mouseup</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.onmouseup=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>键盘按下keydown</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onkeydown=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.keyCode);<span class="comment">//返回不同的键的码数</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.ctrlKey);<span class="comment">//判断按下的键是否为ctrl键</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>键盘弹起keyup</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onkeyup=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>鼠标进入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>鼠标移出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.onmouseout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>滚动事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p.onscroll=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//卷入的高度</span></span><br><span class="line">    <span class="built_in">console</span>.log(p.scrollTop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="对象的属性"><a href="#对象的属性" class="headerlink" title="对象的属性"></a>对象的属性</h3><ul><li><p>属性：</p><ul><li>标准属性：<ul><li>style</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(btn.style);<span class="comment">//返回是style对象</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line"><span class="built_in">console</span>.log(btn.style.width);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//设置</span></span><br><span class="line">btn.style.backgroundColor=<span class="string">'red'</span>;</span><br></pre></td></tr></table></figure><ul><li>开关属性<ul><li>值的状态只有两个 true false</li><li>disabled 设置是否禁用</li><li>checked 设置是否选择</li><li>selected 设置下拉框是否选择</li></ul></li></ul></li><li><p>btn.value 是专门针对表单元素的标签 textarea 也尽量用value值进行获取</p></li><li><p>innerHTML</p><ul><li><p>返回值为string类型</p></li><li><p>可以识别html结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn.innerHTML=<span class="string">'&lt;li&gt;新的元素&lt;/li&gt;'</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>操作属性的方法：</p><ul><li><p>对属性进行增删改查</p><ul><li><p>获取属性getAttribute(‘属性名’)</p><ul><li>参数：属性名</li><li>返回值：属性值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box.getAttribute(<span class="string">'abc'</span>);<span class="comment">//可以获取标准属性和自定义属性，还可以获取自己定义的属性名</span></span><br></pre></td></tr></table></figure></li><li><p>设置属性setAttribute(‘属性名’,’属性值’)</p><ul><li><p>参数：属性名和属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box.setAttribute(<span class="string">'abc'</span>,<span class="string">'234'</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除属性removeAttribute(‘属性名’)</p><ul><li><p>参数：删除的属性名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box.removeAttribute(<span class="string">'属性名'</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h3 id="设置和获取类名"><a href="#设置和获取类名" class="headerlink" title="设置和获取类名"></a>设置和获取类名</h3><ul><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取</span></span><br><span class="line"><span class="built_in">console</span>.log(box.className);</span><br><span class="line"><span class="comment">//设置   原来的类名完全被覆盖</span></span><br><span class="line">box.className=<span class="string">'e'</span>；</span><br><span class="line">box.className+=<span class="string">'bg_red'</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h3><ul><li><p>对类名进行增删改</p><ul><li>返回值：返回一个对象</li></ul></li><li><p>添加类名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    div.classList.add(<span class="string">'bg_red'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除类名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    div.classList.remove(<span class="string">'bg_red'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>切换类名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    div.classList.toggle(<span class="string">'bg_red'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><ul><li><p>自定义属性命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以data-开头进行命名</span></span><br><span class="line">&lt;input type=<span class="string">"button"</span> data-src=<span class="string">'./images/01.jpg'</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>自定义属性获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(input.dataset);</span><br><span class="line"><span class="comment">//返回一个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(input.dataset[<span class="string">'src'</span>]);<span class="comment">//input.dataset.src</span></span><br></pre></td></tr></table></figure></li><li><p>函数内部有一个关键字 <strong>this</strong> 获取当前对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div=<span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">div.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//div</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="全选与反选案例"><a href="#全选与反选案例" class="headerlink" title="全选与反选案例"></a>全选与反选案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> allCk=<span class="built_in">document</span>.getElementById(‘all)；</span><br><span class="line"><span class="keyword">var</span> cks=<span class="built_in">document</span>.getElementsByClassName(<span class="string">'ck'</span>);</span><br><span class="line">allCk.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;cks.length;i++)&#123;</span><br><span class="line">        cks[i].checked=allCk.checked;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> is_checked;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;cks.length;j++)&#123;</span><br><span class="line">    cks[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        is_checked=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;cks.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cks[i].checked==<span class="literal">false</span>)&#123;</span><br><span class="line">                is_checked=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(is_checked)&#123;</span><br><span class="line">            allCk.checked=<span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            allCk.checked=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册事件addEventListener"><a href="#注册事件addEventListener" class="headerlink" title="注册事件addEventListener"></a>注册事件addEventListener</h3><ul><li><p>多次注册事件 不被覆盖</p></li><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">btn.addEventListener(<span class="string">'click mouseenter'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>小知识：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">btn.click();</span><br><span class="line"><span class="comment">//调用点击事件 不论按钮是以on+事件类型方式还是addEventListener注册的点击事件均可以使用此方式进行调用注册的点击事件</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="事件三个阶段"><a href="#事件三个阶段" class="headerlink" title="事件三个阶段"></a>事件三个阶段</h3><ul><li><p>捕获：从外向里</p></li><li><p>到达目标</p></li><li><p>冒泡：从内向外 默认事件是在冒泡阶段执行的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">box.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;,<span class="literal">false</span>);<span class="comment">//默认是false 表示冒泡阶段执行事件</span></span><br><span class="line"></span><br><span class="line">box.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;,<span class="literal">true</span>);<span class="comment">//true 表示捕获阶段执行事件</span></span><br></pre></td></tr></table></figure></li><li><p>阻止冒泡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><ul><li><p>描述一次点击行为，看成是一个对象</p></li><li><p>属性和方法</p><ul><li>获取位置<ul><li>可视区域<ul><li>e.clientX()；</li><li>e.clientY();</li></ul></li><li>页面左上角<ul><li>e.pageX()</li><li>e.pageY()</li></ul></li></ul></li></ul></li></ul><p>  <img src="C:%5CUsers%5C%E5%88%98%E6%99%93%E6%85%A7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1568878061632.png" alt="1568878061632"></p><ul><li><p>获取目标对象</p><ul><li>e.target</li></ul></li><li><p>获取绑定事件对象</p><ul><li>e.currentTarget==this</li></ul></li><li><p>阻止浏览器默认行为</p><ul><li><p>e.preventDefault()</p></li><li><p>return false;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.oncontextmenu=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="获取元素位置"><a href="#获取元素位置" class="headerlink" title="获取元素位置"></a>获取元素位置</h3><ul><li><p>当子元素没有设置定位时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">box.offsetLeft=父元素的边框+父元素的marginLeft+父元素的paddingLeft+子元素的marginLeft</span><br><span class="line">box.offsetTop=父元素的边框+父元素的marginTop+父元素的paddingTop+子元素的marginTop</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>当子元素设置定位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">box.offsetLeft=left+marginLeft<span class="comment">//无论是以谁定位</span></span><br><span class="line">box.offsetTop=top+marginTop<span class="comment">//无论是以谁定位</span></span><br></pre></td></tr></table></figure></li><li><p>获取元素位置的相对于哪个父亲</p><p>box.offsetParent</p></li></ul><h3 id="跟着鼠标飞"><a href="#跟着鼠标飞" class="headerlink" title="跟着鼠标飞"></a>跟着鼠标飞</h3><ul><li>想要东西飞起来就要设置脱标<ul><li>position:absolute 绝对定位 相对于浏览器 也就是页面左上角 会随着滚动条的滚动而滚动</li><li>position:fixed  固定定位 相对于可视窗口区域 不会随着滚动条滚动而滚动</li><li>所以：<ul><li>绝对定位和pageX、pageY搭配</li><li>固定定位和clientX和clientY搭配，当然也可以和pageX和pageY搭配</li></ul></li></ul></li></ul><h3 id="事件解绑"><a href="#事件解绑" class="headerlink" title="事件解绑"></a>事件解绑</h3><ul><li><p>当用on+事件类型进行解绑方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    btn.onclick=<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当用addEventListener事件进行解绑方式</p><p>btn.addEventListener(‘click’,function fn(){</p><p>​    btn.removeEventListener(‘click’,fn);</p><p>})</p></li></ul><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><ul><li><p>当一些本身存在的子元素设置某些事件，但一旦父元素想办法进行添加一些新的子元素的时候，之前设置的子元素的某些事件就会失效，所以引入事件委托</p></li><li><p>为了让新增的子元素也有此事件的行为</p></li><li><p>给子元素的父元素注册事件 利用冒泡原理 实现父元素所有子元素注册事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//e.target.nodeType:</span></span><br><span class="line"><span class="comment">//节点标签：1</span></span><br><span class="line"><span class="comment">//属性：2</span></span><br><span class="line"><span class="comment">//文本：3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//e.target.nodeValue</span></span><br><span class="line"><span class="comment">//节点标签：null</span></span><br><span class="line"><span class="comment">//属性:属性值</span></span><br><span class="line"><span class="comment">//文本：文本内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//e.target.nodeName</span></span><br><span class="line"><span class="comment">//节点标签：eg:LI</span></span><br><span class="line"><span class="comment">//属性：小写属性名</span></span><br><span class="line"><span class="comment">//文本：#text</span></span><br><span class="line"></span><br><span class="line">ul.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.target.nodeName==<span class="string">'LI'</span>)&#123;</span><br><span class="line">        alert(<span class="string">'1'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改、创建、添加节点"><a href="#修改、创建、添加节点" class="headerlink" title="修改、创建、添加节点"></a>修改、创建、添加节点</h3><ul><li><p>修改</p><ul><li>设置DOM节点内部html结构 识别HTML结构</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box.innerHTML=<span class="string">'&lt;a href="#"&gt;百度&lt;/a&gt;'</span>;</span><br></pre></td></tr></table></figure><ul><li>设置DOM节点内部的文本内容</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box.innerText=<span class="string">'我是你爸爸'</span>;</span><br></pre></td></tr></table></figure></li><li><p>创建节点</p><ul><li><p>只是在js中创建，在页面中不显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> li=<span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line"><span class="built_in">document</span>.write();<span class="comment">//识别html结构</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>添加节点</p><ul><li><p>在父元素的最后一个子元素后面添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul.appendChild(li);</span><br></pre></td></tr></table></figure></li><li><p>在指定位置添加子元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul.insertBefore(li,first);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="发布微博"><a href="#发布微博" class="headerlink" title="发布微博"></a>发布微博</h3><ul><li>增删改 本地存储</li></ul><h3 id="通过节点获取节点"><a href="#通过节点获取节点" class="headerlink" title="通过节点获取节点"></a>通过节点获取节点</h3><ul><li><p>以下均为属性</p><ul><li>获取所有的子元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul.children;<span class="comment">//返回所有亲生子元素 伪数组</span></span><br></pre></td></tr></table></figure><ul><li>获取亲生父元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">li3.parentNode;</span><br></pre></td></tr></table></figure><ul><li>获取兄弟元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">li3.nextElementSibling;</span><br><span class="line">li3.previousElementSibling;</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><ul><li><p>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul.removeChild(first);</span><br></pre></td></tr></table></figure></li></ul><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h3 id="window及onload"><a href="#window及onload" class="headerlink" title="window及onload"></a>window及onload</h3><ul><li><p>window是顶级对象</p></li><li><p>window上大部分的属性和方法都是window调用的</p><ul><li><p>所有全局变量和函数都是window顶级对象上的属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.a;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">window</span>.fn();</span><br></pre></td></tr></table></figure></li><li><p>隐式全局变量，不推荐使用</p></li><li><p>onload 等静态文件全部加在完成，其内部代码才进行执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><ul><li><p>一次性定时器</p><ul><li>第一个参数：<strong>等待</strong>一定时间后执行的函数</li><li>第二个参数：设置等待多久 毫秒</li><li>返回值：清除定时器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除定时器</span></span><br><span class="line">clearTimeout(timer);</span><br></pre></td></tr></table></figure></li><li><p>永久定时器</p><ul><li><p>第一个参数：<strong>等待</strong>一定时间后执行的函数</p></li><li><p>第二个参数：设置等待多久 毫秒</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer=setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="comment">//清除定时器</span></span><br><span class="line">clearInterval(timer);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="BOM的location"><a href="#BOM的location" class="headerlink" title="BOM的location"></a>BOM的location</h3><ul><li><p>BOM上的一个属性 重新指定浏览器的地址栏上的地址 页面就会进行跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location.href=<span class="string">'http://www.baidu.com'</span>;</span><br><span class="line"><span class="comment">//必须加协议http://</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="BOM的localStorage"><a href="#BOM的localStorage" class="headerlink" title="BOM的localStorage"></a>BOM的localStorage</h3><ul><li><p>用于将一些数据进行本地存储</p></li><li><p>返回对象</p><ul><li><p>setItem设置本地数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locaStorage.setItem(<span class="string">'a'</span>,a);</span><br></pre></td></tr></table></figure></li><li><p>getItem获取本地数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localStorage.getItem(<span class="string">'a'</span>);</span><br><span class="line"><span class="comment">//获取不存在的数据 返回null</span></span><br></pre></td></tr></table></figure></li><li><p>removeItem删除本地数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.removeItem(<span class="string">'a'</span>);</span><br></pre></td></tr></table></figure></li><li><p>全部清空</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.clear();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ul><li><p>因为本地数据存储为字符串格式，当遇到一些对象时，需要转换为字符串，因此BOM提供其JSON格式的字符串的转换</p></li><li><p>一般格式(字符串 数字)</p></li><li><p>所有的键和使用双引号包起来</p></li><li><p>字符串也用双引号包起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[</span><br><span class="line">    &#123;</span><br><span class="line">        info:<span class="string">""</span>,</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>把对象转换为JSON格式的字符串</p><ul><li><p>参数：对象</p></li><li><p>返回值：JSON格式的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="built_in">JSON</span>.stringify(arr);</span><br><span class="line"><span class="comment">//存入本地时候，对于复杂类型的数据进行转换字符串</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>把JSON格式的字符串转换为对象</p><ul><li><p>参数：JSON格式的字符串</p></li><li><p>返回值：对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=<span class="built_in">JSON</span>.parse(str);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="获取DOM节点的样式"><a href="#获取DOM节点的样式" class="headerlink" title="获取DOM节点的样式"></a>获取DOM节点的样式</h3><ul><li><p>只能获取行内样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.style.left;</span><br></pre></td></tr></table></figure></li><li><p>BOM中的getComputedStyle</p><ul><li><p>参数是DOM节点</p></li><li><p>返回值：返回DOM节点的样式对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.getComputedStyle(box).width;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>返回盒子的实际宽度和高度</p><ul><li><p>width=content+padding+border</p></li><li><p>height=content+padding+border</p></li><li><p>返回值：数字类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">box.offsetWidth;</span><br><span class="line">box.offsetHeight;</span><br><span class="line"><span class="built_in">console</span>.log(box.style.width);<span class="comment">//返回字符串 eg:120px; 只能获取行内元素 可以进行获取和设置</span></span><br><span class="line"><span class="built_in">console</span>.log(box.offsetWidth);<span class="comment">//返回数字 eg:120;只能进行获取不能设置 获取行内和css内部的样式 获取盒子真实宽度</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.getComputedStyle(box).width);<span class="comment">//返回字符串 eg:120px 返回的就是盒子的内容区域 只能进行获取 可以获取行内和css样式里的样式</span></span><br><span class="line"><span class="built_in">console</span>.log(box.clientWidth);<span class="comment">//返回数字，eg:100 返回的是盒子的可视区域的宽度，即width+padding 可以获取行内和css内部的样式</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="tab栏"><a href="#tab栏" class="headerlink" title="tab栏"></a>tab栏</h2><ul><li>排他功能</li><li>自定义属性的使用</li></ul><h2 id="手风琴"><a href="#手风琴" class="headerlink" title="手风琴"></a>手风琴</h2><ul><li>排他功能</li></ul><h2 id="旋转木马"><a href="#旋转木马" class="headerlink" title="旋转木马"></a>旋转木马</h2><ul><li>利用数组存储类名，在每次点击按钮时候，进行转换数组的顺序，使图片的类名重新进行赋值</li><li>点击右键 数组的操作是，删除第一个，进行添加数组的后面</li><li>点击左键 数组的操作时 删除最后一个 进行添加数组的前面</li></ul><h2 id="360开机动画"><a href="#360开机动画" class="headerlink" title="360开机动画"></a>360开机动画</h2><ul><li><p>只能使用addEventListener注册事件</p></li><li><p>动画设置无限播放，下面的事件不会生效</p></li><li><p>animationend</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ul.addEventListener(<span class="string">'animationend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'动画已经执行完'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li>transitionend</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ul.addEventListener(<span class="string">'transition'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'过渡已经执行完'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="放大镜"><a href="#放大镜" class="headerlink" title="放大镜"></a>放大镜</h2><ul><li>比例计算</li></ul><p><img src="C:%5CUsers%5C%E5%88%98%E6%99%93%E6%85%A7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1569330592598.png" alt="1569330592598"></p><h2 id="事件对象-触摸事件"><a href="#事件对象-触摸事件" class="headerlink" title="事件对象-触摸事件"></a>事件对象-触摸事件</h2><ul><li><p>移动端</p></li><li><p>推荐使用addEventListener注册事件</p></li><li><ul><li><p>触摸开始</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">box.addEventListener(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.touches);<span class="comment">//获取屏幕上所有的触摸点</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.targetTouches);<span class="comment">//获取元素上的触摸点</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.changedTouches);<span class="comment">//变化后的触摸点，获取离开屏幕上时的最后的点</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>触摸移动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">box.addEVentlistener(<span class="string">'touchmove'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(e.touches);<span class="comment">//获取屏幕上所有的触摸点</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.targetTouches);<span class="comment">//获取元素上的触摸点</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.changedTouches);<span class="comment">//变化后的触摸点，获取离开屏幕上时的最后的点</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>触摸结束</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">box.addEventListener(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(e.touches);<span class="comment">//获取屏幕上所有的触摸点</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.targetTouches);<span class="comment">//获取元素上的触摸点</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.changedTouches);<span class="comment">//变化后的触摸点，获取离开屏幕上时的最后的点</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="封装tap手势"><a href="#封装tap手势" class="headerlink" title="封装tap手势"></a>封装tap手势</h2><ul><li>思路：<ul><li>获取开始触摸时的位置及时间，判断屏幕上所有的触摸点为1</li><li>获取离开屏幕时的位置及时间，判断离开时候变化的触摸点数为1</li><li>进行计算时间差和位置差，然后设置的标准进行比较，如果符合进行执行回调函数</li></ul></li></ul><h2 id="zepto类库引入"><a href="#zepto类库引入" class="headerlink" title="zepto类库引入"></a>zepto类库引入</h2><ul><li><p>语法类似于jQuery</p><ul><li><p>获取节点对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div=$(<span class="string">'div'</span>);</span><br></pre></td></tr></table></figure></li><li><p>设置样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.css(&#123;</span><br><span class="line">    width:<span class="string">'500px'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>绑定事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">box.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">box.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>添加子元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box.append(<span class="string">'&lt;a href="#"&gt;百度&lt;/a&gt;'</span>);</span><br></pre></td></tr></table></figure></li><li><p>显示或者隐藏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.show();<span class="comment">//显示</span></span><br><span class="line">box.hide();<span class="comment">//隐藏</span></span><br><span class="line"><span class="comment">//对于设置毫秒值的参数的时候，对于jQuery比较适用</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>手势一些模块分开进行引入</p></li></ul><h3 id="touch-js的引入"><a href="#touch-js的引入" class="headerlink" title="touch.js的引入"></a>touch.js的引入</h3><ul><li><p>点击事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.on(<span class="string">'tap'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>左滑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.on(<span class="string">'swipeLeft'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>右滑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.on(<span class="string">'swipeRight'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h2><h2 id="轮播图-无缝滚动"><a href="#轮播图-无缝滚动" class="headerlink" title="轮播图-无缝滚动"></a>轮播图-无缝滚动</h2><ul><li>利用过渡执行结束事件以及定时器的控制是否有过渡，实现无缝滚动的效果</li></ul><h2 id="swiper插件"><a href="#swiper插件" class="headerlink" title="swiper插件"></a>swiper插件</h2><ul><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入css和js文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'swiper-container'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'swiper-wrapper'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'swiper-slide'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">''</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果需要分页器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'swiper-pagination'</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要导航按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'swiper-button-prev'</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'swiper-button-next'</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要进度条--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'swiper-scrollbar'</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySwiper=<span class="keyword">new</span> Swiper(<span class="string">'.swiper-container'</span>&#123;</span><br><span class="line">           <span class="comment">//过渡执行时间</span></span><br><span class="line">             speed:<span class="number">200</span>,</span><br><span class="line">           <span class="comment">//形成闭环</span></span><br><span class="line">              loop:<span class="literal">true</span>,</span><br><span class="line">           <span class="comment">//自动播放</span></span><br><span class="line">               autoplay:<span class="literal">true</span>,</span><br><span class="line">               navigation:&#123;</span><br><span class="line">                    nextEl:<span class="string">'.swiper-button-next'</span>,</span><br><span class="line">                    prevEl:<span class="string">'.swiper-button-prev'</span></span><br><span class="line"></span><br><span class="line">              &#125;,</span><br><span class="line">                pagination:&#123;</span><br><span class="line">                    el:<span class="string">'.swiper-pagination'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                scrollbar:&#123;</span><br><span class="line">                       el:<span class="string">'.swiper-scrollbar'</span>,</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WebAPI&quot;&gt;&lt;a href=&quot;#WebAPI&quot; class=&quot;headerlink&quot; title=&quot;WebAPI&quot;&gt;&lt;/a&gt;WebAPI&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;节点：标签、文本、属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;获取节点DOM&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="WebAPI" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/WebAPI/"/>
    
    
      <category term="WebAPI" scheme="http://yoursite.com/tags/WebAPI/"/>
    
  </entry>
  
  <entry>
    <title>css</title>
    <link href="http://yoursite.com/2019/01/05/css/"/>
    <id>http://yoursite.com/2019/01/05/css/</id>
    <published>2019-01-05T09:33:44.000Z</published>
    <updated>2019-12-07T09:05:51.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="css书写位置"><a href="#css书写位置" class="headerlink" title="css书写位置"></a>css书写位置</h3><ul><li><p>行内样式 和html结构混合 不推荐</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">'color:red;font-size:40px;'</span>&gt;</span></span><br><span class="line">    来点字</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>内嵌式 控制当前页面 部分分离（与html）通常头部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>外链样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">引入外部css文件 事前完全分离</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'htm.css'</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="简单选择器"><a href="#简单选择器" class="headerlink" title="简单选择器"></a>简单选择器</h3><ul><li><p>标签选择器 </p><ul><li><p>选择页面上所有同类标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>类选择器</p><ul><li><p>谁调用谁生效 调用class=’类名’</p></li><li><p>一个类选择器可以被多个标签调用</p></li><li><p>一个标签可以同时调用多个类选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>命名规范</p><ul><li>不能以纯数字或以数字开头定义类名</li><li>定义类名的时候不能出现特殊字符（-或者_可以）</li><li>不能适应中文定义类名</li></ul></li></ul></li><li><p>id选择器</p><ul><li>需要调用 id=’id名’</li><li>一个id选择器只能调用一次，多次调用不符合w3c规范</li><li>一个标签只能调用一个id选择器</li><li>一个标签可以同时调用类选择器和id选择器</li></ul></li><li><p>通配符选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    *&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="文字属性"><a href="#文字属性" class="headerlink" title="文字属性"></a>文字属性</h3><ul><li><p>字体设置</p><ul><li>浏览器默认字体大小为16px</li><li>中文字体加单引号</li><li>多个字体之前用<code>逗号</code>隔开 英文字体在前面 中文字体在后面</li><li>unicode字体写法：<ul><li>在控制台上输入escape(‘中文字体名称’)</li><li>把%u替换为,最终得到文字的unicode编码</li></ul></li></ul></li><li><p>font-size:文字大小</p><ul><li>h1 2倍</li><li>h2 1.5倍</li><li>h3 1.17倍</li><li>h4 1倍</li><li>h5 0.83倍</li><li>h6 0.75倍</li></ul></li><li><p>font-family:arial ,’宋体’</p></li><li><p>font-weight 文字加粗 </p><ul><li>100-900不带单位</li><li>normal 默认 不加粗 400</li><li>bold 加粗 700</li></ul></li><li><p>font-style 文字风格</p><ul><li>normal 默认值 不倾斜</li><li>italic 斜体</li><li>oblique 倾斜(有些英文字体用italic不管用)</li></ul></li><li><p>font:font-style font-weight font-size/line-height font-family <code>其中font-size和font-family为必写</code></p></li><li><p>letter-spacing:20px;调整字（母）与字（母）之间的距离，可以为负值</p></li><li><p>word-spacing:50px;调整单词与单词之间的距离 对中文无效，可以为负值</p></li><li><p>行高 line-height 默认1.1-1.3 (normal)</p></li></ul><h3 id="css外观属性"><a href="#css外观属性" class="headerlink" title="css外观属性"></a>css外观属性</h3><ul><li>设置字体颜色 <ul><li>color:red;</li><li>color:rbg(255,0,205);</li><li>color:#4574af;</li></ul></li><li>设置首行缩进：text-indent:2em(1em相当于一个汉字的大小)</li><li>文本修饰 text-decoration:underline<ul><li>none</li><li>underline 下划线</li><li>line-through 删除线</li><li>overline 上划线</li></ul></li><li>控制盒子<code>内部内容</code>水平对齐方式text-align，对整个盒子水平对齐没有作用<ul><li>left 左对齐 默认</li><li>center 居中对齐</li><li>right 水平右对齐</li></ul></li></ul><blockquote><p> 注意：行内元素不能直接使用text-align和text-indent</p></blockquote><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><ul><li><p>后代选择器：</p><ul><li><p>发生前提是嵌套的关系</p></li><li><p>父元素在前 子元素在后，用空格连在一起</p></li><li><p>后代选择器可以无限制的隔代</p></li><li><p>只要能代表父元素，子元素，后代选择器可以是任意选择器的组合</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>子代选择器</p><ul><li><p>选择是父元素的直接下一代（亲儿子），用&gt;连接，父元素在前子在后，可以是任意选择器的组合</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&gt;<span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>交集选择器</p><ul><li>满足两个条件，即是这个标签，又调用后边的类（id）选择器</li></ul></li><li><p>并集选择器</p><ul><li><p>样式相同或者部分相同的选择器，通过<strong>逗号</strong>连在一起，进行集体的声明，最后一个并集选择器没有逗号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">p</span>,<span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>相邻选择器</p><ul><li><p>选择器1+选择器2</p></li><li><p>为了精确的选择到选择器1后面的选择器2，必须是并列关系，紧挨着的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>+<span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h3><ul><li><p>未访问状态:link,可以省略</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问之后的状态:visited</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>鼠标悬停</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>激活状态:active（鼠标按住不松手）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="标签的显示模式"><a href="#标签的显示模式" class="headerlink" title="标签的显示模式"></a>标签的显示模式</h3><ul><li>块元素<ul><li>典型代表 div p h1-h6 ul ol li dl form</li><li>特点：<ul><li>独占一行</li><li>可以设置宽高</li><li>块元素不设置宽度的时候，默认<code>父元素内容区域的宽度</code>，不设置高度的时候，默认高度为0，内容会撑开高度</li></ul></li></ul></li><li>行内元素<ul><li>典型代表 a span strong b em ins u s i</li><li>特点<ul><li>在一行上显示</li><li>行内元素不能设置宽和高</li><li>行内元素默认宽高为0，内容会撑开宽高</li><li>行内与元素代码换行生成缝隙</li></ul></li></ul></li><li>行内块元素<ul><li>典型代表 input img textarea td</li><li>特点<ul><li>在一行显示</li><li>可以设置宽高</li><li>行内块元素换行生成缝隙</li></ul></li></ul></li><li>模式转换<ul><li>块元素转行内元素<ul><li>display：inline</li></ul></li><li>行内元素和行内块元素转换为块级元素<ul><li>display:block</li></ul></li><li>块元素和行内元素转换成行内块元素<ul><li>display:inline-block</li></ul></li></ul></li></ul><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>特点：<ul><li>背景撑不开盒子</li></ul></li><li>背景颜色 background-color:<ul><li>transparent 透明</li><li>#cccc</li><li>rgba(255,255,0)</li></ul></li><li>背景图片<ul><li>background-image:url()</li></ul></li><li>背景平铺<ul><li>background-repeat<ul><li>no-repeat 不平铺</li><li>repeat-x 水平平铺 </li><li>repeat-y 垂直平铺</li><li>repeat 默认值 铺满盒子</li></ul></li></ul></li><li>背景定位<ul><li>background-position<ul><li>写方位值 left right center top bottom<ul><li>写两个方位词 left和right top和bottom不能一块写</li><li>写一个方位词 另外一个值默认为center</li></ul></li><li>写具体数值<ul><li>写2个值。第一个值为距离左边的距离，第二个值距离顶边位置</li><li>写1个值。另外一个值默认center</li></ul></li><li>方位值和数值混合使用<ul><li>如果第一个是方位值，只能写水平方向    left  right center </li><li>如果第二个方位值 只能写垂直方向 top bottom center</li></ul></li><li>百分比：百分比=容器宽度（高度）-图片宽度（高度）=剩余的的值的百分比</li></ul></li></ul></li><li>背景大小（后面介绍）<ul><li>background-size<ul><li>cover:盒子将被占满，通过缩放背景图片，可能背景图片显示不全，但是盒子一定被占满</li><li>contain：背景图片完全显示，通过缩放背景图片，可能盒子不一定占满，但是背景图片一定完全显示</li><li>具体数值</li><li>百分比</li></ul></li></ul></li><li>背景附着<ul><li>background-attachment<ul><li>fixed 固定 背景不随着滚动条的滚动而滚动</li><li>scroll 默认值 背景随着滚动条的滚动而滚动</li><li><strong>当背景附着attchment为fixed,并且同时设置背景定位，其定位参考不是盒子的大小，参考的是浏览器的位置</strong></li></ul></li></ul></li><li>背景属性连写<ul><li>background:color image repeat attachment position/size</li><li>多组背景用逗号隔开，最后一组分号结束，背景颜色写在最后一组</li></ul></li><li><strong>注意：大的背景图设置时候，设置定位的时候，想让它居中显示，可以设置top center</strong></li><li>一般情况下，小图标额大的背景图片时使用背景图片，其余插入图片，看自己心情</li></ul><h3 id="导航案例"><a href="#导航案例" class="headerlink" title="导航案例"></a>导航案例</h3><blockquote><p> 一行文字，行高和盒子高度一致的时候，这行文字垂直居中</p></blockquote><h3 id="标签的嵌套规范"><a href="#标签的嵌套规范" class="headerlink" title="标签的嵌套规范"></a>标签的嵌套规范</h3><ul><li>块元素可以嵌套块元素、行内元素、行内块元素<ul><li>div可以嵌套任意标签</li><li>p元素不能嵌套其他块元素，可以嵌套行内元素、行内块元素</li><li>不推荐标题里边嵌套其他块元素，可以嵌套其他的行内元素、行内块元素</li></ul></li><li>行内块元素不能嵌套块元素，可以嵌套行内元素，行内块元素</li><li>行内元素不能嵌套块元素，行内块元素，只能嵌套行内元素<ul><li>a标签不能嵌套a标签，但是可以嵌套其他的元素（有时候会嵌套块元素等，需要模式转换）</li></ul></li></ul><h3 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h3><ul><li><p>浏览器默认文字大小16px</p></li><li><p>属性设置</p><ul><li>normal 默认值 1.1-1.3倍文字大小</li><li>行高文字基线与基线之间的距离</li><li>一行文字，行高与标签高度一致的时候，文字垂直居中</li><li>一行文字，行高小于容器高度的时候，这行文字偏上显示</li><li>一行文字，行高大于容器高度的时候，这行文字偏下显示</li></ul></li></ul><h3 id="css三大特性"><a href="#css三大特性" class="headerlink" title="css三大特性"></a>css三大特性</h3><h4 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h4><ul><li>多个样式作用域同一个或者同一类标签的时候，发生样式冲突，后边的样式会把前边的样式覆盖掉，就近原则，和样式调用的顺序无关</li></ul><h4 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h4><ul><li>特例：<ul><li>以color text- font- line-文字类开头的都是可以让子元素继承父元素的样式</li><li>a标签不能继承父元素的文字的颜色</li><li>标题标签不会继承父元素的文字大小</li><li>另外，后面会介绍，对于给链接a标签设置文字，尽量采用继承的方式设置文字的大小，以免出现问题</li></ul></li></ul><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><ul><li>优先级解决样式冲突的能力，权重高的优先级大，优先显示，权重低的，不执行</li><li>权重<ul><li>继承与通配符 0000</li><li>标签选择器 0001</li><li>类选择器 0010</li><li>id选择器 0100</li><li>行内样式 1000</li><li>!important 无穷</li><li>权重会叠加，叠加演示，eg:0005+0005=00010(懂)</li><li>分清楚什么是继承 什么是后代</li></ul></li></ul><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><blockquote><p>边框+内边距+外边距+内容区域</p></blockquote><h4 id="边框设置"><a href="#边框设置" class="headerlink" title="边框设置"></a>边框设置</h4><ul><li><p>单独设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-top-color</span><span class="selector-pseudo">:red</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">border-top-style</span><span class="selector-pseudo">:solid</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">border-left-width</span><span class="selector-pseudo">:1px</span></span><br></pre></td></tr></table></figure></li><li><p>连写</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">border:1px solid #000;//顺序没有要求，线型为必写</span><br><span class="line">//线型</span><br><span class="line">//solid 实线</span><br><span class="line">//dotted 点线</span><br><span class="line">//dashed 虚线</span><br><span class="line">//double 双线</span><br><span class="line">//设置四条边框的连写，顺序为顺时针 从上边框开始（上右下左）</span><br></pre></td></tr></table></figure></li></ul><h4 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h4><ul><li><p>内边距是内容区域与边框的距离</p></li><li><p>设置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding-left</span><span class="selector-pseudo">:50px</span>;</span><br><span class="line">//边距连写</span><br><span class="line">padding:10px;//上下左右一样</span><br><span class="line">padding:10px 20px;//上下10，左右20</span><br><span class="line">padding:10px 20px 30px;//上10 左右20,下30</span><br><span class="line">padding:10px 20px 30px 40px;//顺时针 从上右下左</span><br></pre></td></tr></table></figure></li></ul><h4 id="内边距撑大盒子问题"><a href="#内边距撑大盒子问题" class="headerlink" title="内边距撑大盒子问题"></a>内边距撑大盒子问题</h4><ul><li>盒子实际宽度（高度）=width(内容区域的宽度)/height(内容区域的高度)+左右的padding值(上下内边距)+左右边框(上下边框)</li><li>一个块元素没有设置宽度，给这个块元素设置左右内边距，不会撑宽盒子</li><li>块元素设置宽度，必然撑宽盒子</li><li>行内元素，行内块元素设置左右内边距，必然撑宽盒子,上下内边距必然撑高盒子</li></ul><h4 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h4><ul><li><p>外边距设置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin-top</span><span class="selector-pseudo">:50px</span>;</span><br><span class="line">margin:30px;//设置连写和内边距的取值顺序一样</span><br></pre></td></tr></table></figure></li><li><p>外边距可以使 <strong>设置了宽度的块元素</strong>水平居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> <span class="selector-tag">auto</span>;</span><br></pre></td></tr></table></figure></li><li><p>margin:0 auto只能使<code>设置宽度</code>的<code>块元素</code>水平居中</p></li><li><p>text-align:center 可以使块元素（行内块元素）里面的内容（文字，行内元素，行内块元素）注意此处没有块元素，也就是说内部的块元素将只会使其中内部块元素的内部内容继承水平居中效果，对于自身并不会水平居中；而margin的水平居中正是使设置宽度的块元素水平居中</p></li><li><p>行内元素只能设置左右内外边距，不能设置垂直上下的内外边距</p></li><li><p>外边距遇到的两个问题</p><ul><li><code>相邻块元素的垂直外边距的合并</code><ul><li>当上下相邻的两个块元素相遇时，如果上面的元素有下边距，下面的元素有上外边距，则他们回见的垂直的外边距将会取两者中较大者</li><li>避免此情况的发生</li></ul></li><li><code>嵌套块元素的垂直外边距的合并</code><ul><li>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的外边距发生合并，合并到父元素上，合并为两者中较大者，即使父元素的外边距为0，也会发生外边距合并</li><li>给父元素定义1像素的上边框或上内边距</li><li>可以为父元素添加overflow:hidden,触发块级格式化上下文BFC</li><li>当子元素浮动或者脱标时候，不会产生外边距塌陷</li></ul></li></ul></li></ul><h3 id="表格细线边框"><a href="#表格细线边框" class="headerlink" title="表格细线边框"></a>表格细线边框</h3><ul><li><p>语法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border-collapse:collapse;//只对表格适用</span><br></pre></td></tr></table></figure></li></ul><h3 id="边框案例"><a href="#边框案例" class="headerlink" title="边框案例"></a>边框案例</h3><ul><li>高度剩余法</li><li>清除input默认边框 border:0/none</li><li>清除轮廓线outline:0/none</li><li>伪类 ：focus 获取光标焦点的状态 配合input使用</li></ul><h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><ul><li>设置css3到ie9才支持</li></ul><blockquote><p>注意使用控制台下载整个页面的效果图</p><ul><li>ctrl+shift+p截取时，必须保证显示设置为100%,才能为准确的值</li></ul></blockquote><h3 id="边框圆角"><a href="#边框圆角" class="headerlink" title="边框圆角"></a>边框圆角</h3><ul><li><p>语法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">border-left-top-radius:10px;//设置单独的圆角（正圆切）</span><br><span class="line">border-left-top-radius:100px 200px //设置单独的椭圆切</span><br><span class="line">border-radius:50px;//四条边框圆角相同的连写</span><br><span class="line"><span class="selector-tag">border-radius</span><span class="selector-pseudo">:10px</span> 20<span class="selector-tag">px</span>;左上角及右下角圆角为10<span class="selector-tag">px</span> 右上角及左下角圆角为20<span class="selector-tag">px</span></span><br><span class="line">border-radius:10px 20px 30px;//左上角为10，左下角及右上角为20px 右下角为20</span><br><span class="line">border-radius:10px 20px 30px 40px;//左上角 右上角 右下角  左下角 </span><br><span class="line">border-radius:50%;//设置为正圆，保证当前盒子的为一个正方形</span><br><span class="line">border-radius:50px 100px 10px 20px /20px 40px 100px 150px;//设置椭圆切 水平半径/垂直半径</span><br></pre></td></tr></table></figure></li></ul><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><ul><li><p>语法：    </p><ul><li><p>第一个值是阴影的水平偏移量，正值向右，负值向左</p></li><li><p>第二个值是阴影垂直偏移量，正值向下，负值向上</p></li><li><p>第三个值阴影的模糊范围</p></li><li><p>第四个值是阴影大小</p></li><li><p>第五个只是阴影的颜色</p></li><li><p>阴影默认是外阴影</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: (<span class="selector-tag">inset</span>) <span class="selector-tag">-20px</span> <span class="selector-tag">-10px</span> 20<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> <span class="selector-id">#666</span>;</span><br><span class="line"><span class="comment">/*多组阴影之间用逗号隔开*/</span></span><br><span class="line"><span class="selector-tag">box-shaow</span><span class="selector-pseudo">:20px</span> 20<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> <span class="selector-id">#666</span>,<span class="selector-tag">inset</span> 10<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> <span class="selector-id">#f00</span>,</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="透明设置"><a href="#透明设置" class="headerlink" title="透明设置"></a>透明设置</h3><ul><li>rgba()设置<strong>单颜色</strong>的透明，a是alpha透明，取值范围0-1,0.5的0可以省略</li><li>opacity:设置元素<strong>整体</strong>的透明度，取值范围0-1</li></ul><h2 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h2><ul><li>在页面上，元素自上而下，自左而右，块元素独占一行，行内元素在一行上显示，直到碰到父元素的边界，标准流（普通流）</li></ul><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><ul><li><p>特点：</p><ul><li>1.浮动的元素会脱离标准流的控制，不占据原来的位置</li><li>2.浮动可以使（块）元素在一行显示</li><li>3.浮动只能浮动到父元素的左边和右边，受到父元素<code>内边距</code>控制</li><li>4.浮动元素顶对齐，代码换行没有缝隙(标准流中一行显示的元素是底对齐的，且中间有缝隙)</li><li>5.浮动元素不会影响标准流里的块元素，只会影响下边的元素</li><li>6.浮动元素有了<code>行内块</code>元素的显示特点：<ul><li>块元素浮动之后，不会默认父元素的宽度，默认宽度高度变成0，内容会撑开盒子宽高</li><li>行内元素浮动之后，可以设置宽高了</li></ul></li></ul></li><li><p><strong>当文字、行内元素、行内块元素遇到浮动元素时候，会环绕，不会跑到浮动元素的底下</strong></p></li><li><p><strong>浮动元素掉下来，是因为浮动子元素宽度相加超过了父元素宽度，浮动的子元素不设置宽度，被内容撑开的最大宽度是<code>小于等于</code>父元素的宽度</strong></p></li><li><p>清除浮动的原因：为了解决父元素不能设置高度，里面的子元素浮动之后不能撑开父元素高度问题</p></li><li><p>清除浮动：</p><ul><li><p>额外标签法：    </p><ul><li>在最后一个浮动元素后面加一个额外标签<div style='clear:both;'></div>不推荐使用</li></ul></li><li><p>给浮动的父元素（亲爹），使用overflow:hidden清除浮动，触发BFC，块级格式化上下文，独立的布局区域，不受到外部因素的干扰</p><ul><li>弊端:一旦子元素出了父元素的范围（边界），多了部分会被隐藏掉</li></ul></li><li><p>给父元素添加after伪元素清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">    <span class="attribute">visibility</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*为了兼容ie6-7 hasLayout 渲染引擎内部的一个布局插件*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给浮动的元素的父元素（亲爹），调用clearfix双伪元素清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><ul><li><p>:hover伪类 ::before前伪元素</p></li><li><p>::before 前伪元素是在元素里面前边插入伪元素，可以当做<code>行内元素</code>对待</p></li><li><p>::after 后伪元素是在元素里面的后面插入伪元素，可以当做<code>行内元素</code>对待</p></li><li><p>可以写成:before :after</p></li><li><p><strong>其中content为必写属性，否则伪元素不成立</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><ul><li>定位在浮动的上面</li></ul><h3 id="静态定位Static"><a href="#静态定位Static" class="headerlink" title="静态定位Static"></a>静态定位Static</h3><ul><li>不会动，不脱标，元素默认的定位方式</li></ul><blockquote><p>position:static</p></blockquote><h3 id="相对定位relative"><a href="#相对定位relative" class="headerlink" title="相对定位relative"></a>相对定位relative</h3><ul><li>特点：<ul><li>1.相对定位元素<code>不脱标</code>还占据原来的位置</li><li>2.相对定位的元素位置偏移基于<code>自身</code>位置</li></ul></li></ul><h3 id="绝对定位absolute"><a href="#绝对定位absolute" class="headerlink" title="绝对定位absolute"></a>绝对定位absolute</h3><ul><li>特点：<ul><li>1.绝对定位的元素<code>脱标</code>，不占据原来的位置</li><li>2.绝对定位的元素，所有父元素没有定位，位置偏移基于<code>浏览器</code></li><li>3.绝对定位的元素，如果父元素有定位，位置偏移基于离他最近的使用了定位的父元素偏移</li><li>4.绝对定位的元素有了<code>行内块</code>的显示特点<ul><li>绝对定位的块元素，不会默认父元素的宽，默认宽度为0</li><li>绝对定位的行内元素，可以设置宽高</li></ul></li></ul></li></ul><h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><ul><li>子绝父相：子元素<code>绝对定位</code>absolute，父元素<code>相对定位</code>relative，子元素的位置偏移基于父元素，父元素不脱标，还占据原来的位置，下边的盒子顶不上来，布局正常</li></ul><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><ul><li><p>特点：</p><ul><li>1.固定定位的元素<code>脱标</code>，不占据原来的位置</li><li>2.固定定位的元素的位置偏移基于<code>浏览器可视窗口</code></li><li>3.固定定位的元素有了<code>行内块</code>元素的显示<ul><li>固定定位的块元素不会默认父元素的宽度，默认宽高为0，内容会撑开宽高</li><li>固定定位的行内元素会转换成行内块元素，可以设置宽高</li></ul></li></ul></li><li><p>固定定位与绝对定位比较</p><ul><li><code>绝对定位</code>位置偏移基于浏览器的时候，<code>会随着滚动条（内容）滚动</code></li><li><code>固定定位</code>位置偏移基于浏览器可视窗口的时候，<code>不会随着滚动条（内容）滚动</code></li></ul><blockquote><p>百分比为单位时候，绝大多数参考的父元素的宽度 </p><p>前面学的background-size参考的是盒子宽度-背景图片的宽度=剩余宽度的百分比</p></blockquote></li></ul><h3 id="定位的盒子居中显示"><a href="#定位的盒子居中显示" class="headerlink" title="定位的盒子居中显示"></a>定位的盒子居中显示</h3><ul><li><p>当元素的定位时候，margin:0 auto失效（脱标）</p></li><li><p>只能使<code>标准流</code>里的块元素水平居中</p></li><li><p>定位盒子居中显示</p><ul><li>方法1：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="built_in">-</span>(向左走自身宽度的一半)</span><br><span class="line">    margin-top:<span class="built_in">-</span>(向上走自身高度的一)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法2</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    //设置这种方式的前提是必须盒子的宽度是设置了的，被内容撑开的宽高无效</span><br><span class="line">    <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span><br><span class="line">    <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">    <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">    <span class="selector-tag">right</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">    <span class="selector-tag">bottom</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">    <span class="selector-tag">margin</span><span class="selector-pseudo">:auto</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="定位元素的堆叠顺序"><a href="#定位元素的堆叠顺序" class="headerlink" title="定位元素的堆叠顺序"></a>定位元素的堆叠顺序</h3><ul><li>z-index:默认值为0，标签越靠后，z-index层叠顺序就越靠前</li><li>如果属性值相同时，按照书写顺序，后来居上</li><li>数字后面不加单位</li><li><strong>注意：z-index只能应用于相对定位，绝对定位，固定定位上，对于标准流和浮动，静态定位无效</strong></li></ul><h2 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h2><ul><li>display:none:<code>隐藏对象</code>，隐藏之后不占位置</li><li>visibility:hidden:<code>对象隐藏</code>，隐藏之后还占据位置</li></ul><h2 id="overflow元素的溢出处理"><a href="#overflow元素的溢出处理" class="headerlink" title="overflow元素的溢出处理"></a>overflow元素的溢出处理</h2><ul><li>overflow：visible;溢出可见 <code>默认值</code></li><li>overflow:scroll;不管内容是否溢出，都生成滚动条</li><li>overflow:auto;溢出时候有滚动条，不溢出不生成滚动条</li><li>overflow:hidden;溢出隐藏</li><li><code>溢出的内容不占位置</code></li></ul><h2 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h2><ul><li>cursor:default 默认值 小白</li><li>pointer:小手</li><li>move:移动</li><li>text:文本</li><li>not-allowed 禁止</li><li>help:帮助</li></ul><h2 id="清除轮廓线"><a href="#清除轮廓线" class="headerlink" title="清除轮廓线"></a>清除轮廓线</h2><ul><li>outline:0/none:清除轮廓线</li><li>resize:none:禁止<code>文本域</code>拖拽</li></ul><h2 id="单行文本生成省略号实现"><a href="#单行文本生成省略号实现" class="headerlink" title="单行文本生成省略号实现"></a>单行文本生成省略号实现</h2><ul><li><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">white-space</span><span class="selector-pseudo">:nowrap</span>;<span class="comment">/*让文本强制一行显示*/</span></span><br><span class="line"><span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;<span class="comment">/*将溢出的文字变为省略号*/</span></span><br><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;<span class="comment">/*溢出的部分隐藏*/</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="vertical-align垂直对象方式"><a href="#vertical-align垂直对象方式" class="headerlink" title="vertical-align垂直对象方式"></a>vertical-align垂直对象方式</h2><ul><li><p>vertical-align:是<code>行内元素和行块元素</code>的专有属性</p></li><li><p>控制行内元素、行内块元素、文字垂直对齐，对块元素无效</p><ul><li>baseline默认</li><li>top 顶对齐</li><li>bottom 底对齐</li><li>middle 垂直居中对齐</li></ul></li><li><p>vertical-align:baseline:<code>清除图片底部的缝隙</code>，只需要将vertical-align的值设置为除了baseline(基线以外的值)都可以，或者将图片<code>转换为块元素</code>，也能清除图片底部的缝隙</p></li><li><p>top 顶对齐</p></li><li><p>middle 垂直居中对齐</p></li><li><p>bottom 底对齐</p></li><li><p>a链接的文字大小尽量写在父元素上进行继承，否则会出现问题，如果是写在a标签上，进行如下解决：</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line"> <span class="attribute">vertical-align</span>:middle;</span><br><span class="line"> <span class="attribute">font-size</span>:<span class="number">12px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="精灵图的使用"><a href="#精灵图的使用" class="headerlink" title="精灵图的使用"></a>精灵图的使用</h2><ul><li>使用步骤<ul><li>1.背景图片撑不开盒子的宽高，测量需要局部的大小，设置为盒子的宽高</li><li>2.将测量的局部大小的坐标值，设置成背景定位的<strong>负值</strong></li></ul></li></ul><h2 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h2><ul><li><p>div的第一个孩子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span><span class="comment">/*空格必须有*/</span> <span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*可以省略子元素*/</span></span><br></pre></td></tr></table></figure></li><li><p>div的最后一个子元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span><span class="comment">/*空格必须有*/</span>  <span class="selector-tag">span</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*可以省略子元素*/</span></span><br></pre></td></tr></table></figure></li><li><p>选择父元素的第几个子元素（<code>从1开始</code>）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span><span class="comment">/*空格必须有*/</span>  <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line">    <span class="comment">/*注意p要和第几个子元素对应上，不然无效*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*可以省略子元素*/</span></span><br><span class="line"><span class="comment">/*可以进行选择的自己的后代*/</span></span><br></pre></td></tr></table></figure></li><li><p>选择父元素的倒数第几个子元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span><span class="comment">/*空格必须有*/</span>  <span class="selector-tag">h2</span><span class="selector-pseudo">:nth-last-child(3)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*可以省略子元素*/</span></span><br></pre></td></tr></table></figure></li><li><p>选择父元素里边<code>**同类型**</code>的第几个子元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:nth-of-type(2)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*不能省略对应的子元素*/</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="placeholder占位符"><a href="#placeholder占位符" class="headerlink" title="placeholder占位符"></a>placeholder占位符</h2><ul><li>::placeholder修改占位符样式，占位符选择器，修改占位符的样式，必须是<code>两个占冒号</code></li></ul><h2 id="插入网页的图标"><a href="#插入网页的图标" class="headerlink" title="插入网页的图标"></a>插入网页的图标</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href='favicon.ico' rel='short icon' type='image/x-icon'&gt;</span><br></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><ul><li><p>通过标签的属性来选择标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[href]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[class]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过标签完整的属性值来选择标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[href='abc.html']</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[type='text']</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过标签属性的值以某些字符<code>开头</code>的来选择标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[href^='a']</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过标签属性的值以某些字符<code>结尾</code>来选择标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[href$='l']</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过属性的值<code>包含</code>某些字符来选择标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[href*='a']</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="css属性的书写顺序"><a href="#css属性的书写顺序" class="headerlink" title="css属性的书写顺序"></a>css属性的书写顺序</h2><ul><li>1.定位布局（display/position/float/clear/visibility/overflow）</li><li>2.自身属性（width/height/margin/padding/border/background）</li><li>3.文本属性（color/font/text-decoration/text-align/vertical-align/white-space/border-word）</li><li>4.其他属性(css3)(content/cursor/boroder-radius/box-shadow/text-shadow/background:linear-gradient)</li></ul><h2 id="三角形的制作"><a href="#三角形的制作" class="headerlink" title="三角形的制作"></a>三角形的制作</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-style</span>:solid;</span><br><span class="line">    <span class="attribute">border-color</span>:transparent transparent blue transparent;</span><br><span class="line">    <span class="attribute">border-width</span>:<span class="number">50px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h2><ul><li><p>过渡动画从一种状态到另一种状态（属性值的变化），过渡需要触发条件，通常都<code>写在开始状态</code></p></li><li><p>过渡属性：transition-property:(all 全部属性 多个属性用逗号隔开)</p></li><li><p>过渡时间：transition-duration:1s 必写</p></li><li><p>过渡时间曲线：transition-timing-function:linear/ease(默认)/ease-in/ease-out/ease-in-out</p></li><li><p>过渡的延时：transition-delay:1s</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition</span><span class="selector-pseudo">:all</span> 1<span class="selector-tag">s</span> <span class="selector-tag">linear</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h2><h3 id="新增的语义标签"><a href="#新增的语义标签" class="headerlink" title="新增的语义标签"></a>新增的语义标签</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;header&gt;头部&lt;/header&gt;</span><br><span class="line">&lt;nav&gt;导航&lt;/nav&gt;</span><br><span class="line">&lt;aside&gt;侧边栏&lt;/aside&gt;</span><br><span class="line">&lt;article&gt;文章&lt;/article&gt;</span><br><span class="line">&lt;section&gt;区块&lt;/section&gt;</span><br><span class="line">&lt;footer&gt;底部&lt;/footer&gt;</span><br></pre></td></tr></table></figure><h3 id="新增的音频标签"><a href="#新增的音频标签" class="headerlink" title="新增的音频标签"></a>新增的音频标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>=<span class="string">''</span><span class="attr">loop</span>=<span class="string">''</span> <span class="attr">autoplay</span>=<span class="string">''</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">'小乔.mp3'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">'小乔.wav'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">'小乔.ogg'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="新增的表单控件"><a href="#新增的表单控件" class="headerlink" title="新增的表单控件"></a>新增的表单控件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">''</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    邮箱:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'email'</span>&gt;</span><span class="comment">&lt;!--必须包含@--&gt;</span></span><br><span class="line">    电话：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'tel'</span>&gt;</span></span><br><span class="line">    搜索：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'search'</span>&gt;</span></span><br><span class="line">    数字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'number'</span>&gt;</span></span><br><span class="line">    网址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'url'</span>&gt;</span><span class="comment">&lt;!--必须包含https://--&gt;</span></span><br><span class="line">    时间：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'time'</span>&gt;</span></span><br><span class="line">    日期：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'date'</span>&gt;</span></span><br><span class="line">    周:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'week'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="新增的视频标签"><a href="#新增的视频标签" class="headerlink" title="新增的视频标签"></a>新增的视频标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">''</span><span class="attr">loop</span>=<span class="string">''</span> <span class="attr">autoplay</span>=<span class="string">''</span> <span class="attr">width</span>=<span class="string">''</span> <span class="attr">height</span>=<span class="string">''</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">'小乔.mp4'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">'小乔.web'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">'小乔.ogg'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="新增的表单属性"><a href="#新增的表单属性" class="headerlink" title="新增的表单属性"></a>新增的表单属性</h3><ul><li>placeholder:占位符</li><li>autofocus:自动获取光标焦点</li><li>autocomplete:自动完成<ul><li>on默认值 输入框记住输入的内容</li><li>off输入框不会记住输入的内容</li></ul></li><li>required 必填项</li></ul><h2 id="css3盒模型"><a href="#css3盒模型" class="headerlink" title="css3盒模型"></a>css3盒模型</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-sizing</span><span class="selector-pseudo">:border-box</span> <span class="comment">/*怪异模式下，内边距边框不会撑大盒子*/</span></span><br><span class="line"><span class="selector-tag">box-sizing</span>：<span class="selector-tag">content-box</span><span class="comment">/*标准的盒模型，内边距，边框会撑大盒子*/</span></span><br></pre></td></tr></table></figure><h2 id="css3背景大小"><a href="#css3背景大小" class="headerlink" title="css3背景大小"></a>css3背景大小</h2><ul><li>background-size:<ul><li>cover:背景图片等比例缩放，铺满盒子，有可能显示不完整</li><li>contain:背景图片等比例缩放，显示完整，有可能盒子铺不满</li><li>写2个数值：<ul><li>第一个值代表背景图片的宽，第二个值代表高</li></ul></li><li>通常写一个值，代表宽，高等比例缩放</li><li>百分比：参考盒子的大小<ul><li>写2个值代表，第一只代表宽，第二个代表高</li><li>写1个值代表宽，高等比例缩放</li></ul></li></ul></li></ul><h2 id="css3线性渐变"><a href="#css3线性渐变" class="headerlink" title="css3线性渐变"></a>css3线性渐变</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:linear-gradient(to</span> <span class="selector-tag">top</span>,<span class="selector-tag">red</span>,<span class="selector-tag">green</span>);</span><br></pre></td></tr></table></figure><blockquote><p>多组背景图逗号隔开，最后一组分号结束，背景颜色在最后一组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line">width: 600px;</span><br><span class="line">height: 400px;</span><br><span class="line"><span class="css"><span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">background: url(images/bg1.png) no-repeat left top ,</span><br><span class="line">url(images/bg2.png) no-repeat right top,</span><br><span class="line">url(images/bg3.png) no-repeat right bottom,</span><br><span class="line">url(images/bg4.png) no-repeat left bottom,</span><br><span class="line">red url(images/bg5.png) no-repeat center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h2&gt;&lt;h3 id=&quot;css书写位置&quot;&gt;&lt;a href=&quot;#css书写位置&quot; class=&quot;headerlink&quot; title=&quot;css书写位置
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="CSS" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/CSS/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Webpack</title>
    <link href="http://yoursite.com/2018/12/03/Webpack/"/>
    <id>http://yoursite.com/2018/12/03/Webpack/</id>
    <published>2018-12-03T09:33:09.000Z</published>
    <updated>2019-12-07T09:05:51.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><ul><li>webpack是一个模块打包器，它本身主要打包js模块，结合生态中的一些loader可以实现对很多其他资源的打包，例如less,sass，图片，es6转es5,vue等等文件资源都可以</li><li>使用webpack,我们最终就能使用类似于vueCLI这个根据提供给我们的功能<ul><li>打包js</li><li>打包css</li><li>打包图片</li><li>打包less</li><li>打包less</li><li>打包vue资源</li><li>开发阶段的web服务</li><li>代码热更新</li><li>打包部署命令</li><li>……</li></ul></li><li>webpack之前，还有一些别的构建工具<ul><li>grunt</li><li>gulp</li><li>百度的FIS</li><li>parcel:<code>https://parceljs.org/</code></li><li>rollup</li></ul></li><li>现在webpack已经被各大前端框架作为自己的脚手架工具的基层，例如：<ul><li>Vue:VueCLI</li><li>React:crate-react-app</li><li>Angular:angular-cli</li></ul></li><li>本身webpack只能打包javascript</li><li>参考文档：<code>官方文档：https://webpack.docschina.org/</code></li></ul><h2 id="webpack打包过程"><a href="#webpack打包过程" class="headerlink" title="webpack打包过程"></a>webpack打包过程</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>创建demo练习项目</li><li>在内部创建src文件夹</li><li>在src中创建叫<code>index.js</code>的文件，现在必须叫index.js，后面在进行配置修改</li><li>在src文件夹中创建foo.js</li><li>在src文件夹中创建index.html的文件</li></ul><h3 id="准备webpack"><a href="#准备webpack" class="headerlink" title="准备webpack"></a>准备webpack</h3><ul><li><p>创建一个叫package.json文件（用于保存安装包的依赖信息），此文件无需手动创建，只需要在demo目录下，输入命令<code>npm init -y|npm init</code>,就会自动产生该文件</p></li><li><p>安装webpack到项目的开发依赖中，在demo目录下，输入命令<code>yarn add --dev webpack webpack-cli|yarn add -D webpack webpack-cli|npm install -D webpack webpack-cli|npm install --save-dev webpack webpack-cli</code>当安装完webpack和webpack-cli之后，demo文件夹会出现<code>nodee_modules和package-lock.json</code>两个文件</p><ul><li>其中所有的开发工具相关的包的依赖信息保存到devDependencies中，其实就是一个归类，都是安装包到项目</li></ul></li><li><p>将<code>package.json</code>文件中的scripts中新增代码</p><p><img src="E:%5Cblack%5C%E5%B0%B1%E4%B8%9A%E7%8F%AD%5Cwebpack%5Cassets%5C1575034547401.png" alt="1575034547401"></p></li><li><p>在命令行中执行<code>npm run build</code>，npm就会找到package.json中的build配置项，运行webpack构建打包，此时执行完该命令就会发现demo文件夹下，多出来<code>dist</code>文件夹</p><ul><li>webpack默认会找到src的<code>index.js</code>作为<code>打包的入口</code>，然后从入口分析所有的依赖:<ul><li>a依赖了b</li><li>b依赖了c</li><li>a依赖了b</li><li>……</li><li>所有依赖的文件</li></ul></li><li>将他们编译构建处理，最终生成一个默认名字叫<code>main.js</code>文件写入dist目录</li><li>在你的html文件中加载打包的结果dist/main.js进行访问测试，此时便看到相应的结果</li></ul></li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="配置出口和入口文件"><a href="#配置出口和入口文件" class="headerlink" title="配置出口和入口文件"></a>配置出口和入口文件</h3><ul><li><p>webpack打包的入口和出口具有默认规则，如果想要自定义，或者其他一些更高级的功能配置，那么我们需要使用配置文件</p><blockquote><p>rm -rf .git删除一切，不要乱来</p></blockquote></li><li><p>在项目的根目录中创建<code>webpack.config.js</code>并写入</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">mode: <span class="string">'development'</span>,</span><br><span class="line">entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">output: &#123;</span><br><span class="line"> path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line"> filename: <span class="string">'bundle.js'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>在package.json中修改build配置项（非必须）</p><blockquote><p>“scripts”: {</p><p>​    “build”:”webpack –config webpack.config.json”</p><p>},</p></blockquote></li><li><p>修改完成之后，进行重新打包构建<code>npm run build|yarn run build|yarn build</code></p></li><li><p>关于npm中的scripts小知识：当在命令行中输入<code>npm run b</code>，也会同时出发preb,postb命令执行—-<code>钩子</code></p><blockquote><p>“scripts”: {</p><p>​    “build”: “webpack –config webpack.config.js”,</p><p>​    “preb”: “node a.js”,</p><p>​    “b”: “node b.js”,</p><p>​    “postb”: “node c.js”</p><p>},</p></blockquote></li></ul><h3 id="打包模式mode"><a href="#打包模式mode" class="headerlink" title="打包模式mode"></a>打包模式mode</h3><ul><li>development：开发模式，更快的打包速度（无优化，没有压缩）</li><li>production：生产模式，更优的打包结果（优化，例如代码压缩）<code>默认</code></li><li>在webpack.config.js中写入：</li></ul><blockquote><p>  mode: ‘development’,</p></blockquote><h2 id="打包css"><a href="#打包css" class="headerlink" title="打包css"></a>打包css</h2><ul><li><p>已知webpack只对js进行打包，如果想要对其他资源进行打包，需要利用loader插件，进行相关的配置</p></li><li><p>具体配置步骤</p><ul><li><p>安装：<code>npm install --save-dev style-loader css-loader</code></p></li><li><p>在main.js入口文件中引入css文件<code>import &#39;./style/index.css&#39;</code></p></li><li><p>在webpack.config.js中添加：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line"> rules: [</span><br><span class="line">   &#123;</span><br><span class="line">     test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">     use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>],</span><br><span class="line">   &#125;,</span><br><span class="line"> ],</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote></li></ul></li></ul><h2 id="打包图片"><a href="#打包图片" class="headerlink" title="打包图片"></a>打包图片</h2><ul><li><p>安装<code>npm install --save-dev file-loader</code></p></li><li><p>在webpack.config.js中写入：</p><blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"> entry: './src/index.js',</span><br><span class="line"> output: &#123;</span><br><span class="line">   filename: 'bundle.js',</span><br><span class="line">   path: path.resolve(__dirname, 'dist'),</span><br><span class="line"> &#125;,</span><br><span class="line"> module: &#123;</span><br><span class="line">   rules: [</span><br><span class="line">     &#123;</span><br><span class="line">       test: /\.css$/,</span><br><span class="line">       use: [</span><br><span class="line">         'style-loader',</span><br><span class="line">         'css-loader'</span><br><span class="line">       ],</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="addition">+       &#123;</span></span><br><span class="line"><span class="addition">+         test: /\.(png|svg|jpg|gif)$/,</span></span><br><span class="line"><span class="addition">+         use: [</span></span><br><span class="line"><span class="addition">+           'file-loader',</span></span><br><span class="line"><span class="addition">+         ],</span></span><br><span class="line"><span class="addition">+       &#125;,</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="打包html文件"><a href="#打包html文件" class="headerlink" title="打包html文件"></a>打包html文件</h2><ul><li><p>为了解决打包之后的路径问题，我们必须把html文件也打包到dist目录中，然后运行dist中的html文件</p></li><li><p>安装<code>npm install --save-dev html-webpack-plugin</code></p></li><li><p>在webpack.config.js中添加：</p></li><li><p>参考文档：<code>https://github.com/jantimon/html-webpack-plugin</code></p><blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const path = require('path');</span><br><span class="line"><span class="addition">+ const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">      app: './src/index.js',</span><br><span class="line">      print: './src/print.js',</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+   plugins: [</span></span><br><span class="line"><span class="addition">+     new HtmlWebpackPlugin(&#123;</span></span><br><span class="line"><span class="addition">+       title: 'Output Management',</span></span><br><span class="line"><span class="addition">+     &#125;),</span></span><br><span class="line"><span class="addition">+   ],</span></span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: '[name].bundle.js',</span><br><span class="line">      path: path.resolve(__dirname, 'dist'),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="自动清除dist目录"><a href="#自动清除dist目录" class="headerlink" title="自动清除dist目录"></a>自动清除dist目录</h2><ul><li><p>安装：<code>npm install --save-dev clean-webpack-plugin</code></p></li><li><p>在webpack.config.js中写入：</p><blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const path = require('path');</span><br><span class="line">const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line"><span class="addition">+ const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span></span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">      app: './src/index.js',</span><br><span class="line">      print: './src/print.js',</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line"><span class="addition">+     new CleanWebpackPlugin(),</span></span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: 'Output Management',</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: '[name].bundle.js',</span><br><span class="line">      path: path.resolve(__dirname, 'dist'),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="打包字体文件"><a href="#打包字体文件" class="headerlink" title="打包字体文件"></a>打包字体文件</h2><ul><li><p>安装：<code>npm install --save-dev file-loader</code></p></li><li><p>在webpack.config.js中添加：</p><blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">const path = require('path');</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"> entry: './src/index.js',</span><br><span class="line"> output: &#123;</span><br><span class="line">   filename: 'bundle.js',</span><br><span class="line">   path: path.resolve(__dirname, 'dist'),</span><br><span class="line"> &#125;,</span><br><span class="line"> module: &#123;</span><br><span class="line">   rules: [</span><br><span class="line">     &#123;</span><br><span class="line">       test: /\.css$/,</span><br><span class="line">       use: [</span><br><span class="line">         'style-loader',</span><br><span class="line">         'css-loader'</span><br><span class="line">       ],</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       test: /\.(png|svg|jpg|gif)$/,</span><br><span class="line">       use: [</span><br><span class="line">         'file-loader',</span><br><span class="line">       ],</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="addition">+       &#123;</span></span><br><span class="line"><span class="addition">+         test: /\.(woff|woff2|eot|ttf|otf)$/,</span></span><br><span class="line"><span class="addition">+         use: [</span></span><br><span class="line"><span class="addition">+           'file-loader',</span></span><br><span class="line"><span class="addition">+         ],</span></span><br><span class="line"><span class="addition">+       &#125;,</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="打包less"><a href="#打包less" class="headerlink" title="打包less"></a>打包less</h2><ul><li><p>安装：<code>npm install less-loader style-loader css-loader --save-dev</code></p></li><li><p>在webpack.config.js中添加：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line"> rules: [</span><br><span class="line">   &#123;</span><br><span class="line">     test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">     use: [</span><br><span class="line">       &#123;</span><br><span class="line">         loader: <span class="string">'style-loader'</span>, <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         loader: <span class="string">'css-loader'</span>, <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         loader: <span class="string">'less-loader'</span>, <span class="comment">// compiles Less to CSS</span></span><br><span class="line">       &#125;,</span><br><span class="line">     ],</span><br><span class="line">   &#125;,</span><br><span class="line"> ],</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="打包ES转ES5"><a href="#打包ES转ES5" class="headerlink" title="打包ES转ES5"></a>打包ES转ES5</h2><ul><li><p>w为了能让代码中的ES6能运行在低版本的浏览器，我们需要把ES6转为ES5向下兼容</p></li><li><p>babel是一个专门将ES6转ES5的编译工具</p></li><li><p>安装：<code>npm install -D babel-loader @babel/core @babel/preset-env webpack</code></p></li><li><p>在webpack.config.js中配置</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line"> &#123;</span><br><span class="line">   test: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">   exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">   use: &#123;</span><br><span class="line">     loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">     options: &#123;</span><br><span class="line">       presets: [<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="API兼容处理"><a href="#API兼容处理" class="headerlink" title="API兼容处理"></a>API兼容处理</h2><ul><li><p>通过以上配置，只能把基本的语法转换兼容处理，例如：const,let,箭头函数，解构赋值……，但是不会处理一些API方法，例如：字符串的includes方法，数组的includes方法，find,findIndex,includes……</p></li><li><p>参考文档:<a href="https://www.babeljs.cn/docs/babel-polyfill" target="_blank" rel="noopener">https://www.babeljs.cn/docs/babel-polyfill</a></p></li><li><p>安装：<code>npm install --save @babel/polyfill</code></p></li><li><p>webpack.config.js中设置：</p><blockquote><p>module.exports = {<br>entry: [“@babel/polyfill”, “./app/js”],<br>};</p></blockquote></li></ul><h2 id="开启缓存"><a href="#开启缓存" class="headerlink" title="开启缓存"></a>开启缓存</h2><ul><li><p>babel打包比较耗时，当代码文件比较多的时候，开启缓存，提高打包的效率</p></li><li><p>在webpack.config.js中设置：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line"> &#123;</span><br><span class="line">   test: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">   exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">   use: &#123;</span><br><span class="line">     loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">     options: &#123;</span><br><span class="line">       presets: [<span class="string">'@babel/preset-env'</span>],</span><br><span class="line">       cacheDirectory: <span class="literal">true</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="source-maps"><a href="#source-maps" class="headerlink" title="source maps"></a>source maps</h2><ul><li><p>源码导航，让代码行数和实际文件一一对应</p></li><li><p>在webpack.config.js中设置</p><blockquote><p>devtool: ‘source-map’,</p></blockquote></li></ul><h2 id="使用watch监视模式"><a href="#使用watch监视模式" class="headerlink" title="使用watch监视模式"></a>使用watch监视模式</h2><ul><li><p>自动执行npm run build</p></li><li><p>在package.json中添加：</p><blockquote><p>“scripts”: {</p><p>​    “build”: “webpack”,</p><p>​    “watch”: “webpack –config webpack.config.js –watch”</p><p>},</p></blockquote></li></ul><h2 id="使用webpack-dev-server"><a href="#使用webpack-dev-server" class="headerlink" title="使用webpack-dev-server"></a>使用webpack-dev-server</h2><ul><li><p>开启Web服务器</p></li><li><p>监视打包</p></li><li><p><code>自动刷新浏览器</code></p></li><li><p>安装：<code>npm install --save-dev webpack-dev-server</code></p></li><li><p>在webpack.config.js中设置：</p><blockquote><p> devServer: {</p><p> ​        contentBase: ‘./dist’,</p><p> ​        open: false</p><p> ​    },</p></blockquote></li><li><p>在package.json中添加</p></li></ul><blockquote><p> “scripts”: {</p><p> ​    “build”: “webpack”,</p><p> ​    “watch”: “webpack –config webpack.config.js –watch”,</p><p> ​    “serve”: “webpack-dev-server –open”</p><p> },</p></blockquote><h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><ul><li>webpack-dev-serve默认是刷新整个页面实现更新，，有一种更好的方式叫热更新，可以实现不刷新页面的情况下更新内容变化</li><li>注意：对js不支持热更新</li></ul><blockquote><p>devServer: {</p><p>​        contentBase: ‘./dist’,</p><p>​        hot:true,</p><p>​        open: false</p><p>​    },</p></blockquote><h2 id="打包vue"><a href="#打包vue" class="headerlink" title="打包vue"></a>打包vue</h2><ul><li><p>安装：<code>npm install -D vue-loader vue-template-compiler</code></p></li><li><p>配置webpack.config.js</p></li><li><p>参考文档：<code>&lt;https://vue-loader.vuejs.org/guide/#manual-setup&gt;</code></p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line"> rules: [</span><br><span class="line">   <span class="comment">// ... other rules</span></span><br><span class="line">   &#123;</span><br><span class="line">     test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">     loader: <span class="string">'vue-loader'</span></span><br><span class="line">   &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line"> <span class="comment">// make sure to include the plugin!</span></span><br><span class="line"> <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="配置解析的后缀名"><a href="#配置解析的后缀名" class="headerlink" title="配置解析的后缀名"></a>配置解析的后缀名</h2><ul><li><p>webpack默认只支持</p><ul><li>.wasm</li><li>mjs</li><li>js</li><li>json等后缀名可以省略</li></ul></li><li><p>如果想要设置其他后缀名，需要配置</p><blockquote><p> resolve: {</p><pre><code>// 可以省略的文件扩展名// 默认 resolve: {extensions: [&apos;.wasm&apos;, &apos;.mjs&apos;, &apos;.js&apos;, &apos;.json&apos;] }extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;]</code></pre><p> },</p></blockquote></li></ul><h2 id="配置路径别名"><a href="#配置路径别名" class="headerlink" title="配置路径别名"></a>配置路径别名</h2><ul><li><p>类似在VueCLI使用@表示src路径</p></li><li><p>在webpack.config.js中额resolve中添加</p><blockquote><p>resolve: {</p><p>​        // 可以省略的文件扩展名</p><p>​        // 默认 resolve: {extensions: [‘.wasm’, ‘.mjs’, ‘.js’, ‘.json’] }</p><p>​        extensions: [‘.js’, ‘.vue’, ‘.json’],</p><p>​        alias: {</p><p>​            // 名字：值</p><p>​            // 注意对象的键名如果是特殊符号，必须加引号</p><p>​            “@”: path.join(__dirname, ‘./src’)</p><p>​        }</p><p>​    },</p></blockquote></li></ul><h2 id="使用ESLint"><a href="#使用ESLint" class="headerlink" title="使用ESLint"></a>使用ESLint</h2><ul><li><p>ESlint是专门用于JavaScript代码格式校验的工具</p></li><li><p>安装:<code>npm install eslint eslint-loader --save-dev</code></p></li><li><p>配置webpack.config.js</p><blockquote><p> // 配置ESlint</p><p> ​            {</p><p> ​                // 注意必须有强制提前</p><p> ​                enforce: ‘pre’,</p><p> ​                test: /.js$/,</p><p> ​                // 排除 exclude </p><p> ​                // 排除第三方包 格式校验只需要校验我们自己的代码就可以了，不需要校验第三方包</p><p> ​                exclude: /node_modules/,</p><p> ​                loader: ‘eslint-loader’,</p><p> ​            },</p></blockquote></li><li><p>在命令行中输入：<code>.\node_modules\.bin\eslint.cmd --init</code></p><p><img src="E:%5Cblack%5C%E5%B0%B1%E4%B8%9A%E7%8F%AD%5Cwebpack%5Cassets%5C1575048618713.png" alt="1575048618713"></p><p><img src="E:%5Cblack%5C%E5%B0%B1%E4%B8%9A%E7%8F%AD%5Cwebpack%5Cassets%5C1575048686616.png" alt="1575048686616"></p><p><img src="E:%5Cblack%5C%E5%B0%B1%E4%B8%9A%E7%8F%AD%5Cwebpack%5Cassets%5C1575048707731.png" alt="1575048707731"></p><p><img src="E:%5Cblack%5C%E5%B0%B1%E4%B8%9A%E7%8F%AD%5Cwebpack%5Cassets%5C1575048729422.png" alt="1575048729422"></p><p><img src="E:%5Cblack%5C%E5%B0%B1%E4%B8%9A%E7%8F%AD%5Cwebpack%5Cassets%5C1575048750739.png" alt="1575048750739"></p><p><img src="E:%5Cblack%5C%E5%B0%B1%E4%B8%9A%E7%8F%AD%5Cwebpack%5Cassets%5C1575048777730.png" alt="1575048777730"></p><p><img src="E:%5Cblack%5C%E5%B0%B1%E4%B8%9A%E7%8F%AD%5Cwebpack%5Cassets%5C1575048803533.png" alt="1575048803533"></p><p><img src="E:%5Cblack%5C%E5%B0%B1%E4%B8%9A%E7%8F%AD%5Cwebpack%5Cassets%5C1575048821668.png" alt="1575048821668"></p><p><img src="E:%5Cblack%5C%E5%B0%B1%E4%B8%9A%E7%8F%AD%5Cwebpack%5Cassets%5C1575048848841.png" alt="1575048848841"></p></li></ul><h2 id="配置校验规则"><a href="#配置校验规则" class="headerlink" title="配置校验规则"></a>配置校验规则</h2><ul><li><p>ESLint附带大量的规则，你可以使用注释或者配置文件修改你的项目中要使用的规则，要改变的一个规则设置，你必须将规则ID设置为下列之一：</p><blockquote><p>“off” 或 0 - 关闭规则<br>“warn” 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)<br>“error” 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</p></blockquote></li><li><p>在.elintrc.js中进行设置</p><blockquote><p>// 配置代码校验规则</p><p>rules: {</p><p>​    // off 就是关闭</p><p>​    // 规则id(代号):控制选项</p><p>​    ‘no-new’: ‘off’,</p><p>​    semi:[‘error’,’always’]</p><p>}</p></blockquote></li><li><p>也可以在代码中使用注释临时控制代码格式校验</p></li><li><p>为了在文件注释里配置规则，使用以下格式的注释：</p><blockquote><p>/* eslint eqeqeq: “off”, curly: “error” */</p></blockquote></li><li><p>更多配置建议参考 <a href="https://eslint.bootcss.com/docs/user-guide/configuring/" target="_blank" rel="noopener">https://eslint.bootcss.com/docs/user-guide/configuring/</a></p><p>​                                                </p></li></ul><h2 id="在Vue-CLI创建项目中配置webpack"><a href="#在Vue-CLI创建项目中配置webpack" class="headerlink" title="在Vue-CLI创建项目中配置webpack"></a>在Vue-CLI创建项目中配置webpack</h2><ul><li>优化<ul><li>打包的速度</li><li>打包的结果</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Webpack&quot;&gt;&lt;a href=&quot;#Webpack&quot; class=&quot;headerlink&quot; title=&quot;Webpack&quot;&gt;&lt;/a&gt;Webpack&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;webpack是一个模块打包器，它本身主要打包js模块，结合生态中的一些loader可以
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Webpack" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/Webpack/"/>
    
    
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>js高级</title>
    <link href="http://yoursite.com/2018/12/03/js%E9%AB%98%E7%BA%A7/"/>
    <id>http://yoursite.com/2018/12/03/js%E9%AB%98%E7%BA%A7/</id>
    <published>2018-12-03T09:33:09.000Z</published>
    <updated>2019-12-07T09:05:51.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js高级"><a href="#js高级" class="headerlink" title="js高级"></a>js高级</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>三大特性：封装性、继承性、多态性</p><p>类：泛指一类</p><p>对象：类中的具体某个实例【属性和方法的集合】</p><p>属性：特征 对象.属性</p><p>方法：行为 对象.方法</p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><p>类名首字母大写</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="keyword">new</span> Star();</span><br><span class="line"><span class="comment">//对象 instanceof 构造函数</span></span><br><span class="line"><span class="comment">//判断对象是否属于该类</span></span><br><span class="line"><span class="built_in">console</span>.log(n <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>属性放到构造函数constructor中，当自己没有定义构造器，系统会自动创建一个构造函数</p><p>作用：传递参数，返回实例对象，new的时候自动执行构造函数，放一些公共属性</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">        <span class="comment">//属性 对象.属性</span></span><br><span class="line">        <span class="comment">//this 当前实例对象</span></span><br><span class="line">        <span class="comment">//this.属性名字=属性值</span></span><br><span class="line">        <span class="comment">//构造函数中的this,代表的是当前实例对象</span></span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> Star(<span class="string">'二柱子'</span>,<span class="number">22</span>);<span class="comment">//随着实例化对象，构造函数自动执行</span></span><br></pre></td></tr></table></figure><h3 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h3><p>定义与构造函数一样，方法之间不需要写逗号进行分隔，注意类里面的函不加function</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    sing()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    dance()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法： 对象.方法()</span></span><br></pre></td></tr></table></figure><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>通过extends关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    qian()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类继承父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>当子类有需要的自己的属性或者方法时，如何继承？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,scole)&#123;</span><br><span class="line">        <span class="comment">//super调用父类的构造函数和方法</span></span><br><span class="line">        <span class="keyword">super</span>(name,age);</span><br><span class="line">        <span class="keyword">this</span>.scole=scole;</span><br><span class="line">    &#125;</span><br><span class="line">    say()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    qian()&#123;</span><br><span class="line">        <span class="comment">//调用父类的方法</span></span><br><span class="line">        <span class="comment">//super.qian();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> Son(<span class="string">'李寻欢'</span>,<span class="number">22</span>,<span class="number">100</span>);</span><br><span class="line">obj.qian();<span class="comment">//自己有的方法先执行自己的方法，没有则调用父类的方法</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>必须先定义类，在进行实例化对象</li><li>类里面的属性和方法加this[对象.属性   对象.方法()]</li><li>this指向问题：<ul><li>构造函数：this执行实例对象</li><li>方法：this指向调用者【谁调用这个方法，这个方法里面的this就指向谁】</li></ul></li></ul><h3 id="tab栏切换"><a href="#tab栏切换" class="headerlink" title="tab栏切换"></a>tab栏切换</h3><p>思路：</p><ul><li><p>定义一个tab栏类，构造函数中获取相关（标签）属性</p></li><li><p>定义一个初始化init方法，用来添加事件【li点击事件+添加tab栏的添加点击事件】</p></li><li><p>定义tab栏切换方法，使下面的内容对应切换以及样式进行改变</p></li><li><p>定义一个清除类样式的方法，用来实现排他思想</p></li><li><p>定义点击实现添加tab栏的方法</p><ul><li><p>将指定文本解析为html或者xml，并将结果添加到dom树上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">that.ul.insertAdjacentHTML(position,text);</span><br><span class="line"><span class="comment">//position:</span></span><br><span class="line"><span class="comment">//beforebegin:在元素的前面添加</span></span><br><span class="line"><span class="comment">//afterbegin:在元素内部的第一个元素前添加</span></span><br><span class="line"><span class="comment">//beforeend:在元素内部的最后一个元素前添加</span></span><br><span class="line"><span class="comment">//afterend:在元素的后面添加</span></span><br><span class="line"><span class="comment">//text:要添加的文本</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>之前webapi学过添加自定义属性</p><p>将属性添加到标签上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img.setAttribute(<span class="string">'index'</span>,i)</span><br></pre></td></tr></table></figure><p>还有一种是从DOM树上添加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img.index=i;</span><br></pre></td></tr></table></figure><h2 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ul><li><p>字面量方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:<span class="string">'张三'</span>,</span><br><span class="line">    age:<span class="number">22</span>,</span><br><span class="line">    sex:<span class="string">'男'</span>,</span><br><span class="line">    taiji:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'哇哈哈'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过构造函数创建对象【Object】</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.name=<span class="string">'张三'</span>;</span><br><span class="line">obj.taiji=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数名字首字母大写</span></span><br><span class="line"><span class="comment">//构造函数和new一起使用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    <span class="keyword">this</span>.taiji=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zxc=<span class="keyword">new</span> Star(<span class="string">'张三'</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure></li><li><p>工厂模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    obj.name=name;</span><br><span class="line">    obj.age=age;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str=<span class="keyword">new</span> Star(<span class="string">'张三'</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="区别普通函数和构造函数"><a href="#区别普通函数和构造函数" class="headerlink" title="区别普通函数和构造函数"></a>区别普通函数和构造函数</h3><p>是否使用new</p><h3 id="new创建对象做的四件事情"><a href="#new创建对象做的四件事情" class="headerlink" title="new创建对象做的四件事情"></a>new创建对象做的四件事情</h3><ul><li>创建一个新对象的内存空间</li><li>将this指向这个新对象</li><li>执行构造函数内部代码，为新对象添加属性和方法</li><li>返回当前的新对象</li></ul><h3 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h3><ul><li>静态成员：从构造函数本身上的成员叫静态成员，只能通过构造函数调用</li><li>实例成员：从构造函数内部的成员叫实例成员，只能通过实例对象调用</li></ul><h3 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h3><p><strong>属性放在构造函数，方法放在原型对象上，节省内存</strong></p><p>原型对象：prototype,构造函数的一个属性</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Star.prototype.sing=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h3><p>作用：指向原型对象prototype</p><p>对象上都有这个属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.__proto__==Star.prototype);</span><br></pre></td></tr></table></figure><p>当需要重新设置原型对象时候，需要设置一下构造器constructor重新指回构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Star.prototype=&#123;</span><br><span class="line">    <span class="keyword">constructor</span>:Star,</span><br><span class="line">    sing:function()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    dance:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数constructor"><a href="#构造函数constructor" class="headerlink" title="构造函数constructor"></a>构造函数constructor</h3><p>作用：指回构造函数本身</p><p>原型对象上的一个属性</p><h3 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h3><p><img src="C:%5CUsers%5C%E5%88%98%E6%99%93%E6%85%A7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1570797150687.png" alt="1570797150687"></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>提供成员查找机制，或者查找规则</p><p><img src="C:%5CUsers%5C%E5%88%98%E6%99%93%E6%85%A7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1570797720477.png" alt="1570797720477"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>元素标签的原型链：</p><p>HTMLinputElement—&gt;HTMLElement—-&gt;Element—-&gt;Node—–&gt;EventTarget—-&gt;Object—null</p><p>作用域链（往上找）</p><p>0级作用域&lt;—–1级作用域&lt;—–2级作用域</p><h3 id="扩展内置对象的原型对象方法"><a href="#扩展内置对象的原型对象方法" class="headerlink" title="扩展内置对象的原型对象方法"></a>扩展内置对象的原型对象方法</h3><p>给数组添加获取最大值的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.max=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(max&lt;<span class="keyword">this</span>[i])&#123;</span><br><span class="line">            max=<span class="keyword">this</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>组合继承=构造函数+原型对象</p><p>语法：</p><p>属性继承：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.sing=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//属性继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name,age,scole</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//父类对象</span></span><br><span class="line">    Father.call(<span class="keyword">this</span>,name,age);<span class="comment">//改变this指向</span></span><br><span class="line">    <span class="comment">//this:表示当前改变的this指向</span></span><br><span class="line">    <span class="comment">//其他参数：Father其他参数</span></span><br><span class="line">    <span class="keyword">this</span>.scole=scole;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法继承：</p><p>将父类的实例对象赋值给子类的原型对象，再把子类的原型对象指回构造函数constructor</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Son.prototype=<span class="keyword">new</span> Father();</span><br><span class="line">Son.prototype.constructor=Son;<span class="comment">//需要重新指回构造函数</span></span><br><span class="line">Son.prototype.sing=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="comment">//子类添加自己的方法，需要添加在继承方法的后面否则将会报错</span></span><br></pre></td></tr></table></figure><h2 id="类的本质"><a href="#类的本质" class="headerlink" title="类的本质"></a>类的本质</h2><p>本质就是函数function,类中有原型对象，其实例对象中也有对象原型</p><p>语法糖：简单的语法</p><h2 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h2><h3 id="forEach方法"><a href="#forEach方法" class="headerlink" title="forEach方法"></a>forEach方法</h3><p>遍历数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line"><span class="comment">//第一个参数：当前项</span></span><br><span class="line"><span class="comment">//第二个参数：当前索引值</span></span><br><span class="line"><span class="comment">//第三个参数：当前遍历数组本身</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="filter方法"><a href="#filter方法" class="headerlink" title="filter方法"></a>filter方法</h3><p>筛选数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//参数设置与上面一样</span></span><br><span class="line">    <span class="comment">//返回值：返回一个新的数组</span></span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="some方法"><a href="#some方法" class="headerlink" title="some方法"></a>some方法</h3><p>查找数组:查找是否存在某一个值满足条件，当找到满足的值，立马结束程序（原理：存在一个返回值为true的语句 return true;）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//参数设置与上面一样</span></span><br><span class="line">    <span class="comment">//返回值：true或者false</span></span><br><span class="line">    <span class="keyword">return</span> item==<span class="number">2</span>;<span class="comment">//return true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="商品查询案例"><a href="#商品查询案例" class="headerlink" title="商品查询案例"></a>商品查询案例</h2><p>思路：</p><ul><li>打开页面，将数据遍历到表格上，考虑后面筛选和查找还会进行遍历到表格上，所以把遍历定义成一个方法</li><li>点击按钮，获取价格区间，进行筛选显示内容，所以注册一个点击事件，筛选价格区间的商品，filter返回一个新数组，想让此数组显示在页面上，需要再次调用之前定义好的方法，进行显示</li><li>通过改变下拉菜单的选项，进行查找商品<ul><li>option有value属性时，此时select.value==option.value</li><li>option没有value属性时，此时select.value==选中的option文本内容</li><li>通过选中的value和id进行比较，从而选出对应的商品，添加到新数组中，需要再次调用之前定义好的方法，进行显示</li></ul></li></ul><h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><p>trim():清除字符串两侧的空白格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'   app  '</span>；</span><br><span class="line">str=str.trim();</span><br></pre></td></tr></table></figure><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><ul><li><p>命名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数表达式</span></span><br><span class="line"><span class="keyword">var</span> fn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//自调用函数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)()</span><br></pre></td></tr></table></figure></li><li><p>通过Function构造函数创建函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun=<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'console.log("哈哈")'</span>);<span class="comment">//传递的参数均为字符串格式</span></span><br><span class="line"><span class="comment">//函数也是对象</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="comment">//事件处理函数</span></span><br><span class="line">btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//对象方法</span></span><br><span class="line">obj.sing();</span><br><span class="line"><span class="comment">//定时器</span></span><br><span class="line"><span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">new</span> Father();</span><br><span class="line"><span class="comment">//自调用函数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)()</span><br></pre></td></tr></table></figure><h2 id="this指向改变"><a href="#this指向改变" class="headerlink" title="this指向改变"></a>this指向改变</h2><p>this指向：</p><p>普通函数：window</p><p>构造函数：实例对象</p><p>绑定事件处理函数：当前绑定的对象</p><p>对象方法：当前调用者</p><p>自调用函数：window</p><p>定时器：window</p><h3 id="call方法"><a href="#call方法" class="headerlink" title="call方法"></a>call方法</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:<span class="string">'张三'</span>,</span><br><span class="line">&#125;</span><br><span class="line">fn.call(obj,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//改变fn的this的指向</span></span><br><span class="line"><span class="comment">//obj 当前改变的this指向</span></span><br><span class="line"><span class="comment">//1 fn函数的其他参数</span></span><br></pre></td></tr></table></figure><h3 id="apply方法"><a href="#apply方法" class="headerlink" title="apply方法"></a>apply方法</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:<span class="string">'张三'</span>,</span><br><span class="line">&#125;</span><br><span class="line">fn.apply(obj,[<span class="number">1</span>,<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//改变fn的this指向</span></span><br><span class="line"><span class="comment">//obj 当前改变的this指向</span></span><br><span class="line"><span class="comment">//[1,2] fn函数其他参数，且注意参数必须是以数组形式传入</span></span><br><span class="line"><span class="comment">//该方法一般用于与数组相关的操作</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>]);</span><br></pre></td></tr></table></figure><h3 id="bind方法"><a href="#bind方法" class="headerlink" title="bind方法"></a>bind方法</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.disabled=<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.disabled=<span class="literal">false</span>;</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>),<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>相同点：三者都改变了this的指向,<strong>注意是函数调用三者</strong></li><li>不同点：<ul><li>apply第二个参数必须传入数组</li><li>call,apply方法返回值为调用的函数的返回结果（两者调用会使函数也调用），bind会产生一个新的函数，但是不会调用该函数</li></ul></li><li>应用场景：<ul><li>call:继承</li><li>apply:数组操作</li><li>bind:不需要立即执行的函数，如定时器</li></ul></li></ul><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>js模式分为严格模式和正常模式</p><p>严格模式分为：</p><p>​    脚本严格模式：脚本第一句写‘use strict’;</p><p>​    函数严格模式：函数第一句写‘use strict’;</p><p>开启严格模式变化：</p><p>变量变化：必须通过var声明，且变量不可以删除（delete ）</p><p>this指向改变：</p><p>​        普通函数this变为undefined</p><p>​        构造函数不使用new,this也为undefined</p><p>函数变化：</p><p>​        函数不能在非函数区域内定义(产生块级链作用域)</p><p>​        函数参数不能重名 eg:function(a,a){}</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p><strong>函数返回值：把这个值返回到调用的位置</strong></p><p>return如果有值，把这个值返回到调用的位置，return后面不写值，默认返回undefined，不写return,返回undefined</p><p>把函数作为参数传递或者把函数当做返回值返回的函数，叫做高阶函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> m=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line">fn(m);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1=fn();</span><br><span class="line">f1();</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断传入的参数为函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    callback&amp;&amp;callback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>在一个作用域可以访问另一个函数作用域内的变量，通常是内部函数访问外部函数的变量</p><p>作用：延伸变量的使用范围</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>在函数内部自己调用自己，类似死循环，需要利用return进行结束</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:<span class="string">'张三'</span>,</span><br><span class="line">    sing：&#123;</span><br><span class="line">    sex:<span class="string">'男'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> newObj=&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    newObj[key]=obj[key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//浅拷贝就是当遇到对象等复杂类型时，拷贝地址</span></span><br><span class="line"><span class="built_in">Object</span>.assign(target,source);</span><br><span class="line"><span class="built_in">Object</span>.assign(newObj,obj);</span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>当遇到拷贝对象时候，直接复制对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kaoBei</span>(<span class="params">target,current</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> current)&#123;</span><br><span class="line">        <span class="keyword">if</span>(current[key] <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">            target[key]=[];</span><br><span class="line">            kaoBei(target[key],current[key]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(current[key] <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;</span><br><span class="line">            target[key]=&#123;&#125;;</span><br><span class="line">            kaoBei(taget[key],current[key]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            target[key]=current[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>简单字符+特殊字符（元字符）</p><h3 id="正则表达式的创建"><a href="#正则表达式的创建" class="headerlink" title="正则表达式的创建"></a>正则表达式的创建</h3><ul><li><p>方式一：字面量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/abc/</span>;<span class="comment">//包括abc整体</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>方式二：构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/abc/</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="正则测试"><a href="#正则测试" class="headerlink" title="正则测试"></a>正则测试</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg.test(<span class="string">'字符串'</span>);</span><br><span class="line"><span class="comment">//返回值：布尔值</span></span><br></pre></td></tr></table></figure><h3 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h3><ul><li><p>^ 以什么文本位于首部</p></li><li><p>$ 以什么文本位于尾部</p></li><li><p>如果^和$一起使用，精确匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^abc$/</span>;<span class="comment">//只能是abc</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="中括号"><a href="#中括号" class="headerlink" title="中括号"></a>中括号</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/[abc]/</span>;<span class="comment">//多选一 a|b|c</span></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[abc]$/</span>;<span class="comment">//只能是a|b|c</span></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[^a-zA-Z0-9]$/</span>;<span class="comment">//中括号里面的^是取反的意思，除了a-zA-Z0-9，只能选一个</span></span><br></pre></td></tr></table></figure><h3 id="量词符"><a href="#量词符" class="headerlink" title="量词符"></a>量词符</h3><ul><li>* 表示0-多次重复</li><li>+ 表示1-多次重复</li><li>? 表示0或者1次</li><li>{n} 表示重复n次</li><li>{n,}表示重复n到多次</li><li>{n,m} 表示重复n到m次</li></ul><h3 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h3><ul><li>\d  [0-9]</li><li>\D [^0-9]</li><li>\w [0-9a-zA-Z]</li><li>\W[^0-9a-zA-Z]</li><li>\s空格符</li><li>\S 非空格符</li></ul><h3 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h3><p>location.href=’网址’;//跳转页面</p><p>navigator.userAgent;//浏览器相关信息</p><p>history.back()//返回上一个页面</p><p>history.forward()//返回下一个页面</p><h3 id="replace替换"><a href="#replace替换" class="headerlink" title="replace替换"></a>replace替换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'abdkashdsd'</span>;</span><br><span class="line">str=str.replace(<span class="string">'b'</span>,<span class="string">'*'</span>)；</span><br><span class="line"><span class="comment">//可以传正则表达式</span></span><br><span class="line">str=str.replace(<span class="regexp">/b/g</span>,<span class="string">'*'</span>);</span><br><span class="line"><span class="comment">//其中g表示全局替换</span></span><br><span class="line"><span class="comment">//i表示忽略大小写</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js高级&quot;&gt;&lt;a href=&quot;#js高级&quot; class=&quot;headerlink&quot; title=&quot;js高级&quot;&gt;&lt;/a&gt;js高级&lt;/h1&gt;&lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="js高级" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/js%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="js高级" scheme="http://yoursite.com/tags/js%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
</feed>
